export default {
  "AccordionBodySlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AccordionItem } from '@nuxt/ui'\r\n\r\nconst items: AccordionItem[] = [\r\n  {\r\n    label: 'Icons',\r\n    icon: 'i-lucide-smile'\r\n  },\r\n  {\r\n    label: 'Colors',\r\n    icon: 'i-lucide-swatch-book'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UAccordion :items=\"items\">\r\n    <template #body=\"{ item }\">\r\n      This is the {{ item.label }} panel.\r\n    </template>\r\n  </UAccordion>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/accordion/AccordionBodySlotExample.vue",
    "pascalName": "AccordionBodySlotExample"
  },
  "AccordionContentSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AccordionItem } from '@nuxt/ui'\r\n\r\nconst items: AccordionItem[] = [\r\n  {\r\n    label: 'Icons',\r\n    icon: 'i-lucide-smile'\r\n  },\r\n  {\r\n    label: 'Colors',\r\n    icon: 'i-lucide-swatch-book'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UAccordion :items=\"items\">\r\n    <template #content=\"{ item }\">\r\n      <p class=\"pb-3.5 text-sm text-muted\">\r\n        This is the {{ item.label }} panel.\r\n      </p>\r\n    </template>\r\n  </UAccordion>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/accordion/AccordionContentSlotExample.vue",
    "pascalName": "AccordionContentSlotExample"
  },
  "AccordionCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AccordionItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'Icons',\r\n    icon: 'i-lucide-smile',\r\n    content: 'You have nothing to do, @nuxt/icon will handle it automatically.'\r\n  },\r\n  {\r\n    label: 'Colors',\r\n    icon: 'i-lucide-swatch-book',\r\n    slot: 'colors' as const,\r\n    content: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box',\r\n    content: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\r\n  }\r\n] satisfies AccordionItem[]\r\n</script>\r\n\r\n<template>\r\n  <UAccordion :items=\"items\">\r\n    <template #colors=\"{ item }\">\r\n      <p class=\"text-sm pb-3.5 text-primary\">\r\n        {{ item.content }}\r\n      </p>\r\n    </template>\r\n  </UAccordion>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/accordion/AccordionCustomSlotExample.vue",
    "pascalName": "AccordionCustomSlotExample"
  },
  "AccordionDragAndDropExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AccordionItem } from '@nuxt/ui'\r\nimport { useSortable } from '@vueuse/integrations/useSortable'\r\n\r\nconst items = shallowRef<AccordionItem[]>([\r\n  {\r\n    label: 'Icons',\r\n    icon: 'i-lucide-smile',\r\n    content: 'You have nothing to do, @nuxt/icon will handle it automatically.'\r\n  },\r\n  {\r\n    label: 'Colors',\r\n    icon: 'i-lucide-swatch-book',\r\n    content: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box',\r\n    content: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\r\n  }\r\n])\r\n\r\nconst accordion = useTemplateRef<HTMLElement>('accordion')\r\n\r\nuseSortable(accordion, items, {\r\n  animation: 150\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UAccordion ref=\"accordion\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/accordion/AccordionDragAndDropExample.vue",
    "pascalName": "AccordionDragAndDropExample"
  },
  "AccordionModelValueExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AccordionItem } from '@nuxt/ui'\r\n\r\nconst items: AccordionItem[] = [\r\n  {\r\n    label: 'Icons',\r\n    icon: 'i-lucide-smile',\r\n    content: 'You have nothing to do, @nuxt/icon will handle it automatically.'\r\n  },\r\n  {\r\n    label: 'Colors',\r\n    icon: 'i-lucide-swatch-book',\r\n    content: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box',\r\n    content: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\r\n  }\r\n]\r\n\r\nconst active = ref('0')\r\n\r\n// Note: This is for demonstration purposes only. Don't do this at home.\r\nonMounted(() => {\r\n  setInterval(() => {\r\n    active.value = String((Number(active.value) + 1) % items.length)\r\n  }, 2000)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UAccordion v-model=\"active\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/accordion/AccordionModelValueExample.vue",
    "pascalName": "AccordionModelValueExample"
  },
  "AvatarGroupChipExample": {
    "code": "<template>\r\n  <UAvatarGroup>\r\n    <UAvatar\r\n      src=\"https://github.com/benjamincanac.png\"\r\n      alt=\"Benjamin Canac\"\r\n      :chip=\"{ inset: true, color: 'success' }\"\r\n    />\r\n\r\n    <UAvatar\r\n      src=\"https://github.com/romhml.png\"\r\n      alt=\"Romain Hamel\"\r\n      :chip=\"{ inset: true, color: 'warning' }\"\r\n    />\r\n\r\n    <UAvatar\r\n      src=\"https://github.com/noook.png\"\r\n      alt=\"Neil Richter\"\r\n      :chip=\"{ inset: true, color: 'error' }\"\r\n    />\r\n  </UAvatarGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/avatar-group/AvatarGroupChipExample.vue",
    "pascalName": "AvatarGroupChipExample"
  },
  "AvatarGroupLinkExample": {
    "code": "<template>\r\n  <UAvatarGroup>\r\n    <ULink\r\n      to=\"https://github.com/benjamincanac\"\r\n      target=\"_blank\"\r\n      class=\"hover:ring-primary transition\"\r\n      raw\r\n    >\r\n      <UAvatar\r\n        src=\"https://github.com/benjamincanac.png\"\r\n        alt=\"Benjamin Canac\"\r\n      />\r\n    </ULink>\r\n\r\n    <ULink\r\n      to=\"https://github.com/romhml\"\r\n      target=\"_blank\"\r\n      class=\"hover:ring-primary transition\"\r\n      raw\r\n    >\r\n      <UAvatar\r\n        src=\"https://github.com/romhml.png\"\r\n        alt=\"Romain Hamel\"\r\n      />\r\n    </ULink>\r\n\r\n    <ULink\r\n      to=\"https://github.com/noook\"\r\n      target=\"_blank\"\r\n      class=\"hover:ring-primary transition\"\r\n      raw\r\n    >\r\n      <UAvatar\r\n        src=\"https://github.com/noook.png\"\r\n        alt=\"Neil Richter\"\r\n      />\r\n    </ULink>\r\n  </UAvatarGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/avatar-group/AvatarGroupLinkExample.vue",
    "pascalName": "AvatarGroupLinkExample"
  },
  "AvatarGroupMaskExample": {
    "code": "<template>\r\n  <UAvatarGroup :ui=\"{ base: 'rounded-none squircle' }\">\r\n    <UAvatar\r\n      src=\"https://github.com/benjamincanac.png\"\r\n      alt=\"Benjamin Canac\"\r\n      class=\"rounded-none squircle\"\r\n    />\r\n\r\n    <UAvatar\r\n      src=\"https://github.com/romhml.png\"\r\n      alt=\"Romain Hamel\"\r\n      class=\"rounded-none squircle\"\r\n    />\r\n\r\n    <UAvatar\r\n      src=\"https://github.com/noook.png\"\r\n      alt=\"Neil Richter\"\r\n      class=\"rounded-none squircle\"\r\n    />\r\n  </UAvatarGroup>\r\n</template>\r\n\r\n<style>\r\n.squircle {\r\n  mask-image: url(\"data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e\");\r\n  mask-size: contain;\r\n  mask-position: center;\r\n  mask-repeat: no-repeat;\r\n}\r\n</style>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/avatar-group/AvatarGroupMaskExample.vue",
    "pascalName": "AvatarGroupMaskExample"
  },
  "AvatarGroupTooltipExample": {
    "code": "<template>\r\n  <UAvatarGroup>\r\n    <UTooltip text=\"benjamincanac\">\r\n      <UAvatar\r\n        src=\"https://github.com/benjamincanac.png\"\r\n        alt=\"Benjamin Canac\"\r\n      />\r\n    </UTooltip>\r\n\r\n    <UTooltip text=\"romhml\">\r\n      <UAvatar\r\n        src=\"https://github.com/romhml.png\"\r\n        alt=\"Romain Hamel\"\r\n      />\r\n    </UTooltip>\r\n\r\n    <UTooltip text=\"noook\">\r\n      <UAvatar\r\n        src=\"https://github.com/noook.png\"\r\n        alt=\"Neil Richter\"\r\n      />\r\n    </UTooltip>\r\n  </UAvatarGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/avatar-group/AvatarGroupTooltipExample.vue",
    "pascalName": "AvatarGroupTooltipExample"
  },
  "AvatarMaskExample": {
    "code": "<template>\r\n  <UAvatar class=\"rounded-none squircle\" src=\"https://avatars.githubusercontent.com/u/739984?v=4\" alt=\"Benjamin Canac\" />\r\n</template>\r\n\r\n<style>\r\n.squircle {\r\n  mask-image: url(\"data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e\");\r\n  mask-size: contain;\r\n  mask-position: center;\r\n  mask-repeat: no-repeat;\r\n}\r\n</style>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/avatar/AvatarMaskExample.vue",
    "pascalName": "AvatarMaskExample"
  },
  "AvatarTooltipExample": {
    "code": "<template>\r\n  <UTooltip text=\"Benjamin Canac\">\r\n    <UAvatar\r\n      src=\"https://github.com/benjamincanac.png\"\r\n      alt=\"Benjamin Canac\"\r\n    />\r\n  </UTooltip>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/avatar/AvatarTooltipExample.vue",
    "pascalName": "AvatarTooltipExample"
  },
  "BreadcrumbCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { BreadcrumbItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'Home',\r\n    to: '/'\r\n  },\r\n  {\r\n    slot: 'dropdown' as const,\r\n    icon: 'i-lucide-ellipsis',\r\n    children: [\r\n      {\r\n        label: 'Documentation'\r\n      },\r\n      {\r\n        label: 'Themes'\r\n      },\r\n      {\r\n        label: 'GitHub'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Components',\r\n    to: '/components'\r\n  },\r\n  {\r\n    label: 'Breadcrumb',\r\n    to: '/components/breadcrumb'\r\n  }\r\n] satisfies BreadcrumbItem[]\r\n</script>\r\n\r\n<template>\r\n  <UBreadcrumb :items=\"items\">\r\n    <template #dropdown=\"{ item }\">\r\n      <UDropdownMenu :items=\"item.children\">\r\n        <UButton :icon=\"item.icon\" color=\"neutral\" variant=\"link\" class=\"p-0.5\" />\r\n      </UDropdownMenu>\r\n    </template>\r\n  </UBreadcrumb>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/breadcrumb/BreadcrumbCustomSlotExample.vue",
    "pascalName": "BreadcrumbCustomSlotExample"
  },
  "BreadcrumbSeparatorSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { BreadcrumbItem } from '@nuxt/ui'\r\n\r\nconst items: BreadcrumbItem[] = [\r\n  {\r\n    label: 'Home',\r\n    to: '/'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    to: '/components'\r\n  },\r\n  {\r\n    label: 'Breadcrumb',\r\n    to: '/components/breadcrumb'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UBreadcrumb :items=\"items\">\r\n    <template #separator>\r\n      <span class=\"mx-2 text-muted\">/</span>\r\n    </template>\r\n  </UBreadcrumb>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/breadcrumb/BreadcrumbSeparatorSlotExample.vue",
    "pascalName": "BreadcrumbSeparatorSlotExample"
  },
  "ButtonGroupBadgeExample": {
    "code": "<template>\r\n  <UButtonGroup>\r\n    <UBadge color=\"neutral\" variant=\"outline\" size=\"lg\" label=\"https://\" />\r\n\r\n    <UInput color=\"neutral\" variant=\"outline\" placeholder=\"www.example.com\" />\r\n  </UButtonGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/button-group/ButtonGroupBadgeExample.vue",
    "pascalName": "ButtonGroupBadgeExample"
  },
  "ButtonGroupDropdownExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DropdownMenuItem } from '@nuxt/ui'\r\n\r\nconst items: DropdownMenuItem[] = [\r\n  {\r\n    label: 'Team',\r\n    icon: 'i-lucide-users'\r\n  },\r\n  {\r\n    label: 'Invite users',\r\n    icon: 'i-lucide-user-plus',\r\n    children: [\r\n      {\r\n        label: 'Invite by email',\r\n        icon: 'i-lucide-send-horizontal'\r\n      },\r\n      {\r\n        label: 'Invite by link',\r\n        icon: 'i-lucide-link'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'New team',\r\n    icon: 'i-lucide-plus'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UButtonGroup>\r\n    <UButton color=\"neutral\" variant=\"subtle\" label=\"Settings\" />\r\n\r\n    <UDropdownMenu :items=\"items\">\r\n      <UButton\r\n        color=\"neutral\"\r\n        variant=\"outline\"\r\n        icon=\"i-lucide-chevron-down\"\r\n      />\r\n    </UDropdownMenu>\r\n  </UButtonGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/button-group/ButtonGroupDropdownExample.vue",
    "pascalName": "ButtonGroupDropdownExample"
  },
  "ButtonGroupTooltipExample": {
    "code": "<template>\r\n  <UButtonGroup>\r\n    <UInput color=\"neutral\" variant=\"outline\" placeholder=\"Enter token\" />\r\n\r\n    <UTooltip text=\"Copy to clipboard\">\r\n      <UButton\r\n        color=\"neutral\"\r\n        variant=\"subtle\"\r\n        icon=\"i-lucide-clipboard\"\r\n      />\r\n    </UTooltip>\r\n  </UButtonGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/button-group/ButtonGroupTooltipExample.vue",
    "pascalName": "ButtonGroupTooltipExample"
  },
  "ButtonLoadingAutoExample": {
    "code": "<script setup lang=\"ts\">\r\nasync function onClick() {\r\n  return new Promise<void>(res => setTimeout(res, 1000))\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton loading-auto @click=\"onClick\">\r\n    Button\r\n  </UButton>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/button/ButtonLoadingAutoExample.vue",
    "pascalName": "ButtonLoadingAutoExample"
  },
  "ButtonLoadingAutoFormExample": {
    "code": "<script setup lang=\"ts\">\r\nconst state = reactive({ fullName: '' })\r\n\r\nasync function onSubmit() {\r\n  return new Promise<void>(res => setTimeout(res, 1000))\r\n}\r\n\r\nasync function validate(data: Partial<typeof state>) {\r\n  if (!data.fullName?.length) return [{ name: 'fullName', message: 'Required' }]\r\n  return []\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :state=\"state\" :validate=\"validate\" @submit=\"onSubmit\">\r\n    <UFormField name=\"fullName\" label=\"Full name\">\r\n      <UInput v-model=\"state.fullName\" />\r\n    </UFormField>\r\n    <UButton type=\"submit\" class=\"mt-2\" loading-auto>\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/button/ButtonLoadingAutoFormExample.vue",
    "pascalName": "ButtonLoadingAutoFormExample"
  },
  "CalendarDatePickerExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { CalendarDate, DateFormatter, getLocalTimeZone } from '@internationalized/date'\r\n\r\nconst df = new DateFormatter('en-US', {\r\n  dateStyle: 'medium'\r\n})\r\n\r\nconst modelValue = shallowRef(new CalendarDate(2022, 1, 10))\r\n</script>\r\n\r\n<template>\r\n  <UPopover>\r\n    <UButton color=\"neutral\" variant=\"subtle\" icon=\"i-lucide-calendar\">\r\n      {{ modelValue ? df.format(modelValue.toDate(getLocalTimeZone())) : 'Select a date' }}\r\n    </UButton>\r\n\r\n    <template #content>\r\n      <UCalendar v-model=\"modelValue\" class=\"p-2\" />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarDatePickerExample.vue",
    "pascalName": "CalendarDatePickerExample"
  },
  "CalendarDateRangePickerExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { CalendarDate, DateFormatter, getLocalTimeZone } from '@internationalized/date'\r\n\r\nconst df = new DateFormatter('en-US', {\r\n  dateStyle: 'medium'\r\n})\r\n\r\nconst modelValue = shallowRef({\r\n  start: new CalendarDate(2022, 1, 20),\r\n  end: new CalendarDate(2022, 2, 10)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UPopover>\r\n    <UButton color=\"neutral\" variant=\"subtle\" icon=\"i-lucide-calendar\">\r\n      <template v-if=\"modelValue.start\">\r\n        <template v-if=\"modelValue.end\">\r\n          {{ df.format(modelValue.start.toDate(getLocalTimeZone())) }} - {{ df.format(modelValue.end.toDate(getLocalTimeZone())) }}\r\n        </template>\r\n\r\n        <template v-else>\r\n          {{ df.format(modelValue.start.toDate(getLocalTimeZone())) }}\r\n        </template>\r\n      </template>\r\n      <template v-else>\r\n        Pick a date\r\n      </template>\r\n    </UButton>\r\n\r\n    <template #content>\r\n      <UCalendar v-model=\"modelValue\" class=\"p-2\" :number-of-months=\"2\" range />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarDateRangePickerExample.vue",
    "pascalName": "CalendarDateRangePickerExample"
  },
  "CalendarDisabledDatesExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DateValue } from '@internationalized/date'\r\nimport { CalendarDate } from '@internationalized/date'\r\n\r\nconst modelValue = shallowRef({\r\n  start: new CalendarDate(2022, 1, 1),\r\n  end: new CalendarDate(2022, 1, 9)\r\n})\r\n\r\nconst isDateDisabled = (date: DateValue) => {\r\n  return date.day >= 10 && date.day <= 16\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UCalendar v-model=\"modelValue\" :is-date-disabled=\"isDateDisabled\" range />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarDisabledDatesExample.vue",
    "pascalName": "CalendarDisabledDatesExample"
  },
  "CalendarEventsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { CalendarDate } from '@internationalized/date'\r\n\r\nconst modelValue = shallowRef(new CalendarDate(2022, 1, 10))\r\n\r\nfunction getColorByDate(date: Date) {\r\n  const isWeekend = date.getDay() % 6 == 0\r\n  const isDayMeeting = date.getDay() % 3 == 0\r\n\r\n  if (isWeekend) {\r\n    return undefined\r\n  }\r\n\r\n  if (isDayMeeting) {\r\n    return 'error'\r\n  }\r\n\r\n  return 'success'\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UCalendar v-model=\"modelValue\">\r\n    <template #day=\"{ day }\">\r\n      <UChip :show=\"!!getColorByDate(day.toDate('UTC'))\" :color=\"getColorByDate(day.toDate('UTC'))\" size=\"2xs\">\r\n        {{ day.day }}\r\n      </UChip>\r\n    </template>\r\n  </UCalendar>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarEventsExample.vue",
    "pascalName": "CalendarEventsExample"
  },
  "CalendarExternalControlsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { CalendarDate } from '@internationalized/date'\r\n\r\nconst date = shallowRef(new CalendarDate(2025, 4, 2))\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col gap-4\">\r\n    <UCalendar v-model=\"date\" :month-controls=\"false\" :year-controls=\"false\" />\r\n\r\n    <div class=\"flex justify-between gap-4\">\r\n      <UButton color=\"neutral\" variant=\"outline\" @click=\"date = date.subtract({ months: 1 })\">\r\n        Prev\r\n      </UButton>\r\n\r\n      <UButton color=\"neutral\" variant=\"outline\" @click=\"date = date.add({ months: 1 })\">\r\n        Next\r\n      </UButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarExternalControlsExample.vue",
    "pascalName": "CalendarExternalControlsExample"
  },
  "CalendarMinMaxDatesExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { CalendarDate } from '@internationalized/date'\r\n\r\nconst modelValue = shallowRef(new CalendarDate(2023, 9, 10))\r\nconst minDate = new CalendarDate(2023, 9, 1)\r\nconst maxDate = new CalendarDate(2023, 9, 30)\r\n</script>\r\n\r\n<template>\r\n  <UCalendar v-model=\"modelValue\" :min-value=\"minDate\" :max-value=\"maxDate\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarMinMaxDatesExample.vue",
    "pascalName": "CalendarMinMaxDatesExample"
  },
  "CalendarOtherSystemExample": {
    "code": "<script lang=\"ts\" setup>\r\nimport { CalendarDate, HebrewCalendar } from '@internationalized/date'\r\n\r\nconst hebrewDate = shallowRef(new CalendarDate(new HebrewCalendar(), 5781, 1, 1))\r\n</script>\r\n\r\n<template>\r\n  <UCalendar v-model=\"hebrewDate\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarOtherSystemExample.vue",
    "pascalName": "CalendarOtherSystemExample"
  },
  "CalendarUnavailableDatesExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DateValue } from '@internationalized/date'\r\nimport { CalendarDate } from '@internationalized/date'\r\n\r\nconst modelValue = shallowRef({\r\n  start: new CalendarDate(2022, 1, 1),\r\n  end: new CalendarDate(2022, 1, 9)\r\n})\r\n\r\nconst isDateUnavailable = (date: DateValue) => {\r\n  return date.day >= 10 && date.day <= 16\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UCalendar v-model=\"modelValue\" :is-date-unavailable=\"isDateUnavailable\" range />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/calendar/CalendarUnavailableDatesExample.vue",
    "pascalName": "CalendarUnavailableDatesExample"
  },
  "CardExample": {
    "code": "<template>\r\n  <UCard>\r\n    <template #header>\r\n      <Placeholder class=\"h-8\" />\r\n    </template>\r\n\r\n    <Placeholder class=\"h-32\" />\r\n\r\n    <template #footer>\r\n      <Placeholder class=\"h-8\" />\r\n    </template>\r\n  </UCard>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/card/CardExample.vue",
    "pascalName": "CardExample"
  },
  "CarouselArrowsExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel v-slot=\"{ item }\" arrows :items=\"items\" class=\"w-full max-w-xs mx-auto\">\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselArrowsExample.vue",
    "pascalName": "CarouselArrowsExample"
  },
  "CarouselAutoHeightExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/320?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/320?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/320?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    auto-height\r\n    arrows\r\n    dots\r\n    :items=\"items\"\r\n    :ui=\"{\r\n      container: 'transition-[height]',\r\n      controls: 'absolute -top-8 inset-x-12',\r\n      dots: '-top-7',\r\n      dot: 'w-6 h-1'\r\n    }\"\r\n    class=\"w-full max-w-xs mx-auto\"\r\n  >\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselAutoHeightExample.vue",
    "pascalName": "CarouselAutoHeightExample"
  },
  "CarouselAutoScrollExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/468/468?random=1',\r\n  'https://picsum.photos/468/468?random=2',\r\n  'https://picsum.photos/468/468?random=3',\r\n  'https://picsum.photos/468/468?random=4',\r\n  'https://picsum.photos/468/468?random=5',\r\n  'https://picsum.photos/468/468?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    loop\r\n    dots\r\n    arrows\r\n    auto-scroll\r\n    :items=\"items\"\r\n    :ui=\"{ item: 'basis-1/3' }\"\r\n  >\r\n    <img :src=\"item\" width=\"234\" height=\"234\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselAutoScrollExample.vue",
    "pascalName": "CarouselAutoScrollExample"
  },
  "CarouselAutoplayExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/468/468?random=1',\r\n  'https://picsum.photos/468/468?random=2',\r\n  'https://picsum.photos/468/468?random=3',\r\n  'https://picsum.photos/468/468?random=4',\r\n  'https://picsum.photos/468/468?random=5',\r\n  'https://picsum.photos/468/468?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    loop\r\n    arrows\r\n    dots\r\n    :autoplay=\"{ delay: 2000 }\"\r\n    :items=\"items\"\r\n    :ui=\"{ item: 'basis-1/3' }\"\r\n  >\r\n    <img :src=\"item\" width=\"234\" height=\"234\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselAutoplayExample.vue",
    "pascalName": "CarouselAutoplayExample"
  },
  "CarouselClassNamesExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/528/528?random=1',\r\n  'https://picsum.photos/528/528?random=2',\r\n  'https://picsum.photos/528/528?random=3',\r\n  'https://picsum.photos/528/528?random=4',\r\n  'https://picsum.photos/528/528?random=5',\r\n  'https://picsum.photos/528/528?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    class-names\r\n    arrows\r\n    :items=\"items\"\r\n    :ui=\"{\r\n      item: 'basis-[70%] transition-opacity [&:not(.is-snapped)]:opacity-10'\r\n    }\"\r\n    class=\"mx-auto max-w-sm\"\r\n  >\r\n    <img :src=\"item\" width=\"264\" height=\"264\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselClassNamesExample.vue",
    "pascalName": "CarouselClassNamesExample"
  },
  "CarouselDotsExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel v-slot=\"{ item }\" dots :items=\"items\" class=\"w-full max-w-xs mx-auto\">\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselDotsExample.vue",
    "pascalName": "CarouselDotsExample"
  },
  "CarouselDotsMultipleExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel v-slot=\"{ item }\" dots :items=\"items\" :ui=\"{ item: 'basis-1/3' }\">\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselDotsMultipleExample.vue",
    "pascalName": "CarouselDotsMultipleExample"
  },
  "CarouselFadeExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    fade\r\n    arrows\r\n    dots\r\n    :items=\"items\"\r\n    class=\"w-full max-w-xs mx-auto\"\r\n  >\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselFadeExample.vue",
    "pascalName": "CarouselFadeExample"
  },
  "CarouselItemsExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel v-slot=\"{ item }\" :items=\"items\" class=\"w-full max-w-xs mx-auto\">\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselItemsExample.vue",
    "pascalName": "CarouselItemsExample"
  },
  "CarouselItemsMultipleExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/468/468?random=1',\r\n  'https://picsum.photos/468/468?random=2',\r\n  'https://picsum.photos/468/468?random=3',\r\n  'https://picsum.photos/468/468?random=4',\r\n  'https://picsum.photos/468/468?random=5',\r\n  'https://picsum.photos/468/468?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel v-slot=\"{ item }\" :items=\"items\" :ui=\"{ item: 'basis-1/3' }\">\r\n    <img :src=\"item\" width=\"234\" height=\"234\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselItemsMultipleExample.vue",
    "pascalName": "CarouselItemsMultipleExample"
  },
  "CarouselOrientationExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    orientation=\"vertical\"\r\n    :items=\"items\"\r\n    :ui=\"{ container: 'h-[336px]' }\"\r\n    class=\"w-full max-w-xs mx-auto\"\r\n  >\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselOrientationExample.vue",
    "pascalName": "CarouselOrientationExample"
  },
  "CarouselPrevNextExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    arrows\r\n    :prev=\"{ color: 'primary' }\"\r\n    :next=\"{ variant: 'solid' }\"\r\n    :items=\"items\"\r\n    class=\"w-full max-w-xs mx-auto\"\r\n  >\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselPrevNextExample.vue",
    "pascalName": "CarouselPrevNextExample"
  },
  "CarouselPrevNextIconExample": {
    "code": "<script setup lang=\"ts\">\r\ndefineProps<{\r\n  prevIcon?: string\r\n  nextIcon?: string\r\n}>()\r\n\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    arrows\r\n    :prev-icon=\"prevIcon\"\r\n    :next-icon=\"nextIcon\"\r\n    :items=\"items\"\r\n    class=\"w-full max-w-xs mx-auto\"\r\n  >\r\n    <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselPrevNextIconExample.vue",
    "pascalName": "CarouselPrevNextIconExample"
  },
  "CarouselThumbnailsExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/640/640?random=1',\r\n  'https://picsum.photos/640/640?random=2',\r\n  'https://picsum.photos/640/640?random=3',\r\n  'https://picsum.photos/640/640?random=4',\r\n  'https://picsum.photos/640/640?random=5',\r\n  'https://picsum.photos/640/640?random=6'\r\n]\r\n\r\nconst carousel = useTemplateRef('carousel')\r\nconst activeIndex = ref(0)\r\n\r\nfunction onClickPrev() {\r\n  activeIndex.value--\r\n}\r\nfunction onClickNext() {\r\n  activeIndex.value++\r\n}\r\nfunction onSelect(index: number) {\r\n  activeIndex.value = index\r\n}\r\n\r\nfunction select(index: number) {\r\n  activeIndex.value = index\r\n\r\n  carousel.value?.emblaApi?.scrollTo(index)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex-1 w-full\">\r\n    <UCarousel\r\n      ref=\"carousel\"\r\n      v-slot=\"{ item }\"\r\n      arrows\r\n      :items=\"items\"\r\n      :prev=\"{ onClick: onClickPrev }\"\r\n      :next=\"{ onClick: onClickNext }\"\r\n      class=\"w-full max-w-xs mx-auto\"\r\n      @select=\"onSelect\"\r\n    >\r\n      <img :src=\"item\" width=\"320\" height=\"320\" class=\"rounded-lg\">\r\n    </UCarousel>\r\n\r\n    <div class=\"flex gap-1 justify-between pt-4 max-w-xs mx-auto\">\r\n      <div\r\n        v-for=\"(item, index) in items\"\r\n        :key=\"index\"\r\n        class=\"size-11 opacity-25 hover:opacity-100 transition-opacity\"\r\n        :class=\"{ 'opacity-100': activeIndex === index }\"\r\n        @click=\"select(index)\"\r\n      >\r\n        <img :src=\"item\" width=\"44\" height=\"44\" class=\"rounded-lg\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselThumbnailsExample.vue",
    "pascalName": "CarouselThumbnailsExample"
  },
  "CarouselWheelGesturesExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  'https://picsum.photos/468/468?random=1',\r\n  'https://picsum.photos/468/468?random=2',\r\n  'https://picsum.photos/468/468?random=3',\r\n  'https://picsum.photos/468/468?random=4',\r\n  'https://picsum.photos/468/468?random=5',\r\n  'https://picsum.photos/468/468?random=6'\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCarousel\r\n    v-slot=\"{ item }\"\r\n    loop\r\n    wheel-gestures\r\n    :items=\"items\"\r\n    :ui=\"{ item: 'basis-1/3' }\"\r\n  >\r\n    <img :src=\"item\" width=\"234\" height=\"234\" class=\"rounded-lg\">\r\n  </UCarousel>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/carousel/CarouselWheelGesturesExample.vue",
    "pascalName": "CarouselWheelGesturesExample"
  },
  "ChipShowExample": {
    "code": "<script setup lang=\"ts\">\r\nconst statuses = ['online', 'away', 'busy', 'offline']\r\nconst status = ref(statuses[0])\r\n\r\nconst color = computed(() => status.value ? { online: 'success', away: 'warning', busy: 'error', offline: 'neutral' }[status.value] as any : 'online')\r\n\r\nconst show = computed(() => status.value !== 'offline')\r\n\r\n// Note: This is for demonstration purposes only. Don't do this at home.\r\nonMounted(() => {\r\n  setInterval(() => {\r\n    if (status.value) {\r\n      status.value = statuses[(statuses.indexOf(status.value) + 1) % statuses.length]\r\n    }\r\n  }, 1000)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UChip :color=\"color\" :show=\"show\" inset>\r\n    <UAvatar src=\"https://github.com/benjamincanac.png\" />\r\n  </UChip>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/chip/ChipShowExample.vue",
    "pascalName": "ChipShowExample"
  },
  "CollapsibleIconExample": {
    "code": "<template>\r\n  <UCollapsible class=\"flex flex-col gap-2 w-48\">\r\n    <UButton\r\n      class=\"group\"\r\n      label=\"Open\"\r\n      color=\"neutral\"\r\n      variant=\"subtle\"\r\n      trailing-icon=\"i-lucide-chevron-down\"\r\n      :ui=\"{\r\n        trailingIcon: 'group-data-[state=open]:rotate-180 transition-transform duration-200'\r\n      }\"\r\n      block\r\n    />\r\n\r\n    <template #content>\r\n      <Placeholder class=\"h-48\" />\r\n    </template>\r\n  </UCollapsible>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/collapsible/CollapsibleIconExample.vue",
    "pascalName": "CollapsibleIconExample"
  },
  "CollapsibleOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(true)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UCollapsible v-model:open=\"open\" class=\"flex flex-col gap-2 w-48\">\r\n    <UButton\r\n      label=\"Open\"\r\n      color=\"neutral\"\r\n      variant=\"subtle\"\r\n      trailing-icon=\"i-lucide-chevron-down\"\r\n      block\r\n    />\r\n\r\n    <template #content>\r\n      <Placeholder class=\"h-48\" />\r\n    </template>\r\n  </UCollapsible>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/collapsible/CollapsibleOpenExample.vue",
    "pascalName": "CollapsibleOpenExample"
  },
  "ColorPickerChooserExample": {
    "code": "<script setup lang=\"ts\">\r\nconst color = ref('#00C16A')\r\n\r\nconst chip = computed(() => ({ backgroundColor: color.value }))\r\n</script>\r\n\r\n<template>\r\n  <UPopover>\r\n    <UButton label=\"Choose color\" color=\"neutral\" variant=\"outline\">\r\n      <template #leading>\r\n        <span :style=\"chip\" class=\"size-3 rounded-full\" />\r\n      </template>\r\n    </UButton>\r\n\r\n    <template #content>\r\n      <UColorPicker v-model=\"color\" class=\"p-2\" />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/color-picker/ColorPickerChooserExample.vue",
    "pascalName": "ColorPickerChooserExample"
  },
  "CommandPaletteCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst groups = [\r\n  {\r\n    id: 'settings',\r\n    items: [\r\n      {\r\n        label: 'Profile',\r\n        icon: 'i-lucide-user',\r\n        kbds: ['meta', 'P']\r\n      },\r\n      {\r\n        label: 'Billing',\r\n        icon: 'i-lucide-credit-card',\r\n        kbds: ['meta', 'B'],\r\n        slot: 'billing' as const\r\n      },\r\n      {\r\n        label: 'Notifications',\r\n        icon: 'i-lucide-bell'\r\n      },\r\n      {\r\n        label: 'Security',\r\n        icon: 'i-lucide-lock'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'users',\r\n    label: 'Users',\r\n    slot: 'users' as const,\r\n    items: [\r\n      {\r\n        label: 'Benjamin Canac',\r\n        suffix: 'benjamincanac',\r\n        to: 'https://github.com/benjamincanac',\r\n        target: '_blank'\r\n      },\r\n      {\r\n        label: 'Sylvain Marroufin',\r\n        suffix: 'smarroufin',\r\n        to: 'https://github.com/smarroufin',\r\n        target: '_blank'\r\n      },\r\n      {\r\n        label: 'Sébastien Chopin',\r\n        suffix: 'atinux',\r\n        to: 'https://github.com/atinux',\r\n        target: '_blank'\r\n      },\r\n      {\r\n        label: 'Romain Hamel',\r\n        suffix: 'romhml',\r\n        to: 'https://github.com/romhml',\r\n        target: '_blank'\r\n      },\r\n      {\r\n        label: 'Haytham A. Salama',\r\n        suffix: 'Haythamasalama',\r\n        to: 'https://github.com/Haythamasalama',\r\n        target: '_blank'\r\n      },\r\n      {\r\n        label: 'Daniel Roe',\r\n        suffix: 'danielroe',\r\n        to: 'https://github.com/danielroe',\r\n        target: '_blank'\r\n      },\r\n      {\r\n        label: 'Neil Richter',\r\n        suffix: 'noook',\r\n        to: 'https://github.com/noook',\r\n        target: '_blank'\r\n      }\r\n    ]\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette :groups=\"groups\" class=\"flex-1 h-80\">\r\n    <template #users-leading=\"{ item }\">\r\n      <UAvatar :src=\"`https://github.com/${item.suffix}.png`\" size=\"2xs\" />\r\n    </template>\r\n\r\n    <template #billing-label=\"{ item }\">\r\n      <span class=\"font-medium text-primary\">{{ item.label }}</span>\r\n\r\n      <UBadge variant=\"subtle\" size=\"sm\">\r\n        50% off\r\n      </UBadge>\r\n    </template>\r\n  </UCommandPalette>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteCustomSlotExample.vue",
    "pascalName": "CommandPaletteCustomSlotExample"
  },
  "CommandPaletteFetchExample": {
    "code": "<script setup lang=\"ts\">\r\nconst searchTerm = ref('')\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'command-palette-users',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({ id: user.id, label: user.name, suffix: user.email, avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` } })) || []\r\n  },\r\n  lazy: true\r\n})\r\n\r\nconst groups = computed(() => [{\r\n  id: 'users',\r\n  label: searchTerm.value ? `Users matching “${searchTerm.value}”...` : 'Users',\r\n  items: users.value || []\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette\r\n    v-model:search-term=\"searchTerm\"\r\n    :loading=\"status === 'pending'\"\r\n    :groups=\"groups\"\r\n    class=\"flex-1 h-80\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteFetchExample.vue",
    "pascalName": "CommandPaletteFetchExample"
  },
  "CommandPaletteFooterSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst groups = [\r\n  {\r\n    id: 'actions',\r\n    items: [\r\n      {\r\n        label: 'Add new file',\r\n        suffix: 'Create a new file in the current directory',\r\n        icon: 'i-lucide-file-plus',\r\n        kbds: ['meta', 'N']\r\n      },\r\n      {\r\n        label: 'Add new folder',\r\n        suffix: 'Create a new folder in the current directory',\r\n        icon: 'i-lucide-folder-plus',\r\n        kbds: ['meta', 'F']\r\n      },\r\n      {\r\n        label: 'Search files',\r\n        suffix: 'Search across all files in the project',\r\n        icon: 'i-lucide-search',\r\n        kbds: ['meta', 'P']\r\n      },\r\n      {\r\n        label: 'Settings',\r\n        suffix: 'Open application settings',\r\n        icon: 'i-lucide-settings',\r\n        kbds: ['meta', ',']\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'recent',\r\n    label: 'Recent',\r\n    items: [\r\n      {\r\n        label: 'project.vue',\r\n        suffix: 'components/',\r\n        icon: 'i-vscode-icons-file-type-vue'\r\n      },\r\n      {\r\n        label: 'readme.md',\r\n        suffix: 'docs/',\r\n        icon: 'i-vscode-icons-file-type-markdown'\r\n      },\r\n      {\r\n        label: 'package.json',\r\n        suffix: 'root/',\r\n        icon: 'i-vscode-icons-file-type-node'\r\n      }\r\n    ]\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette :groups=\"groups\" class=\"flex-1 h-80\">\r\n    <template #footer>\r\n      <div class=\"flex items-center justify-between gap-2\">\r\n        <UIcon name=\"i-simple-icons-nuxtdotjs\" class=\"size-5 text-dimmed ml-1\" />\r\n        <div class=\"flex items-center gap-1\">\r\n          <UButton color=\"neutral\" variant=\"ghost\" label=\"Open Command\" class=\"text-dimmed\" size=\"xs\">\r\n            <template #trailing>\r\n              <UKbd value=\"enter\" />\r\n            </template>\r\n          </UButton>\r\n          <USeparator orientation=\"vertical\" class=\"h-4\" />\r\n          <UButton color=\"neutral\" variant=\"ghost\" label=\"Actions\" class=\"text-dimmed\" size=\"xs\">\r\n            <template #trailing>\r\n              <UKbd value=\"meta\" />\r\n              <UKbd value=\"k\" />\r\n            </template>\r\n          </UButton>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </UCommandPalette>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteFooterSlotExample.vue",
    "pascalName": "CommandPaletteFooterSlotExample"
  },
  "CommandPaletteFuseExample": {
    "code": "<script setup lang=\"ts\">\r\nconst { data: users } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'command-palette-users',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({ id: user.id, label: user.name, suffix: user.email, avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` } })) || []\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette\r\n    :groups=\"[{ id: 'users', items: users || [] }]\"\r\n    :fuse=\"{ fuseOptions: { includeMatches: true } }\"\r\n    class=\"flex-1 h-80\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteFuseExample.vue",
    "pascalName": "CommandPaletteFuseExample"
  },
  "CommandPaletteIgnoreFilterExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { refDebounced } from '@vueuse/core'\r\n\r\nconst searchTerm = ref('')\r\nconst searchTermDebounced = refDebounced(searchTerm, 200)\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  params: { q: searchTermDebounced },\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({ id: user.id, label: user.name, suffix: user.email, avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` } })) || []\r\n  },\r\n  lazy: true\r\n})\r\n\r\nconst groups = computed(() => [{\r\n  id: 'users',\r\n  label: searchTerm.value ? `Users matching “${searchTerm.value}”...` : 'Users',\r\n  items: users.value || [],\r\n  ignoreFilter: true\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette\r\n    v-model:search-term=\"searchTerm\"\r\n    :loading=\"status === 'pending'\"\r\n    :groups=\"groups\"\r\n    class=\"flex-1 h-80\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteIgnoreFilterExample.vue",
    "pascalName": "CommandPaletteIgnoreFilterExample"
  },
  "CommandPaletteItemsChildrenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nconst groups = [{\r\n  id: 'actions',\r\n  label: 'Actions',\r\n  items: [{\r\n    label: 'Create new',\r\n    icon: 'i-lucide-plus',\r\n    children: [{\r\n      label: 'New file',\r\n      icon: 'i-lucide-file-plus',\r\n      suffix: 'Create a new file in the current directory',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'New file created!' })\r\n      },\r\n      kbds: ['meta', 'N']\r\n    }, {\r\n      label: 'New folder',\r\n      icon: 'i-lucide-folder-plus',\r\n      suffix: 'Create a new folder in the current directory',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'New folder created!' })\r\n      },\r\n      kbds: ['meta', 'F']\r\n    }, {\r\n      label: 'New project',\r\n      icon: 'i-lucide-folder-git',\r\n      suffix: 'Create a new project from a template',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'New project created!' })\r\n      },\r\n      kbds: ['meta', 'P']\r\n    }]\r\n  }, {\r\n    label: 'Share',\r\n    icon: 'i-lucide-share',\r\n    children: [{\r\n      label: 'Copy link',\r\n      icon: 'i-lucide-link',\r\n      suffix: 'Copy a link to the current item',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'Link copied to clipboard!' })\r\n      },\r\n      kbds: ['meta', 'L']\r\n    }, {\r\n      label: 'Share via email',\r\n      icon: 'i-lucide-mail',\r\n      suffix: 'Share the current item via email',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'Share via email dialog opened!' })\r\n      }\r\n    }, {\r\n      label: 'Share on social',\r\n      icon: 'i-lucide-share-2',\r\n      suffix: 'Share the current item on social media',\r\n      children: [{\r\n        label: 'Twitter',\r\n        icon: 'i-simple-icons-twitter',\r\n        onSelect(e: Event) {\r\n          e.preventDefault()\r\n          toast.add({ title: 'Shared on Twitter!' })\r\n        }\r\n      }, {\r\n        label: 'LinkedIn',\r\n        icon: 'i-simple-icons-linkedin',\r\n        onSelect(e: Event) {\r\n          e.preventDefault()\r\n          toast.add({ title: 'Shared on LinkedIn!' })\r\n        }\r\n      }, {\r\n        label: 'Facebook',\r\n        icon: 'i-simple-icons-facebook',\r\n        onSelect(e: Event) {\r\n          e.preventDefault()\r\n          toast.add({ title: 'Shared on Facebook!' })\r\n        }\r\n      }]\r\n    }]\r\n  }, {\r\n    label: 'Settings',\r\n    icon: 'i-lucide-settings',\r\n    children: [{\r\n      label: 'General',\r\n      icon: 'i-lucide-sliders',\r\n      suffix: 'Configure general settings',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'General settings opened!' })\r\n      }\r\n    }, {\r\n      label: 'Appearance',\r\n      icon: 'i-lucide-palette',\r\n      suffix: 'Customize the appearance',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'Appearance settings opened!' })\r\n      }\r\n    }, {\r\n      label: 'Security',\r\n      icon: 'i-lucide-shield',\r\n      suffix: 'Manage security settings',\r\n      onSelect(e: Event) {\r\n        e.preventDefault()\r\n        toast.add({ title: 'Security settings opened!' })\r\n      }\r\n    }]\r\n  }]\r\n}]\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette :groups=\"groups\" class=\"flex-1\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteItemsChildrenExample.vue",
    "pascalName": "CommandPaletteItemsChildrenExample"
  },
  "CommandPaletteOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n\r\nconst users = [\r\n  {\r\n    label: 'Benjamin Canac',\r\n    suffix: 'benjamincanac',\r\n    to: 'https://github.com/benjamincanac',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/benjamincanac.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Sylvain Marroufin',\r\n    suffix: 'smarroufin',\r\n    to: 'https://github.com/smarroufin',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/smarroufin.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Sébastien Chopin',\r\n    suffix: 'atinux',\r\n    to: 'https://github.com/atinux',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/atinux.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Romain Hamel',\r\n    suffix: 'romhml',\r\n    to: 'https://github.com/romhml',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/romhml.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Haytham A. Salama',\r\n    suffix: 'Haythamasalama',\r\n    to: 'https://github.com/Haythamasalama',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/Haythamasalama.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Daniel Roe',\r\n    suffix: 'danielroe',\r\n    to: 'https://github.com/danielroe',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/danielroe.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Neil Richter',\r\n    suffix: 'noook',\r\n    to: 'https://github.com/noook',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/noook.png'\r\n    }\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UModal v-model:open=\"open\">\r\n    <UButton\r\n      label=\"Search users...\"\r\n      color=\"neutral\"\r\n      variant=\"subtle\"\r\n      icon=\"i-lucide-search\"\r\n    />\r\n\r\n    <template #content>\r\n      <UCommandPalette close :groups=\"[{ id: 'users', items: users }]\" @update:open=\"open = $event\" />\r\n    </template>\r\n  </UModal>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteOpenExample.vue",
    "pascalName": "CommandPaletteOpenExample"
  },
  "CommandPalettePostFilterExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = [\r\n  {\r\n    id: '/',\r\n    label: 'Introduction',\r\n    level: 1\r\n  },\r\n  {\r\n    id: '/getting-started#whats-new-in-v3',\r\n    label: 'What\\'s new in v3?',\r\n    level: 2\r\n  },\r\n  {\r\n    id: '/getting-started#reka-ui',\r\n    label: 'Reka UI',\r\n    level: 3\r\n  },\r\n  {\r\n    id: '/getting-started#tailwind-css-v4',\r\n    label: 'Tailwind CSS v4',\r\n    level: 3\r\n  },\r\n  {\r\n    id: '/getting-started#tailwind-variants',\r\n    label: 'Tailwind Variants',\r\n    level: 3\r\n  },\r\n  {\r\n    id: '/getting-started/installation',\r\n    label: 'Installation',\r\n    level: 1\r\n  }\r\n]\r\n\r\nfunction postFilter(searchTerm: string, items: any[]) {\r\n  // Filter only first level items if no searchTerm\r\n  if (!searchTerm) {\r\n    return items?.filter(item => item.level === 1)\r\n  }\r\n\r\n  return items\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette :groups=\"[{ id: 'files', items, postFilter }]\" class=\"flex-1\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPalettePostFilterExample.vue",
    "pascalName": "CommandPalettePostFilterExample"
  },
  "CommandPaletteSearchTermExample": {
    "code": "<script setup lang=\"ts\">\r\nconst users = [\r\n  {\r\n    label: 'Benjamin Canac',\r\n    suffix: 'benjamincanac',\r\n    to: 'https://github.com/benjamincanac',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/benjamincanac.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Sylvain Marroufin',\r\n    suffix: 'smarroufin',\r\n    to: 'https://github.com/smarroufin',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/smarroufin.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Sébastien Chopin',\r\n    suffix: 'atinux',\r\n    to: 'https://github.com/atinux',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/atinux.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Romain Hamel',\r\n    suffix: 'romhml',\r\n    to: 'https://github.com/romhml',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/romhml.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Haytham A. Salama',\r\n    suffix: 'Haythamasalama',\r\n    to: 'https://github.com/Haythamasalama',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/Haythamasalama.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Daniel Roe',\r\n    suffix: 'danielroe',\r\n    to: 'https://github.com/danielroe',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/danielroe.png'\r\n    }\r\n  },\r\n  {\r\n    label: 'Neil Richter',\r\n    suffix: 'noook',\r\n    to: 'https://github.com/noook',\r\n    target: '_blank',\r\n    avatar: {\r\n      src: 'https://github.com/noook.png'\r\n    }\r\n  }\r\n]\r\n\r\nconst searchTerm = ref('B')\r\n\r\nfunction onSelect() {\r\n  searchTerm.value = ''\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette\r\n    v-model:search-term=\"searchTerm\"\r\n    :groups=\"[{ id: 'users', items: users }]\"\r\n    class=\"flex-1\"\r\n    @update:model-value=\"onSelect\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteSearchTermExample.vue",
    "pascalName": "CommandPaletteSearchTermExample"
  },
  "CommandPaletteSelectExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nconst groups = ref([\r\n  {\r\n    id: 'users',\r\n    label: 'Users',\r\n    items: [\r\n      {\r\n        label: 'Benjamin Canac',\r\n        suffix: 'benjamincanac',\r\n        to: 'https://github.com/benjamincanac',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/benjamincanac.png'\r\n        }\r\n      },\r\n      {\r\n        label: 'Sylvain Marroufin',\r\n        suffix: 'smarroufin',\r\n        to: 'https://github.com/smarroufin',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/smarroufin.png'\r\n        }\r\n      },\r\n      {\r\n        label: 'Sébastien Chopin',\r\n        suffix: 'atinux',\r\n        to: 'https://github.com/atinux',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/atinux.png'\r\n        }\r\n      },\r\n      {\r\n        label: 'Romain Hamel',\r\n        suffix: 'romhml',\r\n        to: 'https://github.com/romhml',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/romhml.png'\r\n        }\r\n      },\r\n      {\r\n        label: 'Haytham A. Salama',\r\n        suffix: 'Haythamasalama',\r\n        to: 'https://github.com/Haythamasalama',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/Haythamasalama.png'\r\n        }\r\n      },\r\n      {\r\n        label: 'Daniel Roe',\r\n        suffix: 'danielroe',\r\n        to: 'https://github.com/danielroe',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/danielroe.png'\r\n        }\r\n      },\r\n      {\r\n        label: 'Neil Richter',\r\n        suffix: 'noook',\r\n        to: 'https://github.com/noook',\r\n        target: '_blank',\r\n        avatar: {\r\n          src: 'https://github.com/noook.png'\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: 'actions',\r\n    items: [\r\n      {\r\n        label: 'Add new file',\r\n        suffix: 'Create a new file in the current directory or workspace.',\r\n        icon: 'i-lucide-file-plus',\r\n        kbds: [\r\n          'meta',\r\n          'N'\r\n        ],\r\n        onSelect() {\r\n          toast.add({ title: 'Add new file' })\r\n        }\r\n      },\r\n      {\r\n        label: 'Add new folder',\r\n        suffix: 'Create a new folder in the current directory or workspace.',\r\n        icon: 'i-lucide-folder-plus',\r\n        kbds: [\r\n          'meta',\r\n          'F'\r\n        ],\r\n        onSelect() {\r\n          toast.add({ title: 'Add new folder' })\r\n        }\r\n      },\r\n      {\r\n        label: 'Add hashtag',\r\n        suffix: 'Add a hashtag to the current item.',\r\n        icon: 'i-lucide-hash',\r\n        kbds: [\r\n          'meta',\r\n          'H'\r\n        ],\r\n        onSelect() {\r\n          toast.add({ title: 'Add hashtag' })\r\n        }\r\n      },\r\n      {\r\n        label: 'Add label',\r\n        suffix: 'Add a label to the current item.',\r\n        icon: 'i-lucide-tag',\r\n        kbds: [\r\n          'meta',\r\n          'L'\r\n        ],\r\n        onSelect() {\r\n          toast.add({ title: 'Add label' })\r\n        }\r\n      }\r\n    ]\r\n  }\r\n])\r\n\r\nfunction onSelect(item: any) {\r\n  console.log(item)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UCommandPalette\r\n    :children=\"groups\"\r\n    class=\"flex-1 h-80\"\r\n    @update:model-value=\"onSelect\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/command-palette/CommandPaletteSelectExample.vue",
    "pascalName": "CommandPaletteSelectExample"
  },
  "ContainerExample": {
    "code": "<template>\r\n  <UContainer>\r\n    <Placeholder class=\"h-32\" />\r\n  </UContainer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/container/ContainerExample.vue",
    "pascalName": "ContainerExample"
  },
  "ContextMenuCheckboxItemsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { ContextMenuItem } from '@nuxt/ui'\r\n\r\nconst showSidebar = ref(true)\r\nconst showToolbar = ref(false)\r\n\r\nconst items = computed<ContextMenuItem[]>(() => [{\r\n  label: 'View',\r\n  type: 'label' as const\r\n}, {\r\n  type: 'separator' as const\r\n}, {\r\n  label: 'Show Sidebar',\r\n  type: 'checkbox' as const,\r\n  checked: showSidebar.value,\r\n  onUpdateChecked(checked: boolean) {\r\n    showSidebar.value = checked\r\n  },\r\n  onSelect(e: Event) {\r\n    e.preventDefault()\r\n  }\r\n}, {\r\n  label: 'Show Toolbar',\r\n  type: 'checkbox' as const,\r\n  checked: showToolbar.value,\r\n  onUpdateChecked(checked: boolean) {\r\n    showToolbar.value = checked\r\n  }\r\n}, {\r\n  label: 'Collapse Pinned Tabs',\r\n  type: 'checkbox' as const,\r\n  disabled: true\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UContextMenu :items=\"items\" :ui=\"{ content: 'w-48' }\">\r\n    <div class=\"flex items-center justify-center rounded-md border border-dashed border-accented text-sm aspect-video w-72\">\r\n      Right click here\r\n    </div>\r\n  </UContextMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/context-menu/ContextMenuCheckboxItemsExample.vue",
    "pascalName": "ContextMenuCheckboxItemsExample"
  },
  "ContextMenuColorItemsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { ContextMenuItem } from '@nuxt/ui'\r\n\r\nconst items: ContextMenuItem[][] = [\r\n  [\r\n    {\r\n      label: 'View',\r\n      icon: 'i-lucide-eye'\r\n    },\r\n    {\r\n      label: 'Copy',\r\n      icon: 'i-lucide-copy'\r\n    },\r\n    {\r\n      label: 'Edit',\r\n      icon: 'i-lucide-pencil'\r\n    }\r\n  ],\r\n  [\r\n    {\r\n      label: 'Delete',\r\n      color: 'error' as const,\r\n      icon: 'i-lucide-trash'\r\n    }\r\n  ]\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UContextMenu :items=\"items\" :ui=\"{ content: 'w-48' }\">\r\n    <div class=\"flex items-center justify-center rounded-md border border-dashed border-accented text-sm aspect-video w-72\">\r\n      Right click here\r\n    </div>\r\n  </UContextMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/context-menu/ContextMenuColorItemsExample.vue",
    "pascalName": "ContextMenuColorItemsExample"
  },
  "ContextMenuCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { ContextMenuItem } from '@nuxt/ui'\r\n\r\nconst loading = ref(true)\r\n\r\nconst items = [\r\n  {\r\n    label: 'Refresh the Page',\r\n    slot: 'refresh' as const\r\n  },\r\n  {\r\n    label: 'Clear Cookies and Refresh'\r\n  },\r\n  {\r\n    label: 'Clear Cache and Refresh'\r\n  }\r\n] satisfies ContextMenuItem[]\r\n</script>\r\n\r\n<template>\r\n  <UContextMenu :items=\"items\" :ui=\"{ content: 'w-48' }\">\r\n    <div class=\"flex items-center justify-center rounded-md border border-dashed border-accented text-sm aspect-video w-72\">\r\n      Right click here\r\n    </div>\r\n\r\n    <template #refresh-label>\r\n      {{ loading ? 'Refreshing...' : 'Refresh the Page' }}\r\n    </template>\r\n\r\n    <template #refresh-trailing>\r\n      <UIcon v-if=\"loading\" name=\"i-lucide-loader-circle\" class=\"shrink-0 size-5 text-primary animate-spin\" />\r\n    </template>\r\n  </UContextMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/context-menu/ContextMenuCustomSlotExample.vue",
    "pascalName": "ContextMenuCustomSlotExample"
  },
  "DrawerCommandPaletteExample": {
    "code": "<script setup lang=\"ts\">\r\nconst searchTerm = ref('')\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'command-palette-users',\r\n  params: { q: searchTerm },\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({ id: user.id, label: user.name, suffix: user.email, avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` } })) || []\r\n  },\r\n  lazy: true\r\n})\r\n\r\nconst groups = computed(() => [{\r\n  id: 'users',\r\n  label: searchTerm.value ? `Users matching “${searchTerm.value}”...` : 'Users',\r\n  items: users.value || [],\r\n  ignoreFilter: true\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UDrawer :handle=\"false\">\r\n    <UButton\r\n      label=\"Search users...\"\r\n      color=\"neutral\"\r\n      variant=\"subtle\"\r\n      icon=\"i-lucide-search\"\r\n    />\r\n\r\n    <template #content>\r\n      <UCommandPalette\r\n        v-model:search-term=\"searchTerm\"\r\n        :loading=\"status === 'pending'\"\r\n        :groups=\"groups\"\r\n        placeholder=\"Search users...\"\r\n        class=\"h-80\"\r\n      />\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerCommandPaletteExample.vue",
    "pascalName": "DrawerCommandPaletteExample"
  },
  "DrawerDismissibleExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UDrawer v-model:open=\"open\" :dismissible=\"false\" :handle=\"false\" :ui=\"{ header: 'flex items-center justify-between' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-up\" />\r\n\r\n    <template #header>\r\n      <h2 class=\"text-highlighted font-semibold\">\r\n        Drawer non-dismissible\r\n      </h2>\r\n\r\n      <UButton color=\"neutral\" variant=\"ghost\" icon=\"i-lucide-x\" @click=\"open = false\" />\r\n    </template>\r\n\r\n    <template #body>\r\n      <Placeholder class=\"h-48\" />\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerDismissibleExample.vue",
    "pascalName": "DrawerDismissibleExample"
  },
  "DrawerFooterSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UDrawer v-model:open=\"open\" title=\"Drawer with footer\" description=\"This is useful when you want a form in a Drawer.\" :ui=\"{ container: 'max-w-xl mx-auto' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-up\" />\r\n\r\n    <template #body>\r\n      <Placeholder class=\"h-48\" />\r\n    </template>\r\n\r\n    <template #footer>\r\n      <UButton label=\"Submit\" color=\"neutral\" class=\"justify-center\" />\r\n      <UButton label=\"Cancel\" color=\"neutral\" variant=\"outline\" class=\"justify-center\" @click=\"open = false\" />\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerFooterSlotExample.vue",
    "pascalName": "DrawerFooterSlotExample"
  },
  "DrawerModalExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UDrawer\r\n    v-model:open=\"open\"\r\n    :dismissible=\"false\"\r\n    :overlay=\"false\"\r\n    :handle=\"false\"\r\n    :modal=\"false\"\r\n    :ui=\"{ header: 'flex items-center justify-between' }\"\r\n  >\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-up\" />\r\n\r\n    <template #header>\r\n      <h2 class=\"text-highlighted font-semibold\">\r\n        Drawer non-dismissible\r\n      </h2>\r\n\r\n      <UButton color=\"neutral\" variant=\"ghost\" icon=\"i-lucide-x\" @click=\"open = false\" />\r\n    </template>\r\n\r\n    <template #body>\r\n      <Placeholder class=\"h-48\" />\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerModalExample.vue",
    "pascalName": "DrawerModalExample"
  },
  "DrawerNestedExample": {
    "code": "<template>\r\n  <UDrawer :ui=\"{ content: 'h-full', overlay: 'bg-inverted/30' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-up\" />\r\n\r\n    <template #footer>\r\n      <UDrawer nested :ui=\"{ content: 'h-full', overlay: 'bg-inverted/30' }\">\r\n        <UButton color=\"neutral\" variant=\"outline\" label=\"Open nested\" />\r\n\r\n        <template #content>\r\n          <Placeholder class=\"flex-1 m-4\" />\r\n        </template>\r\n      </UDrawer>\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerNestedExample.vue",
    "pascalName": "DrawerNestedExample"
  },
  "DrawerOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UDrawer v-model:open=\"open\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" trailing-icon=\"i-lucide-chevron-up\" />\r\n\r\n    <template #content>\r\n      <Placeholder class=\"h-48 m-4\" />\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerOpenExample.vue",
    "pascalName": "DrawerOpenExample"
  },
  "DrawerResponsiveExample": {
    "code": "<script lang=\"ts\" setup>\r\nimport { createReusableTemplate, useMediaQuery } from '@vueuse/core'\r\n\r\nconst [DefineFormTemplate, ReuseFormTemplate] = createReusableTemplate()\r\nconst isDesktop = useMediaQuery('(min-width: 768px)')\r\n\r\nconst open = ref(false)\r\n\r\nconst state = reactive({\r\n  email: undefined\r\n})\r\n\r\nconst title = 'Edit profile'\r\nconst description = 'Make changes to your profile here. Click save when you\\'re done.'\r\n</script>\r\n\r\n<template>\r\n  <DefineFormTemplate>\r\n    <UForm :state=\"state\" class=\"space-y-4\">\r\n      <UFormField label=\"Email\" name=\"email\" required>\r\n        <UInput v-model=\"state.email\" placeholder=\"shadcn@example.com\" required />\r\n      </UFormField>\r\n\r\n      <UButton label=\"Save changes\" type=\"submit\" />\r\n    </UForm>\r\n  </DefineFormTemplate>\r\n\r\n  <UModal v-if=\"isDesktop\" v-model:open=\"open\" :title=\"title\" :description=\"description\">\r\n    <UButton label=\"Edit profile\" color=\"neutral\" variant=\"outline\" />\r\n\r\n    <template #body>\r\n      <ReuseFormTemplate />\r\n    </template>\r\n  </UModal>\r\n\r\n  <UDrawer v-else v-model:open=\"open\" :title=\"title\" :description=\"description\">\r\n    <UButton label=\"Edit profile\" color=\"neutral\" variant=\"outline\" />\r\n\r\n    <template #body>\r\n      <ReuseFormTemplate />\r\n    </template>\r\n  </UDrawer>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/drawer/DrawerResponsiveExample.vue",
    "pascalName": "DrawerResponsiveExample"
  },
  "DropdownMenuCheckboxItemsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DropdownMenuItem } from '@nuxt/ui'\r\n\r\nconst showBookmarks = ref(true)\r\nconst showHistory = ref(false)\r\nconst showDownloads = ref(false)\r\n\r\nconst items = computed(() => [{\r\n  label: 'Interface',\r\n  icon: 'i-lucide-app-window',\r\n  type: 'label' as const\r\n}, {\r\n  type: 'separator' as const\r\n}, {\r\n  label: 'Show Bookmarks',\r\n  icon: 'i-lucide-bookmark',\r\n  type: 'checkbox' as const,\r\n  checked: showBookmarks.value,\r\n  onUpdateChecked(checked: boolean) {\r\n    showBookmarks.value = checked\r\n  },\r\n  onSelect(e: Event) {\r\n    e.preventDefault()\r\n  }\r\n}, {\r\n  label: 'Show History',\r\n  icon: 'i-lucide-clock',\r\n  type: 'checkbox' as const,\r\n  checked: showHistory.value,\r\n  onUpdateChecked(checked: boolean) {\r\n    showHistory.value = checked\r\n  }\r\n}, {\r\n  label: 'Show Downloads',\r\n  icon: 'i-lucide-download',\r\n  type: 'checkbox' as const,\r\n  checked: showDownloads.value,\r\n  onUpdateChecked(checked: boolean) {\r\n    showDownloads.value = checked\r\n  }\r\n}] satisfies DropdownMenuItem[])\r\n</script>\r\n\r\n<template>\r\n  <UDropdownMenu :items=\"items\" :content=\"{ align: 'start' }\" :ui=\"{ content: 'w-48' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"outline\" icon=\"i-lucide-menu\" />\r\n  </UDropdownMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/dropdown-menu/DropdownMenuCheckboxItemsExample.vue",
    "pascalName": "DropdownMenuCheckboxItemsExample"
  },
  "DropdownMenuColorItemsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DropdownMenuItem } from '@nuxt/ui'\r\n\r\nconst items: DropdownMenuItem[][] = [\r\n  [\r\n    {\r\n      label: 'View',\r\n      icon: 'i-lucide-eye'\r\n    },\r\n    {\r\n      label: 'Copy',\r\n      icon: 'i-lucide-copy'\r\n    },\r\n    {\r\n      label: 'Edit',\r\n      icon: 'i-lucide-pencil'\r\n    }\r\n  ],\r\n  [\r\n    {\r\n      label: 'Delete',\r\n      color: 'error',\r\n      icon: 'i-lucide-trash'\r\n    }\r\n  ]\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UDropdownMenu :items=\"items\" :ui=\"{ content: 'w-48' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"outline\" icon=\"i-lucide-menu\" />\r\n  </UDropdownMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/dropdown-menu/DropdownMenuColorItemsExample.vue",
    "pascalName": "DropdownMenuColorItemsExample"
  },
  "DropdownMenuCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DropdownMenuItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'Profile',\r\n    icon: 'i-lucide-user',\r\n    slot: 'profile' as const\r\n  }, {\r\n    label: 'Billing',\r\n    icon: 'i-lucide-credit-card'\r\n  }, {\r\n    label: 'Settings',\r\n    icon: 'i-lucide-cog'\r\n  }\r\n] satisfies DropdownMenuItem[]\r\n</script>\r\n\r\n<template>\r\n  <UDropdownMenu :items=\"items\" :ui=\"{ content: 'w-48' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"outline\" icon=\"i-lucide-menu\" />\r\n\r\n    <template #profile-trailing>\r\n      <UIcon name=\"i-lucide-badge-check\" class=\"shrink-0 size-5 text-primary\" />\r\n    </template>\r\n  </UDropdownMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/dropdown-menu/DropdownMenuCustomSlotExample.vue",
    "pascalName": "DropdownMenuCustomSlotExample"
  },
  "DropdownMenuOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { DropdownMenuItem } from '@nuxt/ui'\r\n\r\nconst open = ref(false)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n\r\nconst items: DropdownMenuItem[] = [\r\n  {\r\n    label: 'Profile',\r\n    icon: 'i-lucide-user'\r\n  }, {\r\n    label: 'Billing',\r\n    icon: 'i-lucide-credit-card'\r\n  }, {\r\n    label: 'Settings',\r\n    icon: 'i-lucide-cog'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UDropdownMenu v-model:open=\"open\" :items=\"items\" :ui=\"{ content: 'w-48' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"outline\" icon=\"i-lucide-menu\" />\r\n  </UDropdownMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/dropdown-menu/DropdownMenuOpenExample.vue",
    "pascalName": "DropdownMenuOpenExample"
  },
  "FileUploadDefaultSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport * as z from 'zod'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst MAX_FILE_SIZE = 2 * 1024 * 1024 // 2MB\r\nconst MIN_DIMENSIONS = { width: 200, height: 200 }\r\nconst MAX_DIMENSIONS = { width: 4096, height: 4096 }\r\nconst ACCEPTED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\r\n\r\nconst formatBytes = (bytes: number, decimals = 2) => {\r\n  if (bytes === 0) return '0 Bytes'\r\n  const k = 1024\r\n  const dm = decimals < 0 ? 0 : decimals\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\r\n}\r\n\r\nconst schema = z.object({\r\n  avatar: z\r\n    .instanceof(File, {\r\n      message: 'Please select an image file.'\r\n    })\r\n    .refine(file => file.size <= MAX_FILE_SIZE, {\r\n      message: `The image is too large. Please choose an image smaller than ${formatBytes(MAX_FILE_SIZE)}.`\r\n    })\r\n    .refine(file => ACCEPTED_IMAGE_TYPES.includes(file.type), {\r\n      message: 'Please upload a valid image file (JPEG, PNG, or WebP).'\r\n    })\r\n    .refine(\r\n      file =>\r\n        new Promise((resolve) => {\r\n          const reader = new FileReader()\r\n          reader.onload = (e) => {\r\n            const img = new Image()\r\n            img.onload = () => {\r\n              const meetsDimensions\r\n                  = img.width >= MIN_DIMENSIONS.width\r\n                    && img.height >= MIN_DIMENSIONS.height\r\n                    && img.width <= MAX_DIMENSIONS.width\r\n                    && img.height <= MAX_DIMENSIONS.height\r\n              resolve(meetsDimensions)\r\n            }\r\n            img.src = e.target?.result as string\r\n          }\r\n          reader.readAsDataURL(file)\r\n        }),\r\n      {\r\n        message: `The image dimensions are invalid. Please upload an image between ${MIN_DIMENSIONS.width}x${MIN_DIMENSIONS.height} and ${MAX_DIMENSIONS.width}x${MAX_DIMENSIONS.height} pixels.`\r\n      }\r\n    )\r\n})\r\n\r\ntype schema = z.output<typeof schema>\r\n\r\nconst state = reactive<Partial<schema>>({\r\n  avatar: undefined\r\n})\r\n\r\nfunction createObjectUrl(file: File): string {\r\n  return URL.createObjectURL(file)\r\n}\r\n\r\nasync function onSubmit(event: FormSubmitEvent<schema>) {\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4 w-64\" @submit=\"onSubmit\">\r\n    <UFormField name=\"avatar\" label=\"Avatar\" description=\"JPG, GIF or PNG. 1MB Max.\">\r\n      <UFileUpload v-slot=\"{ open, removeFile }\" v-model=\"state.avatar\" accept=\"image/*\">\r\n        <div class=\"flex flex-wrap items-center gap-3\">\r\n          <UAvatar size=\"lg\" :src=\"state.avatar ? createObjectUrl(state.avatar) : undefined\" icon=\"i-lucide-image\" />\r\n\r\n          <UButton :label=\"state.avatar ? 'Change image' : 'Upload image'\" color=\"neutral\" variant=\"outline\" @click=\"open()\" />\r\n        </div>\r\n\r\n        <p v-if=\"state.avatar\" class=\"text-xs text-muted mt-1.5\">\r\n          {{ state.avatar.name }}\r\n\r\n          <UButton\r\n            label=\"Remove\"\r\n            color=\"error\"\r\n            variant=\"link\"\r\n            size=\"xs\"\r\n            class=\"p-0\"\r\n            @click=\"removeFile()\"\r\n          />\r\n        </p>\r\n      </UFileUpload>\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\" label=\"Submit\" color=\"neutral\" />\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/file-upload/FileUploadDefaultSlotExample.vue",
    "pascalName": "FileUploadDefaultSlotExample"
  },
  "FileUploadFilesBottomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref<File[]>([])\r\n</script>\r\n\r\n<template>\r\n  <UFileUpload\r\n    v-model=\"value\"\r\n    icon=\"i-lucide-image\"\r\n    label=\"Drop your images here\"\r\n    description=\"SVG, PNG, JPG or GIF (max. 2MB)\"\r\n    layout=\"list\"\r\n    multiple\r\n    :interactive=\"false\"\r\n    class=\"w-96 min-h-48\"\r\n  >\r\n    <template #actions=\"{ open }\">\r\n      <UButton\r\n        label=\"Select images\"\r\n        icon=\"i-lucide-upload\"\r\n        color=\"neutral\"\r\n        variant=\"outline\"\r\n        @click=\"open()\"\r\n      />\r\n    </template>\r\n\r\n    <template #files-bottom=\"{ removeFile, files }\">\r\n      <UButton\r\n        v-if=\"files?.length\"\r\n        label=\"Remove all files\"\r\n        color=\"neutral\"\r\n        @click=\"removeFile()\"\r\n      />\r\n    </template>\r\n  </UFileUpload>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/file-upload/FileUploadFilesBottomSlotExample.vue",
    "pascalName": "FileUploadFilesBottomSlotExample"
  },
  "FileUploadFilesTopSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref<File[]>([])\r\n</script>\r\n\r\n<template>\r\n  <UFileUpload\r\n    v-model=\"value\"\r\n    icon=\"i-lucide-image\"\r\n    label=\"Drop your images here\"\r\n    description=\"SVG, PNG, JPG or GIF (max. 2MB)\"\r\n    layout=\"grid\"\r\n    multiple\r\n    :interactive=\"false\"\r\n    class=\"w-96 min-h-48\"\r\n  >\r\n    <template #actions=\"{ open }\">\r\n      <UButton\r\n        label=\"Select images\"\r\n        icon=\"i-lucide-upload\"\r\n        color=\"neutral\"\r\n        variant=\"outline\"\r\n        @click=\"open()\"\r\n      />\r\n    </template>\r\n\r\n    <template #files-top=\"{ open, files }\">\r\n      <div v-if=\"files?.length\" class=\"mb-2 flex items-center justify-between\">\r\n        <p class=\"font-bold\">\r\n          Files ({{ files?.length }})\r\n        </p>\r\n\r\n        <UButton\r\n          icon=\"i-lucide-plus\"\r\n          label=\"Add more\"\r\n          color=\"neutral\"\r\n          variant=\"outline\"\r\n          class=\"-my-2\"\r\n          @click=\"open()\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </UFileUpload>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/file-upload/FileUploadFilesTopSlotExample.vue",
    "pascalName": "FileUploadFilesTopSlotExample"
  },
  "FileUploadFormValidationExample": {
    "code": "<script setup lang=\"ts\">\r\nimport * as z from 'zod'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst MAX_FILE_SIZE = 2 * 1024 * 1024 // 2MB\r\nconst MIN_DIMENSIONS = { width: 200, height: 200 }\r\nconst MAX_DIMENSIONS = { width: 4096, height: 4096 }\r\nconst ACCEPTED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\r\n\r\nconst formatBytes = (bytes: number, decimals = 2) => {\r\n  if (bytes === 0) return '0 Bytes'\r\n  const k = 1024\r\n  const dm = decimals < 0 ? 0 : decimals\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\r\n}\r\n\r\nconst schema = z.object({\r\n  image: z\r\n    .instanceof(File, {\r\n      message: 'Please select an image file.'\r\n    })\r\n    .refine(file => file.size <= MAX_FILE_SIZE, {\r\n      message: `The image is too large. Please choose an image smaller than ${formatBytes(MAX_FILE_SIZE)}.`\r\n    })\r\n    .refine(file => ACCEPTED_IMAGE_TYPES.includes(file.type), {\r\n      message: 'Please upload a valid image file (JPEG, PNG, or WebP).'\r\n    })\r\n    .refine(\r\n      file =>\r\n        new Promise((resolve) => {\r\n          const reader = new FileReader()\r\n          reader.onload = (e) => {\r\n            const img = new Image()\r\n            img.onload = () => {\r\n              const meetsDimensions\r\n                = img.width >= MIN_DIMENSIONS.width\r\n                  && img.height >= MIN_DIMENSIONS.height\r\n                  && img.width <= MAX_DIMENSIONS.width\r\n                  && img.height <= MAX_DIMENSIONS.height\r\n              resolve(meetsDimensions)\r\n            }\r\n            img.src = e.target?.result as string\r\n          }\r\n          reader.readAsDataURL(file)\r\n        }),\r\n      {\r\n        message: `The image dimensions are invalid. Please upload an image between ${MIN_DIMENSIONS.width}x${MIN_DIMENSIONS.height} and ${MAX_DIMENSIONS.width}x${MAX_DIMENSIONS.height} pixels.`\r\n      }\r\n    )\r\n})\r\n\r\ntype schema = z.output<typeof schema>\r\n\r\nconst state = reactive<Partial<schema>>({\r\n  image: undefined\r\n})\r\n\r\nasync function onSubmit(event: FormSubmitEvent<schema>) {\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4 w-96\" @submit=\"onSubmit\">\r\n    <UFormField name=\"image\" label=\"Image\" description=\"JPG, GIF or PNG. 2MB Max.\">\r\n      <UFileUpload v-model=\"state.image\" accept=\"image/*\" class=\"min-h-48\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\" label=\"Submit\" color=\"neutral\" />\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/file-upload/FileUploadFormValidationExample.vue",
    "pascalName": "FileUploadFormValidationExample"
  },
  "FormExampleBasic": {
    "code": "<script setup lang=\"ts\">\r\nimport type { FormError, FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst state = reactive({\r\n  email: undefined,\r\n  password: undefined\r\n})\r\n\r\nconst validate = (state: any): FormError[] => {\r\n  const errors = []\r\n  if (!state.email) errors.push({ name: 'email', message: 'Required' })\r\n  if (!state.password) errors.push({ name: 'password', message: 'Required' })\r\n  return errors\r\n}\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<typeof state>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :validate=\"validate\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleBasic.vue",
    "pascalName": "FormExampleBasic"
  },
  "FormExampleElements": {
    "code": "<script setup lang=\"ts\">\r\nimport * as z from 'zod'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = z.object({\r\n  input: z.string().min(10),\r\n  inputNumber: z.number().min(10),\r\n  inputMenu: z.any().refine(option => option?.value === 'option-2', {\r\n    message: 'Select Option 2'\r\n  }),\r\n  inputMenuMultiple: z.any().refine(values => !!values?.find((option: any) => option.value === 'option-2'), {\r\n    message: 'Include Option 2'\r\n  }),\r\n  textarea: z.string().min(10),\r\n  select: z.string().refine(value => value === 'option-2', {\r\n    message: 'Select Option 2'\r\n  }),\r\n  selectMultiple: z.array(z.string()).refine(values => values.includes('option-2'), {\r\n    message: 'Include Option 2'\r\n  }),\r\n  selectMenu: z.any().refine(option => option?.value === 'option-2', {\r\n    message: 'Select Option 2'\r\n  }),\r\n  selectMenuMultiple: z.any().refine(values => !!values?.find((option: any) => option.value === 'option-2'), {\r\n    message: 'Include Option 2'\r\n  }),\r\n  switch: z.boolean().refine(value => value === true, {\r\n    message: 'Toggle me'\r\n  }),\r\n  checkbox: z.boolean().refine(value => value === true, {\r\n    message: 'Check me'\r\n  }),\r\n  radioGroup: z.string().refine(value => value === 'option-2', {\r\n    message: 'Select Option 2'\r\n  }),\r\n  checkboxGroup: z.any().refine(values => !!values?.find((option: any) => option === 'option-2'), {\r\n    message: 'Include Option 2'\r\n  }),\r\n  slider: z.number().max(20, { message: 'Must be less than 20' }),\r\n  pin: z.string().regex(/^\\d$/).array().length(5),\r\n  file: z.file().min(1).max(1024 * 1024).mime('image/png')\r\n})\r\n\r\ntype Schema = z.input<typeof schema>\r\n\r\nconst state = reactive<Partial<Schema>>({})\r\n\r\nconst form = useTemplateRef('form')\r\n\r\nconst items = [\r\n  { label: 'Option 1', value: 'option-1' },\r\n  { label: 'Option 2', value: 'option-2' },\r\n  { label: 'Option 3', value: 'option-3' }\r\n]\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm ref=\"form\" :state=\"state\" :schema=\"schema\" class=\"w-full\" @submit=\"onSubmit\">\r\n    <div class=\"grid grid-cols-3 gap-4\">\r\n      <UFormField label=\"Input\" name=\"input\">\r\n        <UInput v-model=\"state.input\" placeholder=\"john@lennon.com\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <div class=\"flex flex-col gap-4\">\r\n        <UFormField name=\"switch\">\r\n          <USwitch v-model=\"state.switch\" label=\"Switch me\" />\r\n        </UFormField>\r\n\r\n        <UFormField name=\"checkbox\">\r\n          <UCheckbox v-model=\"state.checkbox\" label=\"Check me\" />\r\n        </UFormField>\r\n      </div>\r\n\r\n      <UFormField name=\"slider\" label=\"Slider\">\r\n        <USlider v-model=\"state.slider\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"select\" label=\"Select\">\r\n        <USelect v-model=\"state.select\" :items=\"items\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"selectMultiple\" label=\"Select (Multiple)\">\r\n        <USelect v-model=\"state.selectMultiple\" multiple :items=\"items\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"selectMenu\" label=\"Select Menu\">\r\n        <USelectMenu v-model=\"state.selectMenu\" :items=\"items\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"selectMenuMultiple\" label=\"Select Menu (Multiple)\">\r\n        <USelectMenu v-model=\"state.selectMenuMultiple\" multiple :items=\"items\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"inputMenu\" label=\"Input Menu\">\r\n        <UInputMenu v-model=\"state.inputMenu\" :items=\"items\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"inputMenuMultiple\" label=\"Input Menu (Multiple)\">\r\n        <UInputMenu v-model=\"state.inputMenuMultiple\" multiple :items=\"items\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"inputNumber\" label=\"Input Number\">\r\n        <UInputNumber v-model=\"state.inputNumber\" class=\"w-full\" />\r\n      </UFormField>\r\n\r\n      <UFormField label=\"Textarea\" name=\"textarea\">\r\n        <UTextarea v-model=\"state.textarea\" class=\"w-full\" />\r\n      </UFormField>\r\n      <div class=\"flex gap-4\">\r\n        <UFormField name=\"radioGroup\">\r\n          <URadioGroup v-model=\"state.radioGroup\" legend=\"Radio group\" :items=\"items\" />\r\n        </UFormField>\r\n        <UFormField name=\"checkboxGroup\">\r\n          <UCheckboxGroup v-model=\"state.checkboxGroup\" legend=\"Checkbox group\" :items=\"items\" />\r\n        </UFormField>\r\n      </div>\r\n      <UFormField name=\"pin\" label=\"Pin Input\" :error-pattern=\"/(pin)\\..*/\">\r\n        <UPinInput v-model=\"state.pin\" />\r\n      </UFormField>\r\n\r\n      <UFormField name=\"file\" label=\"File Input\">\r\n        <UFileUpload\r\n          v-model=\"state.file\"\r\n          label=\"Drop your image here\"\r\n          description=\"PNG (max. 1MB)\"\r\n          class=\"w-full min-h-44\"\r\n        />\r\n      </UFormField>\r\n    </div>\r\n\r\n    <div class=\"flex gap-2 mt-8\">\r\n      <UButton type=\"submit\">\r\n        Submit\r\n      </UButton>\r\n\r\n      <UButton variant=\"outline\" @click=\"form?.clear()\">\r\n        Clear\r\n      </UButton>\r\n    </div>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleElements.vue",
    "pascalName": "FormExampleElements"
  },
  "FormExampleJoi": {
    "code": "<script setup lang=\"ts\">\r\nimport Joi from 'joi'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = Joi.object({\r\n  email: Joi.string().required(),\r\n  password: Joi.string()\r\n    .min(8)\r\n    .required()\r\n})\r\n\r\nconst state = reactive({\r\n  email: undefined,\r\n  password: undefined\r\n})\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<typeof state>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleJoi.vue",
    "pascalName": "FormExampleJoi"
  },
  "FormExampleNested": {
    "code": "<script setup lang=\"ts\">\r\nimport * as z from 'zod'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = z.object({\r\n  name: z.string().min(2),\r\n  news: z.boolean().default(false)\r\n})\r\n\r\ntype Schema = z.output<typeof schema>\r\n\r\nconst nestedSchema = z.object({\r\n  email: z.string().email()\r\n})\r\n\r\ntype NestedSchema = z.output<typeof nestedSchema>\r\n\r\nconst state = reactive<Partial<Schema & NestedSchema>>({ })\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm\r\n    :state=\"state\"\r\n    :schema=\"schema\"\r\n    class=\"gap-4 flex flex-col w-60\"\r\n    @submit=\"onSubmit\"\r\n  >\r\n    <UFormField label=\"Name\" name=\"name\">\r\n      <UInput v-model=\"state.name\" placeholder=\"John Lennon\" />\r\n    </UFormField>\r\n\r\n    <div>\r\n      <UCheckbox v-model=\"state.news\" name=\"news\" label=\"Register to our newsletter\" @update:model-value=\"state.email = undefined\" />\r\n    </div>\r\n\r\n    <UForm v-if=\"state.news\" :state=\"state\" :schema=\"nestedSchema\" attach>\r\n      <UFormField label=\"Email\" name=\"email\">\r\n        <UInput v-model=\"state.email\" placeholder=\"john@lennon.com\" />\r\n      </UFormField>\r\n    </UForm>\r\n\r\n    <div>\r\n      <UButton type=\"submit\">\r\n        Submit\r\n      </UButton>\r\n    </div>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleNested.vue",
    "pascalName": "FormExampleNested"
  },
  "FormExampleNestedList": {
    "code": "<script setup lang=\"ts\">\r\nimport * as z from 'zod'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = z.object({\r\n  customer: z.string().min(2)\r\n})\r\n\r\ntype Schema = z.output<typeof schema>\r\n\r\nconst itemSchema = z.object({\r\n  description: z.string().min(1),\r\n  price: z.number().min(0)\r\n})\r\n\r\ntype ItemSchema = z.output<typeof itemSchema>\r\n\r\nconst state = reactive<Partial<Schema & { items: Partial<ItemSchema>[] }>>({\r\n  items: [{}]\r\n})\r\n\r\nfunction addItem() {\r\n  if (!state.items) {\r\n    state.items = []\r\n  }\r\n  state.items.push({})\r\n}\r\n\r\nfunction removeItem() {\r\n  if (state.items) {\r\n    state.items.pop()\r\n  }\r\n}\r\n\r\nconst toast = useToast()\r\n\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm\r\n    :state=\"state\"\r\n    :schema=\"schema\"\r\n    class=\"gap-4 flex flex-col w-60\"\r\n    @submit=\"onSubmit\"\r\n  >\r\n    <UFormField label=\"Customer\" name=\"customer\">\r\n      <UInput v-model=\"state.customer\" placeholder=\"Wonka Industries\" />\r\n    </UFormField>\r\n\r\n    <UForm\r\n      v-for=\"item, count in state.items\"\r\n      :key=\"count\"\r\n      :state=\"item\"\r\n      :schema=\"itemSchema\"\r\n      attach\r\n      class=\"flex gap-2\"\r\n    >\r\n      <UFormField :label=\"!count ? 'Description' : undefined\" name=\"description\">\r\n        <UInput v-model=\"item.description\" />\r\n      </UFormField>\r\n      <UFormField :label=\"!count ? 'Price' : undefined\" name=\"price\" class=\"w-20\">\r\n        <UInput v-model=\"item.price\" type=\"number\" />\r\n      </UFormField>\r\n    </UForm>\r\n\r\n    <div class=\"flex gap-2\">\r\n      <UButton color=\"neutral\" variant=\"subtle\" size=\"sm\" @click=\"addItem()\">\r\n        Add Item\r\n      </UButton>\r\n\r\n      <UButton color=\"neutral\" variant=\"ghost\" size=\"sm\" @click=\"removeItem()\">\r\n        Remove Item\r\n      </UButton>\r\n    </div>\r\n    <div>\r\n      <UButton type=\"submit\">\r\n        Submit\r\n      </UButton>\r\n    </div>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleNestedList.vue",
    "pascalName": "FormExampleNestedList"
  },
  "FormExampleOnError": {
    "code": "<script setup lang=\"ts\">\r\nimport type { FormError, FormErrorEvent, FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst state = reactive({\r\n  email: undefined,\r\n  password: undefined\r\n})\r\n\r\nconst validate = (state: any): FormError[] => {\r\n  const errors = []\r\n  if (!state.email) errors.push({ name: 'email', message: 'Required' })\r\n  if (!state.password) errors.push({ name: 'password', message: 'Required' })\r\n  return errors\r\n}\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<typeof state>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n\r\nasync function onError(event: FormErrorEvent) {\r\n  if (event?.errors?.[0]?.id) {\r\n    const element = document.getElementById(event.errors[0].id)\r\n    element?.focus()\r\n    element?.scrollIntoView({ behavior: 'smooth', block: 'center' })\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :validate=\"validate\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\" @error=\"onError\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleOnError.vue",
    "pascalName": "FormExampleOnError"
  },
  "FormExampleSuperstruct": {
    "code": "<script setup lang=\"ts\">\r\nimport { object, string, nonempty, refine } from 'superstruct'\r\nimport type { Infer } from 'superstruct'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = object({\r\n  email: nonempty(string()),\r\n  password: refine(string(), 'Password', (value) => {\r\n    if (value.length >= 8) return true\r\n    return 'Must be at least 8 characters'\r\n  })\r\n})\r\n\r\nconst state = reactive({\r\n  email: '',\r\n  password: ''\r\n})\r\n\r\ntype Schema = Infer<typeof schema>\r\n\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleSuperstruct.vue",
    "pascalName": "FormExampleSuperstruct"
  },
  "FormExampleValibot": {
    "code": "<script setup lang=\"ts\">\r\nimport * as v from 'valibot'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = v.object({\r\n  email: v.pipe(v.string(), v.email('Invalid email')),\r\n  password: v.pipe(v.string(), v.minLength(8, 'Must be at least 8 characters'))\r\n})\r\n\r\ntype Schema = v.InferOutput<typeof schema>\r\n\r\nconst state = reactive({\r\n  email: '',\r\n  password: ''\r\n})\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleValibot.vue",
    "pascalName": "FormExampleValibot"
  },
  "FormExampleYup": {
    "code": "<script setup lang=\"ts\">\r\nimport { object, string } from 'yup'\r\nimport type { InferType } from 'yup'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = object({\r\n  email: string().email('Invalid email').required('Required'),\r\n  password: string()\r\n    .min(8, 'Must be at least 8 characters')\r\n    .required('Required')\r\n})\r\n\r\ntype Schema = InferType<typeof schema>\r\n\r\nconst state = reactive({\r\n  email: undefined,\r\n  password: undefined\r\n})\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleYup.vue",
    "pascalName": "FormExampleYup"
  },
  "FormExampleZod": {
    "code": "<script setup lang=\"ts\">\r\nimport * as z from 'zod'\r\nimport type { FormSubmitEvent } from '@nuxt/ui'\r\n\r\nconst schema = z.object({\r\n  email: z.string().email('Invalid email'),\r\n  password: z.string().min(8, 'Must be at least 8 characters')\r\n})\r\n\r\ntype Schema = z.output<typeof schema>\r\n\r\nconst state = reactive<Partial<Schema>>({\r\n  email: undefined,\r\n  password: undefined\r\n})\r\n\r\nconst toast = useToast()\r\nasync function onSubmit(event: FormSubmitEvent<Schema>) {\r\n  toast.add({ title: 'Success', description: 'The form has been submitted.', color: 'success' })\r\n  console.log(event.data)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\r\n    <UFormField label=\"Email\" name=\"email\">\r\n      <UInput v-model=\"state.email\" />\r\n    </UFormField>\r\n\r\n    <UFormField label=\"Password\" name=\"password\">\r\n      <UInput v-model=\"state.password\" type=\"password\" />\r\n    </UFormField>\r\n\r\n    <UButton type=\"submit\">\r\n      Submit\r\n    </UButton>\r\n  </UForm>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/form/FormExampleZod.vue",
    "pascalName": "FormExampleZod"
  },
  "InputMenuContentWidthExample": {
    "code": "<script setup lang=\"ts\">\r\nconst { data: users } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users-email',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      email: user.email,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    :items=\"users\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    :ui=\"{ content: 'min-w-fit' }\"\r\n  >\r\n    <template #item-label=\"{ item }\">\r\n      {{ item.label }}\r\n\r\n      <span class=\"text-muted\">\r\n        {{ item.email }}\r\n      </span>\r\n    </template>\r\n  </UInputMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuContentWidthExample.vue",
    "pascalName": "InputMenuContentWidthExample"
  },
  "InputMenuCountriesExample": {
    "code": "<script setup lang=\"ts\">\r\nconst { data: countries, status, execute } = await useLazyFetch<{\r\n  name: string\r\n  code: string\r\n  emoji: string\r\n}[]>('/api/countries.json', {\r\n  immediate: false\r\n})\r\n\r\nfunction onOpen() {\r\n  if (!countries.value?.length) {\r\n    execute()\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    :items=\"countries\"\r\n    :loading=\"status === 'pending'\"\r\n    label-key=\"name\"\r\n    :search-input=\"{ icon: 'i-lucide-search' }\"\r\n    placeholder=\"Select country\"\r\n    class=\"w-48\"\r\n    @update:open=\"onOpen\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <span v-if=\"modelValue\" class=\"size-5 text-center\">\r\n        {{ modelValue?.emoji }}\r\n      </span>\r\n      <UIcon v-else name=\"i-lucide-earth\" :class=\"ui.leadingIcon()\" />\r\n    </template>\r\n    <template #item-leading=\"{ item }\">\r\n      <span class=\"size-5 text-center\">\r\n        {{ item.emoji }}\r\n      </span>\r\n    </template>\r\n  </UInputMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuCountriesExample.vue",
    "pascalName": "InputMenuCountriesExample"
  },
  "InputMenuCreateItemExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n\r\nfunction onCreate(item: string) {\r\n  items.value.push(item)\r\n\r\n  value.value = item\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    v-model=\"value\"\r\n    create-item\r\n    :items=\"items\"\r\n    class=\"w-48\"\r\n    @create=\"onCreate\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuCreateItemExample.vue",
    "pascalName": "InputMenuCreateItemExample"
  },
  "InputMenuFetchExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users',\r\n  transform: (data: { id: number, name: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.avatar\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n  </UInputMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuFetchExample.vue",
    "pascalName": "InputMenuFetchExample"
  },
  "InputMenuFilterFieldsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users-email',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      email: user.email,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    :filter-fields=\"['label', 'email']\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    class=\"w-80\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.avatar\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n\r\n    <template #item-label=\"{ item }\">\r\n      {{ item.label }}\r\n\r\n      <span class=\"text-muted\">\r\n        {{ item.email }}\r\n      </span>\r\n    </template>\r\n  </UInputMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuFilterFieldsExample.vue",
    "pascalName": "InputMenuFilterFieldsExample"
  },
  "InputMenuIconExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    v-model=\"value\"\r\n    :items=\"items\"\r\n    :ui=\"{\r\n      trailingIcon: 'group-data-[state=open]:rotate-180 transition-transform duration-200'\r\n    }\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuIconExample.vue",
    "pascalName": "InputMenuIconExample"
  },
  "InputMenuIgnoreFilterExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { refDebounced } from '@vueuse/core'\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst searchTerm = ref('')\r\nconst searchTermDebounced = refDebounced(searchTerm, 200)\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  params: { q: searchTermDebounced },\r\n  transform: (data: { id: number, name: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    v-model:search-term=\"searchTerm\"\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    ignore-filter\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.avatar\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n  </UInputMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuIgnoreFilterExample.vue",
    "pascalName": "InputMenuIgnoreFilterExample"
  },
  "InputMenuItemsAvatarExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { InputMenuItem } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'benjamincanac',\r\n    value: 'benjamincanac',\r\n    avatar: {\r\n      src: 'https://github.com/benjamincanac.png',\r\n      alt: 'benjamincanac'\r\n    }\r\n  },\r\n  {\r\n    label: 'romhml',\r\n    value: 'romhml',\r\n    avatar: {\r\n      src: 'https://github.com/romhml.png',\r\n      alt: 'romhml'\r\n    }\r\n  },\r\n  {\r\n    label: 'noook',\r\n    value: 'noook',\r\n    avatar: {\r\n      src: 'https://github.com/noook.png',\r\n      alt: 'noook'\r\n    }\r\n  },\r\n  {\r\n    label: 'sandros94',\r\n    value: 'sandros94',\r\n    avatar: {\r\n      src: 'https://github.com/sandros94.png',\r\n      alt: 'sandros94'\r\n    }\r\n  }\r\n] satisfies InputMenuItem[])\r\n\r\nconst value = ref(items.value[0])\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu v-model=\"value\" :avatar=\"value?.avatar\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuItemsAvatarExample.vue",
    "pascalName": "InputMenuItemsAvatarExample"
  },
  "InputMenuItemsChipExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { InputMenuItem, ChipProps } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'bug',\r\n    value: 'bug',\r\n    chip: {\r\n      color: 'error'\r\n    }\r\n  },\r\n  {\r\n    label: 'feature',\r\n    value: 'feature',\r\n    chip: {\r\n      color: 'success'\r\n    }\r\n  },\r\n  {\r\n    label: 'enhancement',\r\n    value: 'enhancement',\r\n    chip: {\r\n      color: 'info'\r\n    }\r\n  }\r\n] satisfies InputMenuItem[])\r\n\r\nconst value = ref(items.value[0])\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu v-model=\"value\" :items=\"items\">\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UChip\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.chip\"\r\n        inset\r\n        standalone\r\n        :size=\"(ui.itemLeadingChipSize() as ChipProps['size'])\"\r\n        :class=\"ui.itemLeadingChip()\"\r\n      />\r\n    </template>\r\n  </UInputMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuItemsChipExample.vue",
    "pascalName": "InputMenuItemsChipExample"
  },
  "InputMenuItemsIconExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { InputMenuItem } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'Backlog',\r\n    value: 'backlog',\r\n    icon: 'i-lucide-circle-help'\r\n  },\r\n  {\r\n    label: 'Todo',\r\n    value: 'todo',\r\n    icon: 'i-lucide-circle-plus'\r\n  },\r\n  {\r\n    label: 'In Progress',\r\n    value: 'in_progress',\r\n    icon: 'i-lucide-circle-arrow-up'\r\n  },\r\n  {\r\n    label: 'Done',\r\n    value: 'done',\r\n    icon: 'i-lucide-circle-check'\r\n  }\r\n] satisfies InputMenuItem[])\r\n\r\nconst value = ref(items.value[0])\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu v-model=\"value\" :icon=\"value?.icon\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuItemsIconExample.vue",
    "pascalName": "InputMenuItemsIconExample"
  },
  "InputMenuOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu v-model=\"value\" v-model:open=\"open\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuOpenExample.vue",
    "pascalName": "InputMenuOpenExample"
  },
  "InputMenuOpenFocusExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst selected = ref('Backlog')\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu\r\n    v-model=\"selected\"\r\n    :items=\"items\"\r\n    open-on-focus\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuOpenFocusExample.vue",
    "pascalName": "InputMenuOpenFocusExample"
  },
  "InputMenuSearchTermExample": {
    "code": "<script setup lang=\"ts\">\r\nconst searchTerm = ref('D')\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n</script>\r\n\r\n<template>\r\n  <UInputMenu v-model=\"value\" v-model:search-term=\"searchTerm\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-menu/InputMenuSearchTermExample.vue",
    "pascalName": "InputMenuSearchTermExample"
  },
  "InputNumberCurrencyExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref(1500)\r\n</script>\r\n\r\n<template>\r\n  <UInputNumber\r\n    v-model=\"value\"\r\n    :format-options=\"{\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n      currencyDisplay: 'code',\r\n      currencySign: 'accounting'\r\n    }\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-number/InputNumberCurrencyExample.vue",
    "pascalName": "InputNumberCurrencyExample"
  },
  "InputNumberDecimalExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref(5)\r\n</script>\r\n\r\n<template>\r\n  <UInputNumber\r\n    v-model=\"value\"\r\n    :format-options=\"{\r\n      signDisplay: 'exceptZero',\r\n      minimumFractionDigits: 1\r\n    }\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-number/InputNumberDecimalExample.vue",
    "pascalName": "InputNumberDecimalExample"
  },
  "InputNumberFormFieldExample": {
    "code": "<script setup lang=\"ts\">\r\nconst retries = ref(0)\r\n</script>\r\n\r\n<template>\r\n  <UFormField label=\"Retries\" help=\"Specify number of attempts\" required>\r\n    <UInputNumber v-model=\"retries\" placeholder=\"Enter retries\" />\r\n  </UFormField>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-number/InputNumberFormFieldExample.vue",
    "pascalName": "InputNumberFormFieldExample"
  },
  "InputNumberPercentageExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref(0.05)\r\n</script>\r\n\r\n<template>\r\n  <UInputNumber\r\n    v-model=\"value\"\r\n    :step=\"0.01\"\r\n    :format-options=\"{\r\n      style: 'percent'\r\n    }\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-number/InputNumberPercentageExample.vue",
    "pascalName": "InputNumberPercentageExample"
  },
  "InputNumberSlotsExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref(5)\r\n</script>\r\n\r\n<template>\r\n  <UInputNumber v-model=\"value\">\r\n    <template #decrement>\r\n      <UButton size=\"xs\" icon=\"i-lucide-minus\" />\r\n    </template>\r\n\r\n    <template #increment>\r\n      <UButton size=\"xs\" icon=\"i-lucide-plus\" />\r\n    </template>\r\n  </UInputNumber>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-number/InputNumberSlotsExample.vue",
    "pascalName": "InputNumberSlotsExample"
  },
  "InputTagsFormFieldExample": {
    "code": "<script setup lang=\"ts\">\r\nconst tags = ref(['Vue'])\r\n</script>\r\n\r\n<template>\r\n  <UFormField label=\"Tags\" required>\r\n    <UInputTags v-model=\"tags\" placeholder=\"Enter tags...\" />\r\n  </UFormField>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input-tags/InputTagsFormFieldExample.vue",
    "pascalName": "InputTagsFormFieldExample"
  },
  "InputButtonGroupExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref('')\r\nconst domains = ['.com', '.dev', '.org']\r\nconst domain = ref(domains[0])\r\n</script>\r\n\r\n<template>\r\n  <UButtonGroup>\r\n    <UInput\r\n      v-model=\"value\"\r\n      placeholder=\"nuxt\"\r\n      :ui=\"{\r\n        base: 'pl-14.5',\r\n        leading: 'pointer-events-none'\r\n      }\"\r\n    >\r\n      <template #leading>\r\n        <p class=\"text-sm text-muted\">\r\n          https://\r\n        </p>\r\n      </template>\r\n    </UInput>\r\n\r\n    <USelectMenu v-model=\"domain\" :items=\"domains\" />\r\n  </UButtonGroup>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputButtonGroupExample.vue",
    "pascalName": "InputButtonGroupExample"
  },
  "InputCharacterLimitExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref('')\r\nconst maxLength = 15\r\n</script>\r\n\r\n<template>\r\n  <UInput\r\n    v-model=\"value\"\r\n    :maxlength=\"maxLength\"\r\n    aria-describedby=\"character-count\"\r\n    :ui=\"{ trailing: 'pointer-events-none' }\"\r\n  >\r\n    <template #trailing>\r\n      <div\r\n        id=\"character-count\"\r\n        class=\"text-xs text-muted tabular-nums\"\r\n        aria-live=\"polite\"\r\n        role=\"status\"\r\n      >\r\n        {{ value?.length }}/{{ maxLength }}\r\n      </div>\r\n    </template>\r\n  </UInput>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputCharacterLimitExample.vue",
    "pascalName": "InputCharacterLimitExample"
  },
  "InputClearButtonExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref('Click to clear')\r\n</script>\r\n\r\n<template>\r\n  <UInput\r\n    v-model=\"value\"\r\n    placeholder=\"Type something...\"\r\n    :ui=\"{ trailing: 'pe-1' }\"\r\n  >\r\n    <template v-if=\"value?.length\" #trailing>\r\n      <UButton\r\n        color=\"neutral\"\r\n        variant=\"link\"\r\n        size=\"sm\"\r\n        icon=\"i-lucide-circle-x\"\r\n        aria-label=\"Clear input\"\r\n        @click=\"value = ''\"\r\n      />\r\n    </template>\r\n  </UInput>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputClearButtonExample.vue",
    "pascalName": "InputClearButtonExample"
  },
  "InputCopyButtonExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { useClipboard } from '@vueuse/core'\r\n\r\nconst value = ref('npx nuxt module add ui')\r\n\r\nconst { copy, copied } = useClipboard()\r\n</script>\r\n\r\n<template>\r\n  <UInput\r\n    v-model=\"value\"\r\n    :ui=\"{ trailing: 'pr-0.5' }\"\r\n  >\r\n    <template v-if=\"value?.length\" #trailing>\r\n      <UTooltip text=\"Copy to clipboard\" :content=\"{ side: 'right' }\">\r\n        <UButton\r\n          :color=\"copied ? 'success' : 'neutral'\"\r\n          variant=\"link\"\r\n          size=\"sm\"\r\n          :icon=\"copied ? 'i-lucide-copy-check' : 'i-lucide-copy'\"\r\n          aria-label=\"Copy to clipboard\"\r\n          @click=\"copy(value)\"\r\n        />\r\n      </UTooltip>\r\n    </template>\r\n  </UInput>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputCopyButtonExample.vue",
    "pascalName": "InputCopyButtonExample"
  },
  "InputFloatingLabelExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref('')\r\n</script>\r\n\r\n<template>\r\n  <UInput v-model=\"value\" placeholder=\"\" :ui=\"{ base: 'peer' }\">\r\n    <label class=\"pointer-events-none absolute left-0 -top-2.5 text-highlighted text-xs font-medium px-1.5 transition-all peer-focus:-top-2.5 peer-focus:text-highlighted peer-focus:text-xs peer-focus:font-medium peer-placeholder-shown:text-sm peer-placeholder-shown:text-dimmed peer-placeholder-shown:top-1.5 peer-placeholder-shown:font-normal\">\r\n      <span class=\"inline-flex bg-default px-1\">Email address</span>\r\n    </label>\r\n  </UInput>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputFloatingLabelExample.vue",
    "pascalName": "InputFloatingLabelExample"
  },
  "InputFormFieldExample": {
    "code": "<script setup lang=\"ts\">\r\nconst email = ref('')\r\n</script>\r\n\r\n<template>\r\n  <UFormField label=\"Email\" help=\"We won't share your email.\" required>\r\n    <UInput v-model=\"email\" placeholder=\"Enter your email\" icon=\"i-lucide-at-sign\" />\r\n  </UFormField>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputFormFieldExample.vue",
    "pascalName": "InputFormFieldExample"
  },
  "InputKbdExample": {
    "code": "<script setup lang=\"ts\">\r\nconst input = useTemplateRef('input')\r\n\r\ndefineShortcuts({\r\n  '/': () => {\r\n    input.value?.inputRef?.focus()\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UInput\r\n    ref=\"input\"\r\n    icon=\"i-lucide-search\"\r\n    placeholder=\"Search...\"\r\n  >\r\n    <template #trailing>\r\n      <UKbd value=\"/\" />\r\n    </template>\r\n  </UInput>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputKbdExample.vue",
    "pascalName": "InputKbdExample"
  },
  "InputMaskExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { vMaska } from 'maska/vue'\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col gap-2\">\r\n    <UInput v-maska=\"'#### #### #### ####'\" placeholder=\"4242 4242 4242 4242\" icon=\"i-lucide-credit-card\" />\r\n\r\n    <div class=\"flex items-center gap-2\">\r\n      <UInput v-maska=\"'##/##'\" placeholder=\"MM/YY\" icon=\"i-lucide-calendar\" />\r\n      <UInput v-maska=\"'###'\" placeholder=\"CVC\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputMaskExample.vue",
    "pascalName": "InputMaskExample"
  },
  "InputPasswordStrengthIndicatorExample": {
    "code": "<script setup lang=\"ts\">\r\nconst show = ref(false)\r\nconst password = ref('')\r\n\r\nfunction checkStrength(str: string) {\r\n  const requirements = [\r\n    { regex: /.{8,}/, text: 'At least 8 characters' },\r\n    { regex: /\\d/, text: 'At least 1 number' },\r\n    { regex: /[a-z]/, text: 'At least 1 lowercase letter' },\r\n    { regex: /[A-Z]/, text: 'At least 1 uppercase letter' }\r\n  ]\r\n\r\n  return requirements.map(req => ({ met: req.regex.test(str), text: req.text }))\r\n}\r\n\r\nconst strength = computed(() => checkStrength(password.value))\r\nconst score = computed(() => strength.value.filter(req => req.met).length)\r\n\r\nconst color = computed(() => {\r\n  if (score.value === 0) return 'neutral'\r\n  if (score.value <= 1) return 'error'\r\n  if (score.value <= 2) return 'warning'\r\n  if (score.value === 3) return 'warning'\r\n  return 'success'\r\n})\r\n\r\nconst text = computed(() => {\r\n  if (score.value === 0) return 'Enter a password'\r\n  if (score.value <= 2) return 'Weak password'\r\n  if (score.value === 3) return 'Medium password'\r\n  return 'Strong password'\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"space-y-2\">\r\n    <UFormField label=\"Password\">\r\n      <UInput\r\n        v-model=\"password\"\r\n        placeholder=\"Password\"\r\n        :color=\"color\"\r\n        :type=\"show ? 'text' : 'password'\"\r\n        :aria-invalid=\"score < 4\"\r\n        aria-describedby=\"password-strength\"\r\n        :ui=\"{ trailing: 'pe-1' }\"\r\n        class=\"w-full\"\r\n      >\r\n        <template #trailing>\r\n          <UButton\r\n            color=\"neutral\"\r\n            variant=\"link\"\r\n            size=\"sm\"\r\n            :icon=\"show ? 'i-lucide-eye-off' : 'i-lucide-eye'\"\r\n            :aria-label=\"show ? 'Hide password' : 'Show password'\"\r\n            :aria-pressed=\"show\"\r\n            aria-controls=\"password\"\r\n            @click=\"show = !show\"\r\n          />\r\n        </template>\r\n      </UInput>\r\n    </UFormField>\r\n\r\n    <UProgress\r\n      :color=\"color\"\r\n      :indicator=\"text\"\r\n      :model-value=\"score\"\r\n      :max=\"4\"\r\n      size=\"sm\"\r\n    />\r\n\r\n    <p id=\"password-strength\" class=\"text-sm font-medium\">\r\n      {{ text }}. Must contain:\r\n    </p>\r\n\r\n    <ul class=\"space-y-1\" aria-label=\"Password requirements\">\r\n      <li\r\n        v-for=\"(req, index) in strength\"\r\n        :key=\"index\"\r\n        class=\"flex items-center gap-0.5\"\r\n        :class=\"req.met ? 'text-success' : 'text-muted'\"\r\n      >\r\n        <UIcon :name=\"req.met ? 'i-lucide-circle-check' : 'i-lucide-circle-x'\" class=\"size-4 shrink-0\" />\r\n\r\n        <span class=\"text-xs font-light\">\r\n          {{ req.text }}\r\n          <span class=\"sr-only\">\r\n            {{ req.met ? ' - Requirement met' : ' - Requirement not met' }}\r\n          </span>\r\n        </span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputPasswordStrengthIndicatorExample.vue",
    "pascalName": "InputPasswordStrengthIndicatorExample"
  },
  "InputPasswordToggleExample": {
    "code": "<script setup lang=\"ts\">\r\nconst show = ref(false)\r\nconst password = ref('')\r\n</script>\r\n\r\n<template>\r\n  <UInput\r\n    v-model=\"password\"\r\n    placeholder=\"Password\"\r\n    :type=\"show ? 'text' : 'password'\"\r\n    :ui=\"{ trailing: 'pe-1' }\"\r\n  >\r\n    <template #trailing>\r\n      <UButton\r\n        color=\"neutral\"\r\n        variant=\"link\"\r\n        size=\"sm\"\r\n        :icon=\"show ? 'i-lucide-eye-off' : 'i-lucide-eye'\"\r\n        :aria-label=\"show ? 'Hide password' : 'Show password'\"\r\n        :aria-pressed=\"show\"\r\n        aria-controls=\"password\"\r\n        @click=\"show = !show\"\r\n      />\r\n    </template>\r\n  </UInput>\r\n</template>\r\n\r\n<style>\r\n/* Hide the password reveal button in Edge */\r\n::-ms-reveal {\r\n    display: none;\r\n}\r\n</style>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/input/InputPasswordToggleExample.vue",
    "pascalName": "InputPasswordToggleExample"
  },
  "ModalCommandPaletteExample": {
    "code": "<script setup lang=\"ts\">\r\nconst searchTerm = ref('')\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'command-palette-users',\r\n  params: { q: searchTerm },\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({ id: user.id, label: user.name, suffix: user.email, avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` } })) || []\r\n  },\r\n  lazy: true\r\n})\r\n\r\nconst groups = computed(() => [{\r\n  id: 'users',\r\n  label: searchTerm.value ? `Users matching “${searchTerm.value}”...` : 'Users',\r\n  items: users.value || [],\r\n  ignoreFilter: true\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UModal>\r\n    <UButton\r\n      label=\"Search users...\"\r\n      color=\"neutral\"\r\n      variant=\"subtle\"\r\n      icon=\"i-lucide-search\"\r\n    />\r\n\r\n    <template #content>\r\n      <UCommandPalette\r\n        v-model:search-term=\"searchTerm\"\r\n        :loading=\"status === 'pending'\"\r\n        :groups=\"groups\"\r\n        placeholder=\"Search users...\"\r\n        class=\"h-80\"\r\n      />\r\n    </template>\r\n  </UModal>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/modal/ModalCommandPaletteExample.vue",
    "pascalName": "ModalCommandPaletteExample"
  },
  "ModalExample": {
    "code": "<script setup lang=\"ts\">\r\ndefineProps<{\r\n  count: number\r\n}>()\r\n\r\nconst emit = defineEmits<{ close: [boolean] }>()\r\n</script>\r\n\r\n<template>\r\n  <UModal :close=\"{ onClick: () => emit('close', false) }\" :title=\"`This modal was opened programmatically ${count} times`\">\r\n    <template #footer>\r\n      <div class=\"flex gap-2\">\r\n        <UButton color=\"neutral\" label=\"Dismiss\" @click=\"emit('close', false)\" />\r\n        <UButton label=\"Success\" @click=\"emit('close', true)\" />\r\n      </div>\r\n    </template>\r\n  </UModal>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/modal/ModalExample.vue",
    "pascalName": "ModalExample"
  },
  "ModalFooterSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UModal v-model:open=\"open\" title=\"Modal with footer\" description=\"This is useful when you want a form in a Modal.\" :ui=\"{ footer: 'justify-end' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n\r\n    <template #body>\r\n      <Placeholder class=\"h-48\" />\r\n    </template>\r\n\r\n    <template #footer=\"{ close }\">\r\n      <UButton label=\"Cancel\" color=\"neutral\" variant=\"outline\" @click=\"close\" />\r\n      <UButton label=\"Submit\" color=\"neutral\" />\r\n    </template>\r\n  </UModal>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/modal/ModalFooterSlotExample.vue",
    "pascalName": "ModalFooterSlotExample"
  },
  "ModalNestedExample": {
    "code": "<script setup lang=\"ts\">\r\nconst first = ref(false)\r\nconst second = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UModal v-model:open=\"first\" title=\"First modal\" :ui=\"{ footer: 'justify-end' }\">\r\n    <UButton color=\"neutral\" variant=\"subtle\" label=\"Open\" />\r\n\r\n    <template #footer>\r\n      <UButton label=\"Close\" color=\"neutral\" variant=\"outline\" @click=\"first = false\" />\r\n\r\n      <UModal v-model:open=\"second\" title=\"Second modal\" :ui=\"{ footer: 'justify-end' }\">\r\n        <UButton label=\"Open second\" color=\"neutral\" />\r\n\r\n        <template #footer>\r\n          <UButton label=\"Close\" color=\"neutral\" variant=\"outline\" @click=\"second = false\" />\r\n        </template>\r\n      </UModal>\r\n    </template>\r\n  </UModal>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/modal/ModalNestedExample.vue",
    "pascalName": "ModalNestedExample"
  },
  "ModalOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UModal v-model:open=\"open\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n\r\n    <template #content>\r\n      <Placeholder class=\"h-48 m-4\" />\r\n    </template>\r\n  </UModal>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/modal/ModalOpenExample.vue",
    "pascalName": "ModalOpenExample"
  },
  "ModalProgrammaticExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { LazyModalExample } from '#components'\r\n\r\nconst count = ref(0)\r\n\r\nconst toast = useToast()\r\nconst overlay = useOverlay()\r\n\r\nconst modal = overlay.create(LazyModalExample)\r\n\r\nasync function open() {\r\n  const instance = modal.open({\r\n    count: count.value\r\n  })\r\n\r\n  const shouldIncrement = await instance.result\r\n\r\n  if (shouldIncrement) {\r\n    count.value++\r\n\r\n    toast.add({\r\n      title: `Success: ${shouldIncrement}`,\r\n      color: 'success',\r\n      id: 'modal-success'\r\n    })\r\n\r\n    // Update the count\r\n    modal.patch({\r\n      count: count.value\r\n    })\r\n    return\r\n  }\r\n\r\n  toast.add({\r\n    title: `Dismissed: ${shouldIncrement}`,\r\n    color: 'error',\r\n    id: 'modal-dismiss'\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" @click=\"open\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/modal/ModalProgrammaticExample.vue",
    "pascalName": "ModalProgrammaticExample"
  },
  "NavigationMenuContentSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { NavigationMenuItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'Docs',\r\n    icon: 'i-lucide-book-open',\r\n    slot: 'docs' as const,\r\n    children: [\r\n      {\r\n        label: 'Icons',\r\n        description: 'You have nothing to do, @nuxt/icon will handle it automatically.'\r\n      },\r\n      {\r\n        label: 'Colors',\r\n        description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\r\n      },\r\n      {\r\n        label: 'Theme',\r\n        description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box',\r\n    slot: 'components' as const,\r\n    children: [\r\n      {\r\n        label: 'Link',\r\n        description: 'Use NuxtLink with superpowers.'\r\n      },\r\n      {\r\n        label: 'Modal',\r\n        description: 'Display a modal within your application.'\r\n      },\r\n      {\r\n        label: 'NavigationMenu',\r\n        description: 'Display a list of links.'\r\n      },\r\n      {\r\n        label: 'Pagination',\r\n        description: 'Display a list of pages.'\r\n      },\r\n      {\r\n        label: 'Popover',\r\n        description: 'Display a non-modal dialog that floats around a trigger element.'\r\n      },\r\n      {\r\n        label: 'Progress',\r\n        description: 'Show a horizontal bar to indicate task progression.'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GitHub',\r\n    icon: 'i-simple-icons-github'\r\n  }\r\n] satisfies NavigationMenuItem[]\r\n</script>\r\n\r\n<template>\r\n  <UNavigationMenu\r\n    :items=\"items\"\r\n    :ui=\"{\r\n      viewport: 'sm:w-(--reka-navigation-menu-viewport-width)',\r\n      content: 'sm:w-auto',\r\n      childList: 'sm:w-96',\r\n      childLinkDescription: 'text-balance line-clamp-2'\r\n    }\"\r\n    class=\"w-full justify-center\"\r\n  >\r\n    <template #docs-content=\"{ item }\">\r\n      <ul class=\"grid gap-2 p-4 lg:w-[500px] lg:grid-cols-[minmax(0,.75fr)_minmax(0,1fr)]\">\r\n        <li class=\"row-span-3\">\r\n          <Placeholder class=\"size-full min-h-48\" />\r\n        </li>\r\n\r\n        <li v-for=\"child in item.children\" :key=\"child.label\">\r\n          <ULink class=\"text-sm text-left rounded-md p-3 transition-colors hover:bg-elevated/50\">\r\n            <p class=\"font-medium text-highlighted\">\r\n              {{ child.label }}\r\n            </p>\r\n            <p class=\"text-muted line-clamp-2\">\r\n              {{ child.description }}\r\n            </p>\r\n          </ULink>\r\n        </li>\r\n      </ul>\r\n    </template>\r\n  </UNavigationMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/navigation-menu/NavigationMenuContentSlotExample.vue",
    "pascalName": "NavigationMenuContentSlotExample"
  },
  "NavigationMenuCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { NavigationMenuItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'Guide',\r\n    icon: 'i-lucide-book-open'\r\n  },\r\n  {\r\n    label: 'Composables',\r\n    icon: 'i-lucide-database'\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box',\r\n    slot: 'components' as const\r\n  }\r\n] satisfies NavigationMenuItem[]\r\n</script>\r\n\r\n<template>\r\n  <UNavigationMenu :items=\"items\" class=\"w-full justify-center\">\r\n    <template #components-trailing>\r\n      <UBadge label=\"44\" variant=\"subtle\" size=\"sm\" />\r\n    </template>\r\n  </UNavigationMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/navigation-menu/NavigationMenuCustomSlotExample.vue",
    "pascalName": "NavigationMenuCustomSlotExample"
  },
  "NavigationMenuModelValueExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { NavigationMenuItem } from '@nuxt/ui'\r\n\r\nconst items: NavigationMenuItem[] = [\r\n  {\r\n    label: 'Guide',\r\n    icon: 'i-lucide-book-open',\r\n    children: [\r\n      {\r\n        label: 'Introduction',\r\n        description: 'Fully styled and customizable components for Nuxt.',\r\n        icon: 'i-lucide-house'\r\n      },\r\n      {\r\n        label: 'Installation',\r\n        description: 'Learn how to install and configure Nuxt UI in your application.',\r\n        icon: 'i-lucide-cloud-download'\r\n      },\r\n      {\r\n        label: 'Icons',\r\n        icon: 'i-lucide-smile',\r\n        description: 'You have nothing to do, @nuxt/icon will handle it automatically.'\r\n      },\r\n      {\r\n        label: 'Colors',\r\n        icon: 'i-lucide-swatch-book',\r\n        description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\r\n      },\r\n      {\r\n        label: 'Theme',\r\n        icon: 'i-lucide-cog',\r\n        description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Composables',\r\n    icon: 'i-lucide-database',\r\n    children: [\r\n      {\r\n        label: 'defineShortcuts',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Define shortcuts for your application.'\r\n      },\r\n      {\r\n        label: 'useOverlay',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Display a modal/slideover within your application.'\r\n      },\r\n      {\r\n        label: 'useToast',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Display a toast within your application.'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Components',\r\n    icon: 'i-lucide-box',\r\n    children: [\r\n      {\r\n        label: 'Link',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Use NuxtLink with superpowers.'\r\n      },\r\n      {\r\n        label: 'Modal',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Display a modal within your application.'\r\n      },\r\n      {\r\n        label: 'NavigationMenu',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Display a list of links.'\r\n      },\r\n      {\r\n        label: 'Pagination',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Display a list of pages.'\r\n      },\r\n      {\r\n        label: 'Popover',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Display a non-modal dialog that floats around a trigger element.'\r\n      },\r\n      {\r\n        label: 'Progress',\r\n        icon: 'i-lucide-file-text',\r\n        description: 'Show a horizontal bar to indicate task progression.'\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nconst active = ref()\r\n\r\ndefineShortcuts({\r\n  1: () => {\r\n    active.value = '0'\r\n  },\r\n  2: () => {\r\n    active.value = '1'\r\n  },\r\n  3: () => {\r\n    active.value = '2'\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UNavigationMenu v-model=\"active\" :items=\"items\" class=\"w-full justify-center\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/navigation-menu/NavigationMenuModelValueExample.vue",
    "pascalName": "NavigationMenuModelValueExample"
  },
  "PaginationLinksExample": {
    "code": "<script setup lang=\"ts\">\r\nconst page = ref(5)\r\n\r\nfunction to(page: number) {\r\n  return {\r\n    query: {\r\n      page\r\n    },\r\n    hash: '#with-links'\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UPagination v-model:page=\"page\" :total=\"100\" :to=\"to\" :sibling-count=\"1\" show-edges />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/pagination/PaginationLinksExample.vue",
    "pascalName": "PaginationLinksExample"
  },
  "PopoverAnchorSlotExample": {
    "code": "<script lang=\"ts\" setup>\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UPopover\r\n    v-model:open=\"open\"\r\n    :dismissible=\"false\"\r\n    :ui=\"{ content: 'w-(--reka-popper-anchor-width) p-4' }\"\r\n  >\r\n    <template #anchor>\r\n      <UInput placeholder=\"Focus to open\" @focus=\"open = true\" @blur=\"open = false\" />\r\n    </template>\r\n\r\n    <template #content>\r\n      <Placeholder class=\"w-full aspect-square\" />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/popover/PopoverAnchorSlotExample.vue",
    "pascalName": "PopoverAnchorSlotExample"
  },
  "PopoverCommandPaletteExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref([\r\n  {\r\n    label: 'bug',\r\n    value: 'bug',\r\n    chip: {\r\n      color: 'error' as const\r\n    }\r\n  },\r\n  {\r\n    label: 'feature',\r\n    value: 'feature',\r\n    chip: {\r\n      color: 'success' as const\r\n    }\r\n  },\r\n  {\r\n    label: 'enhancement',\r\n    value: 'enhancement',\r\n    chip: {\r\n      color: 'info' as const\r\n    }\r\n  }\r\n])\r\nconst label = ref([])\r\n</script>\r\n\r\n<template>\r\n  <UPopover :content=\"{ side: 'right', align: 'start' }\">\r\n    <UButton\r\n      icon=\"i-lucide-tag\"\r\n      label=\"Select labels\"\r\n      color=\"neutral\"\r\n      variant=\"subtle\"\r\n    />\r\n\r\n    <template #content>\r\n      <UCommandPalette\r\n        v-model=\"label\"\r\n        multiple\r\n        placeholder=\"Search labels...\"\r\n        :groups=\"[{ id: 'labels', items }]\"\r\n        :ui=\"{ input: '[&>input]:h-8 [&>input]:text-sm' }\"\r\n      />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/popover/PopoverCommandPaletteExample.vue",
    "pascalName": "PopoverCommandPaletteExample"
  },
  "PopoverCursorExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\nconst anchor = ref({ x: 0, y: 0 })\r\n\r\nconst reference = computed(() => ({\r\n  getBoundingClientRect: () =>\r\n    ({\r\n      width: 0,\r\n      height: 0,\r\n      left: anchor.value.x,\r\n      right: anchor.value.x,\r\n      top: anchor.value.y,\r\n      bottom: anchor.value.y,\r\n      ...anchor.value\r\n    } as DOMRect)\r\n}))\r\n</script>\r\n\r\n<template>\r\n  <UPopover\r\n    :open=\"open\"\r\n    :reference=\"reference\"\r\n    :content=\"{ side: 'top', sideOffset: 16, updatePositionStrategy: 'always' }\"\r\n  >\r\n    <div\r\n      class=\"flex items-center justify-center rounded-md border border-dashed border-accented text-sm aspect-video w-72\"\r\n      @pointerenter=\"open = true\"\r\n      @pointerleave=\"open = false\"\r\n      @pointermove=\"(ev) => {\r\n        anchor.x = ev.clientX\r\n        anchor.y = ev.clientY\r\n      }\"\r\n    >\r\n      Hover me\r\n    </div>\r\n\r\n    <template #content>\r\n      <div class=\"p-4\">\r\n        {{ anchor.x.toFixed(0) }} - {{ anchor.y.toFixed(0) }}\r\n      </div>\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/popover/PopoverCursorExample.vue",
    "pascalName": "PopoverCursorExample"
  },
  "PopoverDismissibleExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <UPopover v-model:open=\"open\" :dismissible=\"false\" :ui=\"{ content: 'p-4' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n\r\n    <template #content>\r\n      <div class=\"flex items-center gap-4 mb-4\">\r\n        <h2 class=\"text-highlighted font-semibold\">\r\n          Popover non-dismissible\r\n        </h2>\r\n\r\n        <UButton color=\"neutral\" variant=\"ghost\" icon=\"i-lucide-x\" @click=\"open = false\" />\r\n      </div>\r\n\r\n      <Placeholder class=\"size-full min-h-48\" />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/popover/PopoverDismissibleExample.vue",
    "pascalName": "PopoverDismissibleExample"
  },
  "PopoverOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UPopover v-model:open=\"open\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n\r\n    <template #content>\r\n      <Placeholder class=\"size-48 m-4 inline-flex\" />\r\n    </template>\r\n  </UPopover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/popover/PopoverOpenExample.vue",
    "pascalName": "PopoverOpenExample"
  },
  "SelectMenuContentWidthExample": {
    "code": "<script setup lang=\"ts\">\r\nconst { data: users } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users-email',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      email: user.email,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    :items=\"users\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    :ui=\"{ content: 'min-w-fit' }\"\r\n    class=\"w-48\"\r\n  >\r\n    <template #item-label=\"{ item }\">\r\n      {{ item.label }}\r\n\r\n      <span class=\"text-muted\">\r\n        {{ item.email }}\r\n      </span>\r\n    </template>\r\n  </USelectMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuContentWidthExample.vue",
    "pascalName": "SelectMenuContentWidthExample"
  },
  "SelectMenuCountriesExample": {
    "code": "<script setup lang=\"ts\">\r\nconst { data: countries, status, execute } = await useLazyFetch<{\r\n  name: string\r\n  code: string\r\n  emoji: string\r\n}[]>('/api/countries.json', {\r\n  immediate: false\r\n})\r\n\r\nfunction onOpen() {\r\n  if (!countries.value?.length) {\r\n    execute()\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    :items=\"countries\"\r\n    :loading=\"status === 'pending'\"\r\n    label-key=\"name\"\r\n    :search-input=\"{ icon: 'i-lucide-search' }\"\r\n    placeholder=\"Select country\"\r\n    class=\"w-48\"\r\n    @update:open=\"onOpen\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <span v-if=\"modelValue\" class=\"size-5 text-center\">\r\n        {{ modelValue?.emoji }}\r\n      </span>\r\n      <UIcon v-else name=\"i-lucide-earth\" :class=\"ui.leadingIcon()\" />\r\n    </template>\r\n    <template #item-leading=\"{ item }\">\r\n      <span class=\"size-5 text-center\">\r\n        {{ item.emoji }}\r\n      </span>\r\n    </template>\r\n  </USelectMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuCountriesExample.vue",
    "pascalName": "SelectMenuCountriesExample"
  },
  "SelectMenuCreateItemExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n\r\nfunction onCreate(item: string) {\r\n  items.value.push(item)\r\n\r\n  value.value = item\r\n}\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    v-model=\"value\"\r\n    create-item\r\n    :items=\"items\"\r\n    class=\"w-48\"\r\n    @create=\"onCreate\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuCreateItemExample.vue",
    "pascalName": "SelectMenuCreateItemExample"
  },
  "SelectMenuFetchExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users',\r\n  transform: (data: { id: number, name: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    class=\"w-48\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.avatar\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n  </USelectMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuFetchExample.vue",
    "pascalName": "SelectMenuFetchExample"
  },
  "SelectMenuFilterFieldsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users-email',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      email: user.email,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    :filter-fields=\"['label', 'email']\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    class=\"w-80\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.avatar\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n\r\n    <template #item-label=\"{ item }\">\r\n      {{ item.label }}\r\n\r\n      <span class=\"text-muted\">\r\n        {{ item.email }}\r\n      </span>\r\n    </template>\r\n  </USelectMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuFilterFieldsExample.vue",
    "pascalName": "SelectMenuFilterFieldsExample"
  },
  "SelectMenuIconExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    v-model=\"value\"\r\n    :items=\"items\"\r\n    :ui=\"{\r\n      trailingIcon: 'group-data-[state=open]:rotate-180 transition-transform duration-200'\r\n    }\"\r\n    class=\"w-48\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuIconExample.vue",
    "pascalName": "SelectMenuIconExample"
  },
  "SelectMenuIgnoreFilterExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { refDebounced } from '@vueuse/core'\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst searchTerm = ref('')\r\nconst searchTermDebounced = refDebounced(searchTerm, 200)\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  params: { q: searchTermDebounced },\r\n  transform: (data: { id: number, name: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu\r\n    v-model:search-term=\"searchTerm\"\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    ignore-filter\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    class=\"w-48\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.avatar\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n  </USelectMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuIgnoreFilterExample.vue",
    "pascalName": "SelectMenuIgnoreFilterExample"
  },
  "SelectMenuItemsAvatarExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { SelectMenuItem } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'benjamincanac',\r\n    value: 'benjamincanac',\r\n    avatar: {\r\n      src: 'https://github.com/benjamincanac.png',\r\n      alt: 'benjamincanac'\r\n    }\r\n  },\r\n  {\r\n    label: 'romhml',\r\n    value: 'romhml',\r\n    avatar: {\r\n      src: 'https://github.com/romhml.png',\r\n      alt: 'romhml'\r\n    }\r\n  },\r\n  {\r\n    label: 'noook',\r\n    value: 'noook',\r\n    avatar: {\r\n      src: 'https://github.com/noook.png',\r\n      alt: 'noook'\r\n    }\r\n  },\r\n  {\r\n    label: 'sandros94',\r\n    value: 'sandros94',\r\n    avatar: {\r\n      src: 'https://github.com/sandros94.png',\r\n      alt: 'sandros94'\r\n    }\r\n  }\r\n] satisfies SelectMenuItem[])\r\n\r\nconst value = ref(items.value[0])\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu v-model=\"value\" :avatar=\"value?.avatar\" :items=\"items\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuItemsAvatarExample.vue",
    "pascalName": "SelectMenuItemsAvatarExample"
  },
  "SelectMenuItemsChipExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { SelectMenuItem, ChipProps } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'bug',\r\n    value: 'bug',\r\n    chip: {\r\n      color: 'error'\r\n    }\r\n  },\r\n  {\r\n    label: 'feature',\r\n    value: 'feature',\r\n    chip: {\r\n      color: 'success'\r\n    }\r\n  },\r\n  {\r\n    label: 'enhancement',\r\n    value: 'enhancement',\r\n    chip: {\r\n      color: 'info'\r\n    }\r\n  }\r\n] satisfies SelectMenuItem[])\r\n\r\nconst value = ref(items.value[0])\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu v-model=\"value\" :items=\"items\" class=\"w-48\">\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UChip\r\n        v-if=\"modelValue\"\r\n        v-bind=\"modelValue.chip\"\r\n        inset\r\n        standalone\r\n        :size=\"(ui.itemLeadingChipSize() as ChipProps['size'])\"\r\n        :class=\"ui.itemLeadingChip()\"\r\n      />\r\n    </template>\r\n  </USelectMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuItemsChipExample.vue",
    "pascalName": "SelectMenuItemsChipExample"
  },
  "SelectMenuItemsIconExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { SelectMenuItem } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'Backlog',\r\n    value: 'backlog',\r\n    icon: 'i-lucide-circle-help'\r\n  },\r\n  {\r\n    label: 'Todo',\r\n    value: 'todo',\r\n    icon: 'i-lucide-circle-plus'\r\n  },\r\n  {\r\n    label: 'In Progress',\r\n    value: 'in_progress',\r\n    icon: 'i-lucide-circle-arrow-up'\r\n  },\r\n  {\r\n    label: 'Done',\r\n    value: 'done',\r\n    icon: 'i-lucide-circle-check'\r\n  }\r\n] satisfies SelectMenuItem[])\r\n\r\nconst value = ref(items.value[0])\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu v-model=\"value\" :icon=\"value?.icon\" :items=\"items\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuItemsIconExample.vue",
    "pascalName": "SelectMenuItemsIconExample"
  },
  "SelectMenuOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu v-model=\"value\" v-model:open=\"open\" :items=\"items\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuOpenExample.vue",
    "pascalName": "SelectMenuOpenExample"
  },
  "SelectMenuSearchTermExample": {
    "code": "<script setup lang=\"ts\">\r\nconst searchTerm = ref('D')\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n</script>\r\n\r\n<template>\r\n  <USelectMenu v-model=\"value\" v-model:search-term=\"searchTerm\" :items=\"items\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select-menu/SelectMenuSearchTermExample.vue",
    "pascalName": "SelectMenuSearchTermExample"
  },
  "SelectContentWidthExample": {
    "code": "<script setup lang=\"ts\">\r\nconst value = ref<string>()\r\n\r\nconst { data: users } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users-email',\r\n  transform: (data: { id: number, name: string, email: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      email: user.email,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelect\r\n    v-model=\"value\"\r\n    :items=\"users\"\r\n    placeholder=\"Select user\"\r\n    value-key=\"value\"\r\n    :ui=\"{ content: 'min-w-fit' }\"\r\n    class=\"w-48\"\r\n  >\r\n    <template #item-label=\"{ item }\">\r\n      {{ item.label }}\r\n\r\n      <span class=\"text-muted\">\r\n        {{ item.email }}\r\n      </span>\r\n    </template>\r\n  </USelect>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectContentWidthExample.vue",
    "pascalName": "SelectContentWidthExample"
  },
  "SelectFetchExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst { data: users, status } = await useFetch('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'typicode-users',\r\n  transform: (data: { id: number, name: string }[]) => {\r\n    return data?.map(user => ({\r\n      label: user.name,\r\n      value: String(user.id),\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}` }\r\n    }))\r\n  },\r\n  lazy: true\r\n})\r\n\r\nfunction getUserAvatar(value: string) {\r\n  return users.value?.find(user => user.value === value)?.avatar || {}\r\n}\r\n</script>\r\n\r\n<template>\r\n  <USelect\r\n    :items=\"users\"\r\n    :loading=\"status === 'pending'\"\r\n    icon=\"i-lucide-user\"\r\n    placeholder=\"Select user\"\r\n    value-key=\"value\"\r\n    class=\"w-48\"\r\n  >\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UAvatar\r\n        v-if=\"modelValue\"\r\n        v-bind=\"getUserAvatar(modelValue)\"\r\n        :size=\"(ui.leadingAvatarSize() as AvatarProps['size'])\"\r\n        :class=\"ui.leadingAvatar()\"\r\n      />\r\n    </template>\r\n  </USelect>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectFetchExample.vue",
    "pascalName": "SelectFetchExample"
  },
  "SelectIconExample": {
    "code": "<script setup lang=\"ts\">\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n</script>\r\n\r\n<template>\r\n  <USelect\r\n    v-model=\"value\"\r\n    :items=\"items\"\r\n    :ui=\"{\r\n      trailingIcon: 'group-data-[state=open]:rotate-180 transition-transform duration-200'\r\n    }\"\r\n    class=\"w-48\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectIconExample.vue",
    "pascalName": "SelectIconExample"
  },
  "SelectItemsAvatarExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { SelectItem } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'benjamincanac',\r\n    value: 'benjamincanac',\r\n    avatar: {\r\n      src: 'https://github.com/benjamincanac.png',\r\n      alt: 'benjamincanac'\r\n    }\r\n  },\r\n  {\r\n    label: 'romhml',\r\n    value: 'romhml',\r\n    avatar: {\r\n      src: 'https://github.com/romhml.png',\r\n      alt: 'romhml'\r\n    }\r\n  },\r\n  {\r\n    label: 'noook',\r\n    value: 'noook',\r\n    avatar: {\r\n      src: 'https://github.com/noook.png',\r\n      alt: 'noook'\r\n    }\r\n  },\r\n  {\r\n    label: 'sandros94',\r\n    value: 'sandros94',\r\n    avatar: {\r\n      src: 'https://github.com/sandros94.png',\r\n      alt: 'sandros94'\r\n    }\r\n  }\r\n] satisfies SelectItem[])\r\n\r\nconst value = ref(items.value[0]?.value)\r\n\r\nconst avatar = computed(() => items.value.find(item => item.value === value.value)?.avatar)\r\n</script>\r\n\r\n<template>\r\n  <USelect v-model=\"value\" :items=\"items\" value-key=\"value\" :avatar=\"avatar\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectItemsAvatarExample.vue",
    "pascalName": "SelectItemsAvatarExample"
  },
  "SelectItemsChipExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { SelectItem, ChipProps } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'bug',\r\n    value: 'bug',\r\n    chip: {\r\n      color: 'error'\r\n    }\r\n  },\r\n  {\r\n    label: 'feature',\r\n    value: 'feature',\r\n    chip: {\r\n      color: 'success'\r\n    }\r\n  },\r\n  {\r\n    label: 'enhancement',\r\n    value: 'enhancement',\r\n    chip: {\r\n      color: 'info'\r\n    }\r\n  }\r\n] satisfies SelectItem[])\r\n\r\nconst value = ref(items.value[0]?.value)\r\n\r\nfunction getChip(value: string) {\r\n  return items.value.find(item => item.value === value)?.chip\r\n}\r\n</script>\r\n\r\n<template>\r\n  <USelect v-model=\"value\" :items=\"items\" value-key=\"value\" class=\"w-48\">\r\n    <template #leading=\"{ modelValue, ui }\">\r\n      <UChip\r\n        v-if=\"modelValue\"\r\n        v-bind=\"getChip(modelValue)\"\r\n        inset\r\n        standalone\r\n        :size=\"(ui.itemLeadingChipSize() as ChipProps['size'])\"\r\n        :class=\"ui.itemLeadingChip()\"\r\n      />\r\n    </template>\r\n  </USelect>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectItemsChipExample.vue",
    "pascalName": "SelectItemsChipExample"
  },
  "SelectItemsIconExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { SelectItem } from '@nuxt/ui'\r\n\r\nconst items = ref([\r\n  {\r\n    label: 'Backlog',\r\n    value: 'backlog',\r\n    icon: 'i-lucide-circle-help'\r\n  },\r\n  {\r\n    label: 'Todo',\r\n    value: 'todo',\r\n    icon: 'i-lucide-circle-plus'\r\n  },\r\n  {\r\n    label: 'In Progress',\r\n    value: 'in_progress',\r\n    icon: 'i-lucide-circle-arrow-up'\r\n  },\r\n  {\r\n    label: 'Done',\r\n    value: 'done',\r\n    icon: 'i-lucide-circle-check'\r\n  }\r\n] satisfies SelectItem[])\r\n\r\nconst value = ref(items.value[0]?.value)\r\n\r\nconst icon = computed(() => items.value.find(item => item.value === value.value)?.icon)\r\n</script>\r\n\r\n<template>\r\n  <USelect v-model=\"value\" :items=\"items\" value-key=\"value\" :icon=\"icon\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectItemsIconExample.vue",
    "pascalName": "SelectItemsIconExample"
  },
  "SelectOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\nconst items = ref(['Backlog', 'Todo', 'In Progress', 'Done'])\r\nconst value = ref('Backlog')\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USelect v-model=\"value\" v-model:open=\"open\" :items=\"items\" class=\"w-48\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/select/SelectOpenExample.vue",
    "pascalName": "SelectOpenExample"
  },
  "SkeletonExample": {
    "code": "<template>\r\n  <div class=\"flex items-center gap-4\">\r\n    <USkeleton class=\"h-12 w-12 rounded-full\" />\r\n\r\n    <div class=\"grid gap-2\">\r\n      <USkeleton class=\"h-4 w-[250px]\" />\r\n      <USkeleton class=\"h-4 w-[200px]\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/skeleton/SkeletonExample.vue",
    "pascalName": "SkeletonExample"
  },
  "SlideoverExample": {
    "code": "<script setup lang=\"ts\">\r\ndefineProps<{\r\n  count: number\r\n}>()\r\n\r\nconst emit = defineEmits<{ close: [boolean] }>()\r\n</script>\r\n\r\n<template>\r\n  <USlideover :close=\"{ onClick: () => emit('close', false) }\" :description=\"`This slideover was opened programmatically ${count} times`\">\r\n    <template #body>\r\n      <Placeholder class=\"h-full\" />\r\n    </template>\r\n\r\n    <template #footer>\r\n      <div class=\"flex gap-2\">\r\n        <UButton color=\"neutral\" label=\"Dismiss\" @click=\"emit('close', false)\" />\r\n        <UButton label=\"Success\" @click=\"emit('close', true)\" />\r\n      </div>\r\n    </template>\r\n  </USlideover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/slideover/SlideoverExample.vue",
    "pascalName": "SlideoverExample"
  },
  "SlideoverFooterSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <USlideover v-model:open=\"open\" title=\"Slideover with footer\" description=\"This is useful when you want a form in a Slideover.\" :ui=\"{ footer: 'justify-end' }\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n\r\n    <template #body>\r\n      <Placeholder class=\"h-full\" />\r\n    </template>\r\n\r\n    <template #footer=\"{ close }\">\r\n      <UButton label=\"Cancel\" color=\"neutral\" variant=\"outline\" @click=\"close\" />\r\n      <UButton label=\"Submit\" color=\"neutral\" />\r\n    </template>\r\n  </USlideover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/slideover/SlideoverFooterSlotExample.vue",
    "pascalName": "SlideoverFooterSlotExample"
  },
  "SlideoverNestedExample": {
    "code": "<script setup lang=\"ts\">\r\nconst first = ref(false)\r\nconst second = ref(false)\r\n</script>\r\n\r\n<template>\r\n  <USlideover v-model:open=\"first\" title=\"First slideover\" :ui=\"{ footer: 'justify-end' }\">\r\n    <UButton color=\"neutral\" variant=\"subtle\" label=\"Open\" />\r\n\r\n    <template #body>\r\n      <Placeholder class=\"h-full\" />\r\n    </template>\r\n\r\n    <template #footer>\r\n      <UButton label=\"Close\" color=\"neutral\" variant=\"outline\" @click=\"first = false\" />\r\n\r\n      <USlideover v-model:open=\"second\" title=\"Second slideover\" :ui=\"{ footer: 'justify-end' }\">\r\n        <UButton label=\"Open second\" color=\"neutral\" />\r\n\r\n        <template #body>\r\n          <Placeholder class=\"h-full\" />\r\n        </template>\r\n\r\n        <template #footer>\r\n          <UButton label=\"Close\" color=\"neutral\" variant=\"outline\" @click=\"second = false\" />\r\n        </template>\r\n      </USlideover>\r\n    </template>\r\n  </USlideover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/slideover/SlideoverNestedExample.vue",
    "pascalName": "SlideoverNestedExample"
  },
  "SlideoverOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <USlideover v-model:open=\"open\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n\r\n    <template #content>\r\n      <Placeholder class=\"h-full m-4\" />\r\n    </template>\r\n  </USlideover>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/slideover/SlideoverOpenExample.vue",
    "pascalName": "SlideoverOpenExample"
  },
  "SlideoverProgrammaticExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { LazySlideoverExample } from '#components'\r\n\r\nconst count = ref(0)\r\n\r\nconst toast = useToast()\r\nconst overlay = useOverlay()\r\n\r\nconst slideover = overlay.create(LazySlideoverExample)\r\n\r\nasync function open() {\r\n  const instance = slideover.open({\r\n    count: count.value\r\n  })\r\n\r\n  const shouldIncrement = await instance.result\r\n\r\n  if (shouldIncrement) {\r\n    count.value++\r\n\r\n    toast.add({\r\n      title: `Success: ${shouldIncrement}`,\r\n      color: 'success',\r\n      id: 'slideover-success'\r\n    })\r\n\r\n    // Update the count\r\n    slideover.patch({\r\n      count: count.value\r\n    })\r\n    return\r\n  }\r\n\r\n  toast.add({\r\n    title: `Dismissed: ${shouldIncrement}`,\r\n    color: 'error',\r\n    id: 'slideover-dismiss'\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" @click=\"open\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/slideover/SlideoverProgrammaticExample.vue",
    "pascalName": "SlideoverProgrammaticExample"
  },
  "StepperContentSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { StepperItem } from '@nuxt/ui'\r\n\r\nconst items: StepperItem[] = [\r\n  {\r\n    title: 'Address',\r\n    description: 'Add your address here',\r\n    icon: 'i-lucide-house'\r\n  }, {\r\n    title: 'Shipping',\r\n    description: 'Set your preferred shipping method',\r\n    icon: 'i-lucide-truck'\r\n  }, {\r\n    title: 'Checkout',\r\n    description: 'Confirm your order'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UStepper ref=\"stepper\" :items=\"items\" class=\"w-full\">\r\n    <template #content=\"{ item }\">\r\n      <Placeholder class=\"aspect-video\">\r\n        This is the {{ item?.title }} step.\r\n      </Placeholder>\r\n    </template>\r\n  </UStepper>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/stepper/StepperContentSlotExample.vue",
    "pascalName": "StepperContentSlotExample"
  },
  "StepperCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { StepperItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    slot: 'address' as const,\r\n    title: 'Address',\r\n    description: 'Add your address here',\r\n    icon: 'i-lucide-house'\r\n  }, {\r\n    slot: 'shipping' as const,\r\n    title: 'Shipping',\r\n    description: 'Set your preferred shipping method',\r\n    icon: 'i-lucide-truck'\r\n  }, {\r\n    slot: 'checkout' as const,\r\n    title: 'Checkout',\r\n    description: 'Confirm your order'\r\n  }\r\n] satisfies StepperItem[]\r\n</script>\r\n\r\n<template>\r\n  <UStepper :items=\"items\" class=\"w-full\">\r\n    <template #address>\r\n      <Placeholder class=\"aspect-video\">\r\n        Address\r\n      </Placeholder>\r\n    </template>\r\n\r\n    <template #shipping>\r\n      <Placeholder class=\"aspect-video\">\r\n        Shipping\r\n      </Placeholder>\r\n    </template>\r\n\r\n    <template #checkout>\r\n      <Placeholder class=\"aspect-video\">\r\n        Checkout\r\n      </Placeholder>\r\n    </template>\r\n  </UStepper>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/stepper/StepperCustomSlotExample.vue",
    "pascalName": "StepperCustomSlotExample"
  },
  "StepperModelValueExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { StepperItem } from '@nuxt/ui'\r\nimport { onMounted, ref } from 'vue'\r\n\r\nconst items: StepperItem[] = [\r\n  {\r\n    title: 'Address',\r\n    description: 'Add your address here',\r\n    icon: 'i-lucide-house'\r\n  }, {\r\n    title: 'Shipping',\r\n    description: 'Set your preferred shipping method',\r\n    icon: 'i-lucide-truck'\r\n  }, {\r\n    title: 'Checkout',\r\n    description: 'Confirm your order'\r\n  }\r\n]\r\n\r\nconst active = ref(0)\r\n\r\n// Note: This is for demonstration purposes only. Don't do this at home.\r\nonMounted(() => {\r\n  setInterval(() => {\r\n    active.value = (active.value + 1) % items.length\r\n  }, 2000)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UStepper v-model=\"active\" :items=\"items\" class=\"w-full\">\r\n    <template #content=\"{ item }\">\r\n      <Placeholder class=\"aspect-video\">\r\n        This is the {{ item?.title }} step.\r\n      </Placeholder>\r\n    </template>\r\n  </UStepper>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/stepper/StepperModelValueExample.vue",
    "pascalName": "StepperModelValueExample"
  },
  "StepperWithControlsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { StepperItem } from '@nuxt/ui'\r\n\r\nconst items: StepperItem[] = [\r\n  {\r\n    title: 'Address',\r\n    description: 'Add your address here',\r\n    icon: 'i-lucide-house'\r\n  }, {\r\n    title: 'Shipping',\r\n    description: 'Set your preferred shipping method',\r\n    icon: 'i-lucide-truck'\r\n  }, {\r\n    title: 'Checkout',\r\n    description: 'Confirm your order'\r\n  }\r\n]\r\n\r\nconst stepper = useTemplateRef('stepper')\r\n</script>\r\n\r\n<template>\r\n  <div class=\"w-full\">\r\n    <UStepper ref=\"stepper\" :items=\"items\">\r\n      <template #content=\"{ item }\">\r\n        <Placeholder class=\"aspect-video\">\r\n          {{ item.title }}\r\n        </Placeholder>\r\n      </template>\r\n    </UStepper>\r\n\r\n    <div class=\"flex gap-2 justify-between mt-4\">\r\n      <UButton\r\n        leading-icon=\"i-lucide-arrow-left\"\r\n        :disabled=\"!stepper?.hasPrev\"\r\n        @click=\"stepper?.prev()\"\r\n      >\r\n        Prev\r\n      </UButton>\r\n\r\n      <UButton\r\n        trailing-icon=\"i-lucide-arrow-right\"\r\n        :disabled=\"!stepper?.hasNext\"\r\n        @click=\"stepper?.next()\"\r\n      >\r\n        Next\r\n      </UButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/stepper/StepperWithControlsExample.vue",
    "pascalName": "StepperWithControlsExample"
  },
  "TableColumnFiltersExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst table = useTemplateRef('table')\r\n\r\nconst columnFilters = ref([{\r\n  id: 'email',\r\n  value: 'james'\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col flex-1 w-full\">\r\n    <div class=\"flex px-4 py-3.5 border-b border-accented\">\r\n      <UInput\r\n        :model-value=\"(table?.tableApi?.getColumn('email')?.getFilterValue() as string)\"\r\n        class=\"max-w-sm\"\r\n        placeholder=\"Filter emails...\"\r\n        @update:model-value=\"table?.tableApi?.getColumn('email')?.setFilterValue($event)\"\r\n      />\r\n    </div>\r\n\r\n    <UTable\r\n      ref=\"table\"\r\n      v-model:column-filters=\"columnFilters\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n    />\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnFiltersExample.vue",
    "pascalName": "TableColumnFiltersExample"
  },
  "TableColumnFooterExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn, TableRow } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  footer: ({ column }) => {\r\n    const total = column.getFacetedRowModel().rows.reduce((acc: number, row: TableRow<Payment>) => acc + Number.parseFloat(row.getValue('amount')), 0)\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(total)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, `Total: ${formatted}`)\r\n  },\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n</script>\r\n\r\n<template>\r\n  <UTable :data=\"data\" :columns=\"columns\" class=\"flex-1\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnFooterExample.vue",
    "pascalName": "TableColumnFooterExample"
  },
  "TableColumnPinningExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport type { Column } from '@tanstack/vue-table'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UButton = resolveComponent('UButton')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '46000000000000000000000000000000000000000',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594000\r\n}, {\r\n  id: '45990000000000000000000000000000000000000',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276000\r\n}, {\r\n  id: '45980000000000000000000000000000000000000',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315000\r\n}, {\r\n  id: '45970000000000000000000000000000000000000',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 5290000\r\n}, {\r\n  id: '45960000000000000000000000000000000000000',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639000\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: ({ column }) => getHeader(column, 'ID', 'left'),\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: ({ column }) => getHeader(column, 'Date', 'left')\r\n}, {\r\n  accessorKey: 'status',\r\n  header: ({ column }) => getHeader(column, 'Status', 'left'),\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: ({ column }) => getHeader(column, 'Email', 'left')\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: ({ column }) => h('div', { class: 'text-right' }, getHeader(column, 'Amount', 'right')),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nfunction getHeader(column: Column<Payment>, label: string, position: 'left' | 'right') {\r\n  const isPinned = column.getIsPinned()\r\n\r\n  return h(UButton, {\r\n    color: 'neutral',\r\n    variant: 'ghost',\r\n    label,\r\n    icon: isPinned ? 'i-lucide-pin-off' : 'i-lucide-pin',\r\n    class: '-mx-2.5',\r\n    onClick() {\r\n      column.pin(isPinned === position ? false : position)\r\n    }\r\n  })\r\n}\r\n\r\nconst columnPinning = ref({\r\n  left: [],\r\n  right: ['amount']\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UTable\r\n    v-model:column-pinning=\"columnPinning\"\r\n    :data=\"data\"\r\n    :columns=\"columns\"\r\n    class=\"flex-1\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnPinningExample.vue",
    "pascalName": "TableColumnPinningExample"
  },
  "TableColumnSortingExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UButton = resolveComponent('UButton')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: ({ column }) => {\r\n    const isSorted = column.getIsSorted()\r\n\r\n    return h(UButton, {\r\n      color: 'neutral',\r\n      variant: 'ghost',\r\n      label: 'Email',\r\n      icon: isSorted ? (isSorted === 'asc' ? 'i-lucide-arrow-up-narrow-wide' : 'i-lucide-arrow-down-wide-narrow') : 'i-lucide-arrow-up-down',\r\n      class: '-mx-2.5',\r\n      onClick: () => column.toggleSorting(column.getIsSorted() === 'asc')\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst sorting = ref([{\r\n  id: 'email',\r\n  desc: false\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UTable\r\n    v-model:sorting=\"sorting\"\r\n    :data=\"data\"\r\n    :columns=\"columns\"\r\n    class=\"flex-1\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnSortingExample.vue",
    "pascalName": "TableColumnSortingExample"
  },
  "TableColumnSortingReusableExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport type { Column } from '@tanstack/vue-table'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UButton = resolveComponent('UButton')\r\nconst UDropdownMenu = resolveComponent('UDropdownMenu')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: ({ column }) => getHeader(column, 'ID'),\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: ({ column }) => getHeader(column, 'Date'),\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: ({ column }) => getHeader(column, 'Status'),\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: ({ column }) => getHeader(column, 'Email')\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: ({ column }) => h('div', { class: 'text-right' }, getHeader(column, 'Amount')),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nfunction getHeader(column: Column<Payment>, label: string) {\r\n  const isSorted = column.getIsSorted()\r\n\r\n  return h(UDropdownMenu, {\r\n    'content': {\r\n      align: 'start'\r\n    },\r\n    'aria-label': 'Actions dropdown',\r\n    'items': [{\r\n      label: 'Asc',\r\n      type: 'checkbox',\r\n      icon: 'i-lucide-arrow-up-narrow-wide',\r\n      checked: isSorted === 'asc',\r\n      onSelect: () => {\r\n        if (isSorted === 'asc') {\r\n          column.clearSorting()\r\n        } else {\r\n          column.toggleSorting(false)\r\n        }\r\n      }\r\n    }, {\r\n      label: 'Desc',\r\n      icon: 'i-lucide-arrow-down-wide-narrow',\r\n      type: 'checkbox',\r\n      checked: isSorted === 'desc',\r\n      onSelect: () => {\r\n        if (isSorted === 'desc') {\r\n          column.clearSorting()\r\n        } else {\r\n          column.toggleSorting(true)\r\n        }\r\n      }\r\n    }]\r\n  }, () => h(UButton, {\r\n    'color': 'neutral',\r\n    'variant': 'ghost',\r\n    label,\r\n    'icon': isSorted ? (isSorted === 'asc' ? 'i-lucide-arrow-up-narrow-wide' : 'i-lucide-arrow-down-wide-narrow') : 'i-lucide-arrow-up-down',\r\n    'class': '-mx-2.5 data-[state=open]:bg-elevated',\r\n    'aria-label': `Sort by ${isSorted === 'asc' ? 'descending' : 'ascending'}`\r\n  }))\r\n}\r\n\r\nconst sorting = ref([{\r\n  id: 'id',\r\n  desc: false\r\n}])\r\n</script>\r\n\r\n<template>\r\n  <UTable\r\n    v-model:sorting=\"sorting\"\r\n    :data=\"data\"\r\n    :columns=\"columns\"\r\n    class=\"flex-1\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnSortingReusableExample.vue",
    "pascalName": "TableColumnSortingReusableExample"
  },
  "TableColumnVisibilityExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport { upperFirst } from 'scule'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst table = useTemplateRef('table')\r\n\r\nconst columnVisibility = ref({\r\n  id: false\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col flex-1 w-full\">\r\n    <div class=\"flex justify-end px-4 py-3.5 border-b  border-accented\">\r\n      <UDropdownMenu\r\n        :items=\"table?.tableApi?.getAllColumns().filter(column => column.getCanHide()).map(column => ({\r\n          label: upperFirst(column.id),\r\n          type: 'checkbox' as const,\r\n          checked: column.getIsVisible(),\r\n          onUpdateChecked(checked: boolean) {\r\n            table?.tableApi?.getColumn(column.id)?.toggleVisibility(!!checked)\r\n          },\r\n          onSelect(e?: Event) {\r\n            e?.preventDefault()\r\n          }\r\n        }))\"\r\n        :content=\"{ align: 'end' }\"\r\n      >\r\n        <UButton\r\n          label=\"Columns\"\r\n          color=\"neutral\"\r\n          variant=\"outline\"\r\n          trailing-icon=\"i-lucide-chevron-down\"\r\n        />\r\n      </UDropdownMenu>\r\n    </div>\r\n\r\n    <UTable\r\n      ref=\"table\"\r\n      v-model:column-visibility=\"columnVisibility\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n    />\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnVisibilityExample.vue",
    "pascalName": "TableColumnVisibilityExample"
  },
  "TableColumnsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n</script>\r\n\r\n<template>\r\n  <UTable :data=\"data\" :columns=\"columns\" class=\"flex-1\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableColumnsExample.vue",
    "pascalName": "TableColumnsExample"
  },
  "TableCustomMetaExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { ColumnDef } from '@tanstack/vue-table'\r\n\r\ninterface Payment {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data: Payment[] = [\r\n  {\r\n    id: '4600',\r\n    date: '2024-03-11T15:30:00',\r\n    status: 'paid',\r\n    email: 'james.anderson@example.com',\r\n    amount: 594\r\n  },\r\n  {\r\n    id: '4599',\r\n    date: '2024-03-11T10:10:00',\r\n    status: 'failed',\r\n    email: 'mia.white@example.com',\r\n    amount: 276\r\n  },\r\n  {\r\n    id: '4598',\r\n    date: '2024-03-11T08:50:00',\r\n    status: 'refunded',\r\n    email: 'william.brown@example.com',\r\n    amount: 315\r\n  },\r\n  {\r\n    id: '4597',\r\n    date: '2024-03-10T19:45:00',\r\n    status: 'paid',\r\n    email: 'emma.davis@example.com',\r\n    amount: 529\r\n  },\r\n  {\r\n    id: '4596',\r\n    date: '2024-03-10T15:55:00',\r\n    status: 'paid',\r\n    email: 'ethan.harris@example.com',\r\n    amount: 639\r\n  }\r\n]\r\n\r\nconst columns: ColumnDef<Payment>[] = [\r\n  {\r\n    accessorKey: 'id',\r\n    header: 'ID',\r\n    meta: {\r\n      class: {\r\n        th: 'text-center font-semibold',\r\n        td: 'text-center font-mono'\r\n      }\r\n    }\r\n  },\r\n  {\r\n    accessorKey: 'date',\r\n    header: 'Date',\r\n    cell: ({ row }) => {\r\n      return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      })\r\n    }\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status',\r\n    meta: {\r\n      class: {\r\n        th: 'text-center',\r\n        td: 'text-center'\r\n      }\r\n    },\r\n    cell: ({ row }) => {\r\n      const status = row.getValue('status') as string\r\n      const colorMap = {\r\n        paid: 'text-success',\r\n        failed: 'text-error',\r\n        refunded: 'text-warning'\r\n      }\r\n      return h('span', {\r\n        class: `font-semibold capitalize ${colorMap[status as keyof typeof colorMap]}`\r\n      }, status)\r\n    }\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email',\r\n    meta: {\r\n      class: {\r\n        th: 'text-left',\r\n        td: 'text-left'\r\n      }\r\n    }\r\n  },\r\n  {\r\n    accessorKey: 'amount',\r\n    header: 'Amount',\r\n    meta: {\r\n      class: {\r\n        th: 'text-right font-bold text-primary',\r\n        td: 'text-right font-mono'\r\n      }\r\n    },\r\n    cell: ({ row }) => {\r\n      const amount = Number.parseFloat(row.getValue('amount'))\r\n      const formatted = new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n      }).format(amount)\r\n\r\n      return h('span', {\r\n        class: 'font-semibold text-success'\r\n      }, formatted)\r\n    }\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UTable :data=\"data\" :columns=\"columns\" class=\"w-full\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableCustomMetaExample.vue",
    "pascalName": "TableCustomMetaExample"
  },
  "TableDragAndDropExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport { useSortable } from '@vueuse/integrations/useSortable.mjs'\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nuseSortable('.my-table-tbody', data, {\r\n  animation: 150\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"w-full\">\r\n    <UTable\r\n      ref=\"table\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n      :ui=\"{\r\n        tbody: 'my-table-tbody'\r\n      }\"\r\n    />\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableDragAndDropExample.vue",
    "pascalName": "TableDragAndDropExample"
  },
  "TableExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport { upperFirst } from 'scule'\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport { useClipboard } from '@vueuse/core'\r\n\r\nconst UButton = resolveComponent('UButton')\r\nconst UCheckbox = resolveComponent('UCheckbox')\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UDropdownMenu = resolveComponent('UDropdownMenu')\r\n\r\nconst toast = useToast()\r\nconst { copy } = useClipboard()\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}, {\r\n  id: '4595',\r\n  date: '2024-03-10T13:40:00',\r\n  status: 'refunded',\r\n  email: 'ava.thomas@example.com',\r\n  amount: 428\r\n}, {\r\n  id: '4594',\r\n  date: '2024-03-10T09:15:00',\r\n  status: 'paid',\r\n  email: 'michael.wilson@example.com',\r\n  amount: 683\r\n}, {\r\n  id: '4593',\r\n  date: '2024-03-09T20:25:00',\r\n  status: 'failed',\r\n  email: 'olivia.taylor@example.com',\r\n  amount: 947\r\n}, {\r\n  id: '4592',\r\n  date: '2024-03-09T18:45:00',\r\n  status: 'paid',\r\n  email: 'benjamin.jackson@example.com',\r\n  amount: 851\r\n}, {\r\n  id: '4591',\r\n  date: '2024-03-09T16:05:00',\r\n  status: 'paid',\r\n  email: 'sophia.miller@example.com',\r\n  amount: 762\r\n}, {\r\n  id: '4590',\r\n  date: '2024-03-09T14:20:00',\r\n  status: 'paid',\r\n  email: 'noah.clark@example.com',\r\n  amount: 573\r\n}, {\r\n  id: '4589',\r\n  date: '2024-03-09T11:35:00',\r\n  status: 'failed',\r\n  email: 'isabella.lee@example.com',\r\n  amount: 389\r\n}, {\r\n  id: '4588',\r\n  date: '2024-03-08T22:50:00',\r\n  status: 'refunded',\r\n  email: 'liam.walker@example.com',\r\n  amount: 701\r\n}, {\r\n  id: '4587',\r\n  date: '2024-03-08T20:15:00',\r\n  status: 'paid',\r\n  email: 'charlotte.hall@example.com',\r\n  amount: 856\r\n}, {\r\n  id: '4586',\r\n  date: '2024-03-08T17:40:00',\r\n  status: 'paid',\r\n  email: 'mason.young@example.com',\r\n  amount: 492\r\n}, {\r\n  id: '4585',\r\n  date: '2024-03-08T14:55:00',\r\n  status: 'failed',\r\n  email: 'amelia.king@example.com',\r\n  amount: 637\r\n}, {\r\n  id: '4584',\r\n  date: '2024-03-08T12:30:00',\r\n  status: 'paid',\r\n  email: 'elijah.wright@example.com',\r\n  amount: 784\r\n}, {\r\n  id: '4583',\r\n  date: '2024-03-08T09:45:00',\r\n  status: 'refunded',\r\n  email: 'harper.scott@example.com',\r\n  amount: 345\r\n}, {\r\n  id: '4582',\r\n  date: '2024-03-07T23:10:00',\r\n  status: 'paid',\r\n  email: 'evelyn.green@example.com',\r\n  amount: 918\r\n}, {\r\n  id: '4581',\r\n  date: '2024-03-07T20:25:00',\r\n  status: 'paid',\r\n  email: 'logan.baker@example.com',\r\n  amount: 567\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  id: 'select',\r\n  header: ({ table }) => h(UCheckbox, {\r\n    'modelValue': table.getIsSomePageRowsSelected() ? 'indeterminate' : table.getIsAllPageRowsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => table.toggleAllPageRowsSelected(!!value),\r\n    'aria-label': 'Select all'\r\n  }),\r\n  cell: ({ row }) => h(UCheckbox, {\r\n    'modelValue': row.getIsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => row.toggleSelected(!!value),\r\n    'aria-label': 'Select row'\r\n  }),\r\n  enableSorting: false,\r\n  enableHiding: false\r\n}, {\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: ({ column }) => {\r\n    const isSorted = column.getIsSorted()\r\n\r\n    return h(UButton, {\r\n      color: 'neutral',\r\n      variant: 'ghost',\r\n      label: 'Email',\r\n      icon: isSorted ? (isSorted === 'asc' ? 'i-lucide-arrow-up-narrow-wide' : 'i-lucide-arrow-down-wide-narrow') : 'i-lucide-arrow-up-down',\r\n      class: '-mx-2.5',\r\n      onClick: () => column.toggleSorting(column.getIsSorted() === 'asc')\r\n    })\r\n  },\r\n  cell: ({ row }) => h('div', { class: 'lowercase' }, row.getValue('email'))\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}, {\r\n  id: 'actions',\r\n  enableHiding: false,\r\n  cell: ({ row }) => {\r\n    const items = [{\r\n      type: 'label',\r\n      label: 'Actions'\r\n    }, {\r\n      label: 'Copy payment ID',\r\n      onSelect() {\r\n        copy(row.original.id)\r\n\r\n        toast.add({\r\n          title: 'Payment ID copied to clipboard!',\r\n          color: 'success',\r\n          icon: 'i-lucide-circle-check'\r\n        })\r\n      }\r\n    }, {\r\n      label: row.getIsExpanded() ? 'Collapse' : 'Expand',\r\n      onSelect() {\r\n        row.toggleExpanded()\r\n      }\r\n    }, {\r\n      type: 'separator'\r\n    }, {\r\n      label: 'View customer'\r\n    }, {\r\n      label: 'View payment details'\r\n    }]\r\n\r\n    return h('div', { class: 'text-right' }, h(UDropdownMenu, {\r\n      'content': {\r\n        align: 'end'\r\n      },\r\n      items,\r\n      'aria-label': 'Actions dropdown'\r\n    }, () => h(UButton, {\r\n      'icon': 'i-lucide-ellipsis-vertical',\r\n      'color': 'neutral',\r\n      'variant': 'ghost',\r\n      'class': 'ml-auto',\r\n      'aria-label': 'Actions dropdown'\r\n    })))\r\n  }\r\n}]\r\n\r\nconst table = useTemplateRef('table')\r\n\r\nfunction randomize() {\r\n  data.value = [...data.value].sort(() => Math.random() - 0.5)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex-1 divide-y divide-accented w-full\">\r\n    <div class=\"flex items-center gap-2 px-4 py-3.5 overflow-x-auto\">\r\n      <UInput\r\n        :model-value=\"(table?.tableApi?.getColumn('email')?.getFilterValue() as string)\"\r\n        class=\"max-w-sm min-w-[12ch]\"\r\n        placeholder=\"Filter emails...\"\r\n        @update:model-value=\"table?.tableApi?.getColumn('email')?.setFilterValue($event)\"\r\n      />\r\n\r\n      <UButton color=\"neutral\" label=\"Randomize\" @click=\"randomize\" />\r\n\r\n      <UDropdownMenu\r\n        :items=\"table?.tableApi?.getAllColumns().filter(column => column.getCanHide()).map(column => ({\r\n          label: upperFirst(column.id),\r\n          type: 'checkbox' as const,\r\n          checked: column.getIsVisible(),\r\n          onUpdateChecked(checked: boolean) {\r\n            table?.tableApi?.getColumn(column.id)?.toggleVisibility(!!checked)\r\n          },\r\n          onSelect(e?: Event) {\r\n            e?.preventDefault()\r\n          }\r\n        }))\"\r\n        :content=\"{ align: 'end' }\"\r\n      >\r\n        <UButton\r\n          label=\"Columns\"\r\n          color=\"neutral\"\r\n          variant=\"outline\"\r\n          trailing-icon=\"i-lucide-chevron-down\"\r\n          class=\"ml-auto\"\r\n          aria-label=\"Columns select dropdown\"\r\n        />\r\n      </UDropdownMenu>\r\n    </div>\r\n\r\n    <UTable\r\n      ref=\"table\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n      sticky\r\n      class=\"h-96\"\r\n    >\r\n      <template #expanded=\"{ row }\">\r\n        <pre>{{ row.original }}</pre>\r\n      </template>\r\n    </UTable>\r\n\r\n    <div class=\"px-4 py-3.5 text-sm text-muted\">\r\n      {{ table?.tableApi?.getFilteredSelectedRowModel().rows.length || 0 }} of\r\n      {{ table?.tableApi?.getFilteredRowModel().rows.length || 0 }} row(s) selected.\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableExample.vue",
    "pascalName": "TableExample"
  },
  "TableFetchExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UAvatar = resolveComponent('UAvatar')\r\n\r\ntype User = {\r\n  id: number\r\n  name: string\r\n  username: string\r\n  email: string\r\n  avatar: { src: string }\r\n  company: { name: string }\r\n}\r\n\r\nconst { data, status } = await useFetch<User[]>('https://jsonplaceholder.typicode.com/users', {\r\n  key: 'table-users',\r\n  transform: (data) => {\r\n    return data?.map(user => ({\r\n      ...user,\r\n      avatar: { src: `https://i.pravatar.cc/120?img=${user.id}`, alt: `${user.name} avatar` }\r\n    })) || []\r\n  },\r\n  lazy: true\r\n})\r\n\r\nconst columns: TableColumn<User>[] = [{\r\n  accessorKey: 'id',\r\n  header: 'ID'\r\n}, {\r\n  accessorKey: 'name',\r\n  header: 'Name',\r\n  cell: ({ row }) => {\r\n    return h('div', { class: 'flex items-center gap-3' }, [\r\n      h(UAvatar, {\r\n        ...row.original.avatar,\r\n        size: 'lg'\r\n      }),\r\n      h('div', undefined, [\r\n        h('p', { class: 'font-medium text-highlighted' }, row.original.name),\r\n        h('p', { class: '' }, `@${row.original.username}`)\r\n      ])\r\n    ])\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'company',\r\n  header: 'Company',\r\n  cell: ({ row }) => row.original.company.name\r\n}]\r\n</script>\r\n\r\n<template>\r\n  <UTable :data=\"data\" :columns=\"columns\" :loading=\"status === 'pending'\" class=\"flex-1\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableFetchExample.vue",
    "pascalName": "TableFetchExample"
  },
  "TableGlobalFilterExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst globalFilter = ref('45')\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col flex-1 w-full\">\r\n    <div class=\"flex px-4 py-3.5 border-b border-accented\">\r\n      <UInput\r\n        v-model=\"globalFilter\"\r\n        class=\"max-w-sm\"\r\n        placeholder=\"Filter...\"\r\n      />\r\n    </div>\r\n\r\n    <UTable\r\n      ref=\"table\"\r\n      v-model:global-filter=\"globalFilter\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n    />\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableGlobalFilterExample.vue",
    "pascalName": "TableGlobalFilterExample"
  },
  "TableGroupedRowsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport { getGroupedRowModel } from '@tanstack/vue-table'\r\nimport type { GroupingOptions } from '@tanstack/vue-table'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Account = {\r\n  id: string\r\n  name: string\r\n}\r\n\r\ntype PaymentStatus = 'paid' | 'failed' | 'refunded'\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: PaymentStatus\r\n  email: string\r\n  amount: number\r\n  account: Account\r\n}\r\n\r\nconst getColorByStatus = (status: PaymentStatus) => {\r\n  return {\r\n    paid: 'success',\r\n    failed: 'error',\r\n    refunded: 'neutral'\r\n  }[status]\r\n}\r\n\r\nconst data = ref<Payment[]>([\r\n  {\r\n    id: '4600',\r\n    date: '2024-03-11T15:30:00',\r\n    status: 'paid',\r\n    email: 'james.anderson@example.com',\r\n    amount: 594,\r\n    account: {\r\n      id: '1',\r\n      name: 'Account 1'\r\n    }\r\n  },\r\n  {\r\n    id: '4599',\r\n    date: '2024-03-11T10:10:00',\r\n    status: 'failed',\r\n    email: 'mia.white@example.com',\r\n    amount: 276,\r\n    account: {\r\n      id: '2',\r\n      name: 'Account 2'\r\n    }\r\n  },\r\n  {\r\n    id: '4598',\r\n    date: '2024-03-11T08:50:00',\r\n    status: 'refunded',\r\n    email: 'william.brown@example.com',\r\n    amount: 315,\r\n    account: {\r\n      id: '1',\r\n      name: 'Account 1'\r\n    }\r\n  },\r\n  {\r\n    id: '4597',\r\n    date: '2024-03-10T19:45:00',\r\n    status: 'paid',\r\n    email: 'emma.davis@example.com',\r\n    amount: 529,\r\n    account: {\r\n      id: '2',\r\n      name: 'Account 2'\r\n    }\r\n  },\r\n  {\r\n    id: '4596',\r\n    date: '2024-03-10T15:55:00',\r\n    status: 'paid',\r\n    email: 'ethan.harris@example.com',\r\n    amount: 639,\r\n    account: {\r\n      id: '1',\r\n      name: 'Account 1'\r\n    }\r\n  }\r\n])\r\n\r\nconst columns: TableColumn<Payment>[] = [\r\n  {\r\n    id: 'title',\r\n    header: 'Item'\r\n  },\r\n  {\r\n    id: 'account_id',\r\n    accessorKey: 'account.id'\r\n  },\r\n  {\r\n    accessorKey: 'id',\r\n    header: '#',\r\n    cell: ({ row }) =>\r\n      row.getIsGrouped()\r\n        ? `${row.getValue('id')} records`\r\n        : `#${row.getValue('id')}`,\r\n    aggregationFn: 'count'\r\n  },\r\n  {\r\n    accessorKey: 'date',\r\n    header: 'Date',\r\n    cell: ({ row }) => {\r\n      return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n        day: 'numeric',\r\n        month: 'short',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        hour12: false\r\n      })\r\n    },\r\n    aggregationFn: 'max'\r\n  },\r\n  {\r\n    accessorKey: 'status',\r\n    header: 'Status'\r\n  },\r\n  {\r\n    accessorKey: 'email',\r\n    header: 'Email',\r\n    meta: {\r\n      class: {\r\n        td: 'w-full'\r\n      }\r\n    },\r\n    cell: ({ row }) =>\r\n      row.getIsGrouped()\r\n        ? `${row.getValue('email')} customers`\r\n        : row.getValue('email'),\r\n    aggregationFn: 'uniqueCount'\r\n  },\r\n  {\r\n    accessorKey: 'amount',\r\n    header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n    cell: ({ row }) => {\r\n      const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n      const formatted = new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency: 'EUR'\r\n      }).format(amount)\r\n\r\n      return h('div', { class: 'text-right font-medium' }, formatted)\r\n    },\r\n    aggregationFn: 'sum'\r\n  }\r\n]\r\n\r\nconst grouping_options = ref<GroupingOptions>({\r\n  groupedColumnMode: 'remove',\r\n  getGroupedRowModel: getGroupedRowModel()\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UTable\r\n    :data=\"data\"\r\n    :columns=\"columns\"\r\n    :grouping=\"['account_id', 'status']\"\r\n    :grouping-options=\"grouping_options\"\r\n    :ui=\"{\r\n      root: 'min-w-full',\r\n      td: 'empty:p-0' // helps with the colspaned row added for expand slot\r\n    }\"\r\n  >\r\n    <template #title-cell=\"{ row }\">\r\n      <div v-if=\"row.getIsGrouped()\" class=\"flex items-center\">\r\n        <span\r\n          class=\"inline-block\"\r\n          :style=\"{ width: `calc(${row.depth} * 1rem)` }\"\r\n        />\r\n\r\n        <UButton\r\n          variant=\"outline\"\r\n          color=\"neutral\"\r\n          class=\"mr-2\"\r\n          size=\"xs\"\r\n          :icon=\"row.getIsExpanded() ? 'i-lucide-minus' : 'i-lucide-plus'\"\r\n          @click=\"row.toggleExpanded()\"\r\n        />\r\n        <strong v-if=\"row.groupingColumnId === 'account_id'\">{{\r\n          row.original.account.name\r\n        }}</strong>\r\n        <UBadge\r\n          v-else-if=\"row.groupingColumnId === 'status'\"\r\n          :color=\"getColorByStatus(row.original.status)\"\r\n          class=\"capitalize\"\r\n          variant=\"subtle\"\r\n        >\r\n          {{ row.original.status }}\r\n        </UBadge>\r\n      </div>\r\n    </template>\r\n  </UTable>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableGroupedRowsExample.vue",
    "pascalName": "TableGroupedRowsExample"
  },
  "TableInfiniteScrollExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport { useInfiniteScroll } from '@vueuse/core'\r\n\r\nconst UAvatar = resolveComponent('UAvatar')\r\n\r\ntype User = {\r\n  id: number\r\n  firstName: string\r\n  username: string\r\n  email: string\r\n  image: string\r\n}\r\n\r\ntype UserResponse = {\r\n  users: User[]\r\n  total: number\r\n  skip: number\r\n  limit: number\r\n}\r\n\r\nconst skip = ref(0)\r\n\r\nconst { data, status, execute } = await useFetch('https://dummyjson.com/users?limit=10&select=firstName,username,email,image', {\r\n  key: 'table-users-infinite-scroll',\r\n  params: { skip },\r\n  transform: (data?: UserResponse) => {\r\n    return data?.users\r\n  },\r\n  lazy: true,\r\n  immediate: false\r\n})\r\n\r\nconst columns: TableColumn<User>[] = [{\r\n  accessorKey: 'id',\r\n  header: 'ID'\r\n}, {\r\n  accessorKey: 'image',\r\n  header: 'Avatar',\r\n  cell: ({ row }) => h(UAvatar, { src: row.original.image })\r\n}, {\r\n  accessorKey: 'firstName',\r\n  header: 'First name'\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'username',\r\n  header: 'Username'\r\n}]\r\n\r\nconst users = ref<User[]>([])\r\n\r\nwatch(data, () => {\r\n  users.value = [\r\n    ...users.value,\r\n    ...(data.value || [])\r\n  ]\r\n})\r\n\r\nexecute()\r\n\r\nconst table = useTemplateRef<ComponentPublicInstance>('table')\r\n\r\nonMounted(() => {\r\n  useInfiniteScroll(table.value?.$el, () => {\r\n    skip.value += 10\r\n  }, {\r\n    distance: 200,\r\n    canLoadMore: () => {\r\n      return status.value !== 'pending'\r\n    }\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"w-full\">\r\n    <UTable\r\n      ref=\"table\"\r\n      :data=\"users\"\r\n      :columns=\"columns\"\r\n      :loading=\"status === 'pending'\"\r\n      sticky\r\n      class=\"flex-1 h-80\"\r\n    />\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableInfiniteScrollExample.vue",
    "pascalName": "TableInfiniteScrollExample"
  },
  "TablePaginationExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { getPaginationRowModel } from '@tanstack/vue-table'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst table = useTemplateRef('table')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  email: string\r\n  amount: number\r\n}\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}, {\r\n  id: '4595',\r\n  date: '2024-03-10T13:20:00',\r\n  email: 'sophia.miller@example.com',\r\n  amount: 428\r\n}, {\r\n  id: '4594',\r\n  date: '2024-03-10T11:05:00',\r\n  email: 'noah.wilson@example.com',\r\n  amount: 673\r\n}, {\r\n  id: '4593',\r\n  date: '2024-03-09T22:15:00',\r\n  email: 'olivia.jones@example.com',\r\n  amount: 382\r\n}, {\r\n  id: '4592',\r\n  date: '2024-03-09T20:30:00',\r\n  email: 'liam.taylor@example.com',\r\n  amount: 547\r\n}, {\r\n  id: '4591',\r\n  date: '2024-03-09T18:45:00',\r\n  email: 'ava.thomas@example.com',\r\n  amount: 291\r\n}, {\r\n  id: '4590',\r\n  date: '2024-03-09T16:20:00',\r\n  email: 'lucas.martin@example.com',\r\n  amount: 624\r\n}, {\r\n  id: '4589',\r\n  date: '2024-03-09T14:10:00',\r\n  email: 'isabella.clark@example.com',\r\n  amount: 438\r\n}, {\r\n  id: '4588',\r\n  date: '2024-03-09T12:05:00',\r\n  email: 'mason.rodriguez@example.com',\r\n  amount: 583\r\n}, {\r\n  id: '4587',\r\n  date: '2024-03-09T10:30:00',\r\n  email: 'sophia.lee@example.com',\r\n  amount: 347\r\n}, {\r\n  id: '4586',\r\n  date: '2024-03-09T08:15:00',\r\n  email: 'ethan.walker@example.com',\r\n  amount: 692\r\n}, {\r\n  id: '4585',\r\n  date: '2024-03-08T23:40:00',\r\n  email: 'amelia.hall@example.com',\r\n  amount: 419\r\n}, {\r\n  id: '4584',\r\n  date: '2024-03-08T21:25:00',\r\n  email: 'oliver.young@example.com',\r\n  amount: 563\r\n}, {\r\n  id: '4583',\r\n  date: '2024-03-08T19:50:00',\r\n  email: 'aria.king@example.com',\r\n  amount: 328\r\n}, {\r\n  id: '4582',\r\n  date: '2024-03-08T17:35:00',\r\n  email: 'henry.wright@example.com',\r\n  amount: 647\r\n}, {\r\n  id: '4581',\r\n  date: '2024-03-08T15:20:00',\r\n  email: 'luna.lopez@example.com',\r\n  amount: 482\r\n}])\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst pagination = ref({\r\n  pageIndex: 0,\r\n  pageSize: 5\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"w-full space-y-4 pb-4\">\r\n    <UTable\r\n      ref=\"table\"\r\n      v-model:pagination=\"pagination\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n      :pagination-options=\"{\r\n        getPaginationRowModel: getPaginationRowModel()\r\n      }\"\r\n      class=\"flex-1\"\r\n    />\r\n\r\n    <div class=\"flex justify-center border-t border-default pt-4\">\r\n      <UPagination\r\n        :default-page=\"(table?.tableApi?.getState().pagination.pageIndex || 0) + 1\"\r\n        :items-per-page=\"table?.tableApi?.getState().pagination.pageSize\"\r\n        :total=\"table?.tableApi?.getFilteredRowModel().rows.length\"\r\n        @update:page=\"(p) => table?.tableApi?.setPageIndex(p - 1)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TablePaginationExample.vue",
    "pascalName": "TablePaginationExample"
  },
  "TableRowActionsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\nimport type { Row } from '@tanstack/vue-table'\r\nimport { useClipboard } from '@vueuse/core'\r\n\r\nconst UButton = resolveComponent('UButton')\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UDropdownMenu = resolveComponent('UDropdownMenu')\r\n\r\nconst toast = useToast()\r\nconst { copy } = useClipboard()\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}, {\r\n  id: 'actions',\r\n  cell: ({ row }) => {\r\n    return h('div', { class: 'text-right' }, h(UDropdownMenu, {\r\n      'content': {\r\n        align: 'end'\r\n      },\r\n      'items': getRowItems(row),\r\n      'aria-label': 'Actions dropdown'\r\n    }, () => h(UButton, {\r\n      'icon': 'i-lucide-ellipsis-vertical',\r\n      'color': 'neutral',\r\n      'variant': 'ghost',\r\n      'class': 'ml-auto',\r\n      'aria-label': 'Actions dropdown'\r\n    })))\r\n  }\r\n}]\r\n\r\nfunction getRowItems(row: Row<Payment>) {\r\n  return [{\r\n    type: 'label',\r\n    label: 'Actions'\r\n  }, {\r\n    label: 'Copy payment ID',\r\n    onSelect() {\r\n      copy(row.original.id)\r\n\r\n      toast.add({\r\n        title: 'Payment ID copied to clipboard!',\r\n        color: 'success',\r\n        icon: 'i-lucide-circle-check'\r\n      })\r\n    }\r\n  }, {\r\n    type: 'separator'\r\n  }, {\r\n    label: 'View customer'\r\n  }, {\r\n    label: 'View payment details'\r\n  }]\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UTable :data=\"data\" :columns=\"columns\" class=\"flex-1\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableRowActionsExample.vue",
    "pascalName": "TableRowActionsExample"
  },
  "TableRowContextMenuEventExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { ArrayOrNested, ContextMenuItem, TableColumn, TableRow } from '@nuxt/ui'\r\nimport { useClipboard } from '@vueuse/core'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UCheckbox = resolveComponent('UCheckbox')\r\n\r\nconst toast = useToast()\r\nconst { copy } = useClipboard()\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  id: 'select',\r\n  header: ({ table }) => h(UCheckbox, {\r\n    'modelValue': table.getIsSomePageRowsSelected() ? 'indeterminate' : table.getIsAllPageRowsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => table.toggleAllPageRowsSelected(!!value),\r\n    'aria-label': 'Select all'\r\n  }),\r\n  cell: ({ row }) => h(UCheckbox, {\r\n    'modelValue': row.getIsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => row.toggleSelected(!!value),\r\n    'aria-label': 'Select row'\r\n  })\r\n}, {\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst items = ref<ArrayOrNested<ContextMenuItem>>()\r\n\r\nfunction getRowItems(row: TableRow<Payment>) {\r\n  return [{\r\n    type: 'label' as const,\r\n    label: 'Actions'\r\n  }, {\r\n    label: 'Copy payment ID',\r\n    onSelect() {\r\n      copy(row.original.id)\r\n\r\n      toast.add({\r\n        title: 'Payment ID copied to clipboard!',\r\n        color: 'success',\r\n        icon: 'i-lucide-circle-check'\r\n      })\r\n    }\r\n  }, {\r\n    label: row.getIsExpanded() ? 'Collapse' : 'Expand',\r\n    onSelect() {\r\n      row.toggleExpanded()\r\n    }\r\n  }, {\r\n    type: 'separator' as const\r\n  }, {\r\n    label: 'View customer'\r\n  }, {\r\n    label: 'View payment details'\r\n  }]\r\n}\r\n\r\nfunction onContextmenu(_e: Event, row: TableRow<Payment>) {\r\n  items.value = getRowItems(row)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UContextMenu :items=\"items\">\r\n    <UTable\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n      class=\"flex-1\"\r\n      @contextmenu=\"onContextmenu\"\r\n    >\r\n      <template #expanded=\"{ row }\">\r\n        <pre>{{ row.original }}</pre>\r\n      </template>\r\n    </UTable>\r\n  </UContextMenu>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableRowContextMenuEventExample.vue",
    "pascalName": "TableRowContextMenuEventExample"
  },
  "TableRowExpandableExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UButton = resolveComponent('UButton')\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  id: 'expand',\r\n  cell: ({ row }) => h(UButton, {\r\n    'color': 'neutral',\r\n    'variant': 'ghost',\r\n    'icon': 'i-lucide-chevron-down',\r\n    'square': true,\r\n    'aria-label': 'Expand',\r\n    'ui': {\r\n      leadingIcon: ['transition-transform', row.getIsExpanded() ? 'duration-200 rotate-180' : '']\r\n    },\r\n    'onClick': () => row.toggleExpanded()\r\n  })\r\n}, {\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst expanded = ref({ 1: true })\r\n</script>\r\n\r\n<template>\r\n  <UTable\r\n    v-model:expanded=\"expanded\"\r\n    :data=\"data\"\r\n    :columns=\"columns\"\r\n    :ui=\"{ tr: 'data-[expanded=true]:bg-elevated/50' }\"\r\n    class=\"flex-1\"\r\n  >\r\n    <template #expanded=\"{ row }\">\r\n      <pre>{{ row.original }}</pre>\r\n    </template>\r\n  </UTable>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableRowExpandableExample.vue",
    "pascalName": "TableRowExpandableExample"
  },
  "TableRowHoverEventExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn, TableRow } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UCheckbox = resolveComponent('UCheckbox')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  id: 'select',\r\n  header: ({ table }) => h(UCheckbox, {\r\n    'modelValue': table.getIsSomePageRowsSelected() ? 'indeterminate' : table.getIsAllPageRowsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => table.toggleAllPageRowsSelected(!!value),\r\n    'aria-label': 'Select all'\r\n  }),\r\n  cell: ({ row }) => h(UCheckbox, {\r\n    'modelValue': row.getIsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => row.toggleSelected(!!value),\r\n    'aria-label': 'Select row'\r\n  })\r\n}, {\r\n  accessorKey: 'id',\r\n  header: '#',\r\n  cell: ({ row }) => `#${row.getValue('id')}`\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst anchor = ref({ x: 0, y: 0 })\r\n\r\nconst reference = computed(() => ({\r\n  getBoundingClientRect: () =>\r\n    ({\r\n      width: 0,\r\n      height: 0,\r\n      left: anchor.value.x,\r\n      right: anchor.value.x,\r\n      top: anchor.value.y,\r\n      bottom: anchor.value.y,\r\n      ...anchor.value\r\n    } as DOMRect)\r\n}))\r\n\r\nconst open = ref(false)\r\nconst openDebounced = refDebounced(open, 10)\r\nconst selectedRow = ref<TableRow<Payment> | null>(null)\r\n\r\nfunction onHover(_e: Event, row: TableRow<Payment> | null) {\r\n  selectedRow.value = row\r\n\r\n  open.value = !!row\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex w-full flex-1 gap-1\">\r\n    <UTable\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n      class=\"flex-1\"\r\n      @pointermove=\"(ev: PointerEvent) => {\r\n        anchor.x = ev.clientX\r\n        anchor.y = ev.clientY\r\n      }\"\r\n      @hover=\"onHover\"\r\n    />\r\n\r\n    <UPopover\r\n      :content=\"{ side: 'top', sideOffset: 16, updatePositionStrategy: 'always' }\"\r\n      :open=\"openDebounced\"\r\n      :reference=\"reference\"\r\n    >\r\n      <template #content>\r\n        <div class=\"p-4\">\r\n          {{ selectedRow?.original?.id }}\r\n        </div>\r\n      </template>\r\n    </UPopover>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableRowHoverEventExample.vue",
    "pascalName": "TableRowHoverEventExample"
  },
  "TableRowSelectEventExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn, TableRow } from '@nuxt/ui'\r\n\r\nconst UBadge = resolveComponent('UBadge')\r\nconst UCheckbox = resolveComponent('UCheckbox')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  id: 'select',\r\n  header: ({ table }) => h(UCheckbox, {\r\n    'modelValue': table.getIsSomePageRowsSelected() ? 'indeterminate' : table.getIsAllPageRowsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => table.toggleAllPageRowsSelected(!!value),\r\n    'aria-label': 'Select all'\r\n  }),\r\n  cell: ({ row }) => h(UCheckbox, {\r\n    'modelValue': row.getIsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => row.toggleSelected(!!value),\r\n    'aria-label': 'Select row'\r\n  })\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst table = useTemplateRef('table')\r\n\r\nconst rowSelection = ref<Record<string, boolean>>({ })\r\n\r\nfunction onSelect(row: TableRow<Payment>, e?: Event) {\r\n  /* If you decide to also select the column you can do this  */\r\n  row.toggleSelected(!row.getIsSelected())\r\n\r\n  console.log(e)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex w-full flex-1 gap-1\">\r\n    <div class=\"flex-1\">\r\n      <UTable\r\n        ref=\"table\"\r\n        v-model:row-selection=\"rowSelection\"\r\n        :data=\"data\"\r\n        :columns=\"columns\"\r\n        @select=\"onSelect\"\r\n      />\r\n\r\n      <div class=\"px-4 py-3.5 border-t border-accented text-sm text-muted\">\r\n        {{ table?.tableApi?.getFilteredSelectedRowModel().rows.length || 0 }} of\r\n        {{ table?.tableApi?.getFilteredRowModel().rows.length || 0 }} row(s) selected.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableRowSelectEventExample.vue",
    "pascalName": "TableRowSelectEventExample"
  },
  "TableRowSelectionExample": {
    "code": "<script setup lang=\"ts\">\r\nimport { h, resolveComponent } from 'vue'\r\nimport type { TableColumn } from '@nuxt/ui'\r\n\r\nconst UCheckbox = resolveComponent('UCheckbox')\r\nconst UBadge = resolveComponent('UBadge')\r\n\r\ntype Payment = {\r\n  id: string\r\n  date: string\r\n  status: 'paid' | 'failed' | 'refunded'\r\n  email: string\r\n  amount: number\r\n}\r\n\r\nconst data = ref<Payment[]>([{\r\n  id: '4600',\r\n  date: '2024-03-11T15:30:00',\r\n  status: 'paid',\r\n  email: 'james.anderson@example.com',\r\n  amount: 594\r\n}, {\r\n  id: '4599',\r\n  date: '2024-03-11T10:10:00',\r\n  status: 'failed',\r\n  email: 'mia.white@example.com',\r\n  amount: 276\r\n}, {\r\n  id: '4598',\r\n  date: '2024-03-11T08:50:00',\r\n  status: 'refunded',\r\n  email: 'william.brown@example.com',\r\n  amount: 315\r\n}, {\r\n  id: '4597',\r\n  date: '2024-03-10T19:45:00',\r\n  status: 'paid',\r\n  email: 'emma.davis@example.com',\r\n  amount: 529\r\n}, {\r\n  id: '4596',\r\n  date: '2024-03-10T15:55:00',\r\n  status: 'paid',\r\n  email: 'ethan.harris@example.com',\r\n  amount: 639\r\n}])\r\n\r\nconst columns: TableColumn<Payment>[] = [{\r\n  id: 'select',\r\n  header: ({ table }) => h(UCheckbox, {\r\n    'modelValue': table.getIsSomePageRowsSelected() ? 'indeterminate' : table.getIsAllPageRowsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => table.toggleAllPageRowsSelected(!!value),\r\n    'aria-label': 'Select all'\r\n  }),\r\n  cell: ({ row }) => h(UCheckbox, {\r\n    'modelValue': row.getIsSelected(),\r\n    'onUpdate:modelValue': (value: boolean | 'indeterminate') => row.toggleSelected(!!value),\r\n    'aria-label': 'Select row'\r\n  })\r\n}, {\r\n  accessorKey: 'date',\r\n  header: 'Date',\r\n  cell: ({ row }) => {\r\n    return new Date(row.getValue('date')).toLocaleString('en-US', {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      hour12: false\r\n    })\r\n  }\r\n}, {\r\n  accessorKey: 'status',\r\n  header: 'Status',\r\n  cell: ({ row }) => {\r\n    const color = ({\r\n      paid: 'success' as const,\r\n      failed: 'error' as const,\r\n      refunded: 'neutral' as const\r\n    })[row.getValue('status') as string]\r\n\r\n    return h(UBadge, { class: 'capitalize', variant: 'subtle', color }, () => row.getValue('status'))\r\n  }\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'amount',\r\n  header: () => h('div', { class: 'text-right' }, 'Amount'),\r\n  cell: ({ row }) => {\r\n    const amount = Number.parseFloat(row.getValue('amount'))\r\n\r\n    const formatted = new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount)\r\n\r\n    return h('div', { class: 'text-right font-medium' }, formatted)\r\n  }\r\n}]\r\n\r\nconst table = useTemplateRef('table')\r\n\r\nconst rowSelection = ref({ 1: true })\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex-1 w-full\">\r\n    <UTable\r\n      ref=\"table\"\r\n      v-model:row-selection=\"rowSelection\"\r\n      :data=\"data\"\r\n      :columns=\"columns\"\r\n    />\r\n\r\n    <div class=\"px-4 py-3.5 border-t border-accented text-sm text-muted\">\r\n      {{ table?.tableApi?.getFilteredSelectedRowModel().rows.length || 0 }} of\r\n      {{ table?.tableApi?.getFilteredRowModel().rows.length || 0 }} row(s) selected.\r\n    </div>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableRowSelectionExample.vue",
    "pascalName": "TableRowSelectionExample"
  },
  "TableSlotsExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TableColumn, DropdownMenuItem } from '@nuxt/ui'\r\nimport { useClipboard } from '@vueuse/core'\r\n\r\ninterface User {\r\n  id: number\r\n  name: string\r\n  position: string\r\n  email: string\r\n  role: string\r\n}\r\n\r\nconst toast = useToast()\r\nconst { copy } = useClipboard()\r\n\r\nconst data = ref<User[]>([{\r\n  id: 1,\r\n  name: 'Lindsay Walton',\r\n  position: 'Front-end Developer',\r\n  email: 'lindsay.walton@example.com',\r\n  role: 'Member'\r\n}, {\r\n  id: 2,\r\n  name: 'Courtney Henry',\r\n  position: 'Designer',\r\n  email: 'courtney.henry@example.com',\r\n  role: 'Admin'\r\n}, {\r\n  id: 3,\r\n  name: 'Tom Cook',\r\n  position: 'Director of Product',\r\n  email: 'tom.cook@example.com',\r\n  role: 'Member'\r\n}, {\r\n  id: 4,\r\n  name: 'Whitney Francis',\r\n  position: 'Copywriter',\r\n  email: 'whitney.francis@example.com',\r\n  role: 'Admin'\r\n}, {\r\n  id: 5,\r\n  name: 'Leonard Krasner',\r\n  position: 'Senior Designer',\r\n  email: 'leonard.krasner@example.com',\r\n  role: 'Owner'\r\n}, {\r\n  id: 6,\r\n  name: 'Floyd Miles',\r\n  position: 'Principal Designer',\r\n  email: 'floyd.miles@example.com',\r\n  role: 'Member'\r\n}])\r\n\r\nconst columns: TableColumn<User>[] = [{\r\n  accessorKey: 'id',\r\n  header: 'ID'\r\n}, {\r\n  accessorKey: 'name',\r\n  header: 'Name'\r\n}, {\r\n  accessorKey: 'email',\r\n  header: 'Email'\r\n}, {\r\n  accessorKey: 'role',\r\n  header: 'Role'\r\n}, {\r\n  id: 'action'\r\n}]\r\n\r\nfunction getDropdownActions(user: User): DropdownMenuItem[][] {\r\n  return [\r\n    [{\r\n      label: 'Copy user Id',\r\n      icon: 'i-lucide-copy',\r\n      onSelect: () => {\r\n        copy(user.id.toString())\r\n\r\n        toast.add({\r\n          title: 'User ID copied to clipboard!',\r\n          color: 'success',\r\n          icon: 'i-lucide-circle-check'\r\n        })\r\n      }\r\n    }],\r\n    [{\r\n      label: 'Edit',\r\n      icon: 'i-lucide-edit'\r\n    }, {\r\n      label: 'Delete',\r\n      icon: 'i-lucide-trash',\r\n      color: 'error'\r\n    }]\r\n  ]\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UTable :data=\"data\" :columns=\"columns\" class=\"flex-1\">\r\n    <template #name-cell=\"{ row }\">\r\n      <div class=\"flex items-center gap-3\">\r\n        <UAvatar :src=\"`https://i.pravatar.cc/120?img=${row.original.id}`\" size=\"lg\" :alt=\"`${row.original.name} avatar`\" />\r\n        <div>\r\n          <p class=\"font-medium text-highlighted\">\r\n            {{ row.original.name }}\r\n          </p>\r\n          <p>\r\n            {{ row.original.position }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <template #action-cell=\"{ row }\">\r\n      <UDropdownMenu :items=\"getDropdownActions(row.original)\">\r\n        <UButton icon=\"i-lucide-ellipsis-vertical\" color=\"neutral\" variant=\"ghost\" aria-label=\"Actions\" />\r\n      </UDropdownMenu>\r\n    </template>\r\n  </UTable>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/table/TableSlotsExample.vue",
    "pascalName": "TableSlotsExample"
  },
  "TabsContentSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TabsItem } from '@nuxt/ui'\r\n\r\nconst items: TabsItem[] = [\r\n  {\r\n    label: 'Account',\r\n    icon: 'i-lucide-user'\r\n  },\r\n  {\r\n    label: 'Password',\r\n    icon: 'i-lucide-lock'\r\n  }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UTabs :items=\"items\" class=\"w-full\">\r\n    <template #content=\"{ item }\">\r\n      <p>This is the {{ item.label }} tab.</p>\r\n    </template>\r\n  </UTabs>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tabs/TabsContentSlotExample.vue",
    "pascalName": "TabsContentSlotExample"
  },
  "TabsCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TabsItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'Account',\r\n    description: 'Make changes to your account here. Click save when you\\'re done.',\r\n    icon: 'i-lucide-user',\r\n    slot: 'account' as const\r\n  },\r\n  {\r\n    label: 'Password',\r\n    description: 'Change your password here. After saving, you\\'ll be logged out.',\r\n    icon: 'i-lucide-lock',\r\n    slot: 'password' as const\r\n  }\r\n] satisfies TabsItem[]\r\n\r\nconst state = reactive({\r\n  name: 'Benjamin Canac',\r\n  username: 'benjamincanac',\r\n  currentPassword: '',\r\n  newPassword: '',\r\n  confirmPassword: ''\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UTabs :items=\"items\" variant=\"link\" :ui=\"{ trigger: 'grow' }\" class=\"gap-4 w-full\">\r\n    <template #account=\"{ item }\">\r\n      <p class=\"text-muted mb-4\">\r\n        {{ item.description }}\r\n      </p>\r\n\r\n      <UForm :state=\"state\" class=\"flex flex-col gap-4\">\r\n        <UFormField label=\"Name\" name=\"name\">\r\n          <UInput v-model=\"state.name\" class=\"w-full\" />\r\n        </UFormField>\r\n        <UFormField label=\"Username\" name=\"username\">\r\n          <UInput v-model=\"state.username\" class=\"w-full\" />\r\n        </UFormField>\r\n\r\n        <UButton label=\"Save changes\" type=\"submit\" variant=\"soft\" class=\"self-end\" />\r\n      </UForm>\r\n    </template>\r\n\r\n    <template #password=\"{ item }\">\r\n      <p class=\"text-muted mb-4\">\r\n        {{ item.description }}\r\n      </p>\r\n\r\n      <UForm :state=\"state\" class=\"flex flex-col gap-4\">\r\n        <UFormField label=\"Current Password\" name=\"current\" required>\r\n          <UInput v-model=\"state.currentPassword\" type=\"password\" required class=\"w-full\" />\r\n        </UFormField>\r\n        <UFormField label=\"New Password\" name=\"new\" required>\r\n          <UInput v-model=\"state.newPassword\" type=\"password\" required class=\"w-full\" />\r\n        </UFormField>\r\n        <UFormField label=\"Confirm Password\" name=\"confirm\" required>\r\n          <UInput v-model=\"state.confirmPassword\" type=\"password\" required class=\"w-full\" />\r\n        </UFormField>\r\n\r\n        <UButton label=\"Change password\" type=\"submit\" variant=\"soft\" class=\"self-end\" />\r\n      </UForm>\r\n    </template>\r\n  </UTabs>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tabs/TabsCustomSlotExample.vue",
    "pascalName": "TabsCustomSlotExample"
  },
  "TabsModelValueExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TabsItem } from '@nuxt/ui'\r\n\r\nconst route = useRoute()\r\nconst router = useRouter()\r\n\r\nconst items: TabsItem[] = [\r\n  {\r\n    label: 'Account',\r\n    value: 'account'\r\n  },\r\n  {\r\n    label: 'Password',\r\n    value: 'password'\r\n  }\r\n]\r\n\r\nconst active = computed({\r\n  get() {\r\n    return (route.query.tab as string) || 'account'\r\n  },\r\n  set(tab) {\r\n    // Hash is specified here to prevent the page from scrolling to the top\r\n    router.push({\r\n      path: '/components/tabs',\r\n      query: { tab },\r\n      hash: '#control-active-item'\r\n    })\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UTabs v-model=\"active\" :content=\"false\" :items=\"items\" class=\"w-full\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tabs/TabsModelValueExample.vue",
    "pascalName": "TabsModelValueExample"
  },
  "TimelineAlternatingLayoutExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TimelineItem } from '@nuxt/ui'\r\n\r\nconst items: TimelineItem[] = [{\r\n  date: 'Mar 15, 2025',\r\n  title: 'Project Kickoff',\r\n  icon: 'i-lucide-rocket',\r\n  value: 'kickoff'\r\n}, {\r\n  date: 'Mar 22, 2025',\r\n  title: 'Design Phase',\r\n  icon: 'i-lucide-palette',\r\n  value: 'design'\r\n}, {\r\n  date: 'Mar 29, 2025',\r\n  title: 'Development Sprint',\r\n  icon: 'i-lucide-code',\r\n  value: 'development'\r\n}, {\r\n  date: 'Apr 5, 2025',\r\n  title: 'Testing & Deployment',\r\n  icon: 'i-lucide-check-circle',\r\n  value: 'deployment'\r\n}]\r\n</script>\r\n\r\n<template>\r\n  <UTimeline\r\n    :items=\"items\"\r\n    :default-value=\"2\"\r\n    :ui=\"{ item: 'even:flex-row-reverse even:-translate-x-[calc(100%-2rem)] even:text-right' }\"\r\n    class=\"translate-x-[calc(50%-1rem)]\"\r\n  />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/timeline/TimelineAlternatingLayoutExample.vue",
    "pascalName": "TimelineAlternatingLayoutExample"
  },
  "TimelineCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TimelineItem } from '@nuxt/ui'\r\n\r\nconst items = [{\r\n  date: 'Mar 15, 2025',\r\n  title: 'Project Kickoff',\r\n  subtitle: 'Project Initiation',\r\n  description: 'Kicked off the project with team alignment. Set up project milestones and allocated resources.',\r\n  icon: 'i-lucide-rocket',\r\n  value: 'kickoff'\r\n}, {\r\n  date: 'Mar 22, 2025',\r\n  title: 'Design Phase',\r\n  description: 'User research and design workshops. Created wireframes and prototypes for user testing.',\r\n  icon: 'i-lucide-palette',\r\n  value: 'design'\r\n}, {\r\n  date: 'Mar 29, 2025',\r\n  title: 'Development Sprint',\r\n  description: 'Frontend and backend development. Implemented core features and integrated with APIs.',\r\n  icon: 'i-lucide-code',\r\n  value: 'development',\r\n  slot: 'development' as const,\r\n  developers: [\r\n    {\r\n      src: 'https://github.com/J-Michalek.png'\r\n    }, {\r\n      src: 'https://github.com/benjamincanac.png'\r\n    }\r\n  ]\r\n}, {\r\n  date: 'Apr 5, 2025',\r\n  title: 'Testing & Deployment',\r\n  description: 'QA testing and performance optimization. Deployed the application to production.',\r\n  icon: 'i-lucide-check-circle',\r\n  value: 'deployment'\r\n}] satisfies TimelineItem[]\r\n</script>\r\n\r\n<template>\r\n  <UTimeline :items=\"items\" :default-value=\"2\" class=\"w-96\">\r\n    <template #development-title=\"{ item }\">\r\n      <div class=\"flex items-center gap-1\">\r\n        <span>{{ item.title }}</span>\r\n\r\n        <UAvatarGroup size=\"2xs\">\r\n          <UAvatar v-for=\"(developer, index) of item.developers\" :key=\"index\" v-bind=\"developer\" />\r\n        </UAvatarGroup>\r\n      </div>\r\n    </template>\r\n  </UTimeline>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/timeline/TimelineCustomSlotExample.vue",
    "pascalName": "TimelineCustomSlotExample"
  },
  "TimelineModelValueExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TimelineItem } from '@nuxt/ui'\r\n\r\nconst items: TimelineItem[] = [{\r\n  date: 'Mar 15, 2025',\r\n  title: 'Project Kickoff',\r\n  description: 'Kicked off the project with team alignment. Set up project milestones and allocated resources.',\r\n  icon: 'i-lucide-rocket',\r\n  value: 'kickoff'\r\n}, {\r\n  date: 'Mar 22, 2025',\r\n  title: 'Design Phase',\r\n  description: 'User research and design workshops. Created wireframes and prototypes for user testing.',\r\n  icon: 'i-lucide-palette',\r\n  value: 'design'\r\n}, {\r\n  date: 'Mar 29, 2025',\r\n  title: 'Development Sprint',\r\n  description: 'Frontend and backend development. Implemented core features and integrated with APIs.',\r\n  icon: 'i-lucide-code',\r\n  value: 'development'\r\n}, {\r\n  date: 'Apr 5, 2025',\r\n  title: 'Testing & Deployment',\r\n  description: 'QA testing and performance optimization. Deployed the application to production.',\r\n  icon: 'i-lucide-check-circle',\r\n  value: 'deployment'\r\n}]\r\n\r\nconst active = ref(0)\r\n\r\n// Note: This is for demonstration purposes only. Don't do this at home.\r\nonMounted(() => {\r\n  setInterval(() => {\r\n    active.value = (active.value + 1) % items.length\r\n  }, 2000)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UTimeline v-model=\"active\" :items=\"items\" class=\"w-96\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/timeline/TimelineModelValueExample.vue",
    "pascalName": "TimelineModelValueExample"
  },
  "TimelineSlotsExample": {
    "code": "<script lang=\"ts\" setup>\r\nimport type { TimelineItem } from '@nuxt/ui'\r\nimport { useTimeAgo } from '@vueuse/core'\r\n\r\nconst items = [{\r\n  username: 'J-Michalek',\r\n  date: '2025-05-24T14:58:55Z',\r\n  action: 'opened this',\r\n  avatar: {\r\n    src: 'https://github.com/J-Michalek.png'\r\n  }\r\n}, {\r\n  username: 'J-Michalek',\r\n  date: '2025-05-26T19:30:14+02:00',\r\n  action: 'marked this pull request as ready for review',\r\n  icon: 'i-lucide-check-circle'\r\n}, {\r\n  username: 'benjamincanac',\r\n  date: '2025-05-27T11:01:20Z',\r\n  action: 'commented on this',\r\n  description: 'I\\'ve made a few changes, let me know what you think! Basically I updated the design, removed unnecessary divs, used Avatar component for the indicator since it supports icon already.',\r\n  avatar: {\r\n    src: 'https://github.com/benjamincanac.png'\r\n  }\r\n}, {\r\n  username: 'J-Michalek',\r\n  date: '2025-05-27T11:01:20Z',\r\n  action: 'commented on this',\r\n  description: 'Looks great! Good job on cleaning it up.',\r\n  avatar: {\r\n    src: 'https://github.com/J-Michalek.png'\r\n  }\r\n}, {\r\n  username: 'benjamincanac',\r\n  date: '2025-05-27T11:01:20Z',\r\n  action: 'merged this',\r\n  icon: 'i-lucide-git-merge'\r\n}] satisfies TimelineItem[]\r\n</script>\r\n\r\n<template>\r\n  <UTimeline\r\n    :items=\"items\"\r\n    size=\"xs\"\r\n    :ui=\"{\r\n      date: 'float-end ms-1',\r\n      description: 'px-3 py-2 ring ring-default mt-2 rounded-md text-default'\r\n    }\"\r\n    class=\"w-96\"\r\n  >\r\n    <template #title=\"{ item }\">\r\n      <span>{{ item.username }}</span>\r\n      <span class=\"font-normal text-muted\">&nbsp;{{ item.action }}</span>\r\n    </template>\r\n\r\n    <template #date=\"{ item }\">\r\n      {{ useTimeAgo(new Date(item.date)) }}\r\n    </template>\r\n  </UTimeline>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/timeline/TimelineSlotsExample.vue",
    "pascalName": "TimelineSlotsExample"
  },
  "ToastActionsExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nconst props = defineProps<{\r\n  description: string\r\n}>()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    description: props.description,\r\n    actions: [{\r\n      icon: 'i-lucide-refresh-cw',\r\n      label: 'Retry',\r\n      color: 'neutral',\r\n      variant: 'outline',\r\n      onClick: (e) => {\r\n        e?.stopPropagation()\r\n      }\r\n    }]\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastActionsExample.vue",
    "pascalName": "ToastActionsExample"
  },
  "ToastAvatarExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { AvatarProps } from '@nuxt/ui'\r\n\r\nconst props = defineProps<{\r\n  avatar: AvatarProps\r\n}>()\r\n\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'User invited',\r\n    description: 'benjamincanac was invited to the team.',\r\n    avatar: props.avatar\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Invite user\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastAvatarExample.vue",
    "pascalName": "ToastAvatarExample"
  },
  "ToastCloseExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    description: 'There was a problem with your request.',\r\n    icon: 'i-lucide-wifi',\r\n    close: {\r\n      color: 'primary',\r\n      variant: 'outline',\r\n      class: 'rounded-full'\r\n    }\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastCloseExample.vue",
    "pascalName": "ToastCloseExample"
  },
  "ToastCloseIconExample": {
    "code": "<script setup lang=\"ts\">\r\nconst props = defineProps<{\r\n  closeIcon: string\r\n}>()\r\n\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    description: 'There was a problem with your request.',\r\n    closeIcon: props.closeIcon\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastCloseIconExample.vue",
    "pascalName": "ToastCloseIconExample"
  },
  "ToastColorExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { ToastProps } from '@nuxt/ui'\r\n\r\nconst props = defineProps<{\r\n  color: ToastProps['color']\r\n}>()\r\n\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    description: 'There was a problem with your request.',\r\n    icon: 'i-lucide-wifi',\r\n    color: props.color\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastColorExample.vue",
    "pascalName": "ToastColorExample"
  },
  "ToastDescriptionExample": {
    "code": "<script setup lang=\"ts\">\r\nconst props = defineProps<{\r\n  title: string\r\n  description: string\r\n}>()\r\n\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add(props)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastDescriptionExample.vue",
    "pascalName": "ToastDescriptionExample"
  },
  "ToastExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nfunction addToCalendar() {\r\n  const eventDate = new Date(Date.now() + Math.random() * 31536000000)\r\n  const formattedDate = eventDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })\r\n\r\n  toast.add({\r\n    title: 'Event added to calendar',\r\n    description: `This event is scheduled for ${formattedDate}.`,\r\n    icon: 'i-lucide-calendar-days'\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Add to calendar\" color=\"neutral\" variant=\"outline\" icon=\"i-lucide-plus\" @click=\"addToCalendar\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastExample.vue",
    "pascalName": "ToastExample"
  },
  "ToastIconExample": {
    "code": "<script setup lang=\"ts\">\r\nconst props = defineProps<{\r\n  icon: string\r\n}>()\r\n\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    description: 'There was a problem with your request.',\r\n    icon: props.icon\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastIconExample.vue",
    "pascalName": "ToastIconExample"
  },
  "ToastOrientationExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nconst props = defineProps<{\r\n  orientation: 'horizontal' | 'vertical'\r\n}>()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    orientation: props.orientation,\r\n    actions: [{\r\n      icon: 'i-lucide-refresh-cw',\r\n      label: 'Retry',\r\n      color: 'neutral',\r\n      variant: 'outline',\r\n      onClick: (e) => {\r\n        e?.stopPropagation()\r\n      }\r\n    }]\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastOrientationExample.vue",
    "pascalName": "ToastOrientationExample"
  },
  "ToastProgressExample": {
    "code": "<script setup lang=\"ts\">\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add({\r\n    title: 'Uh oh! Something went wrong.',\r\n    description: 'There was a problem with your request.',\r\n    icon: 'i-lucide-wifi',\r\n    progress: false\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastProgressExample.vue",
    "pascalName": "ToastProgressExample"
  },
  "ToastTitleExample": {
    "code": "<script setup lang=\"ts\">\r\nconst props = defineProps<{\r\n  title: string\r\n}>()\r\n\r\nconst toast = useToast()\r\n\r\nfunction showToast() {\r\n  toast.add(props)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <UButton label=\"Show toast\" color=\"neutral\" variant=\"outline\" @click=\"showToast\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toast/ToastTitleExample.vue",
    "pascalName": "ToastTitleExample"
  },
  "ToasterDurationExample": {
    "code": "<script setup lang=\"ts\">\r\nconst appConfig = useAppConfig()\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <UFormField\r\n      label=\"toaster.duration\"\r\n      size=\"sm\"\r\n      :ui=\"{\r\n        wrapper: 'bg-elevated/50 rounded-l-sm flex border-r border-accented',\r\n        label: 'text-muted px-2 py-1.5',\r\n        container: 'mt-0'\r\n      }\"\r\n      class=\"inline-flex ring ring-accented rounded-sm\"\r\n    >\r\n      <UInput\r\n        v-model=\"appConfig.toaster.duration\"\r\n        color=\"neutral\"\r\n        variant=\"soft\"\r\n        :ui=\"{ base: 'rounded-sm rounded-l-none min-w-12' }\"\r\n      />\r\n    </UFormField>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toaster/ToasterDurationExample.vue",
    "pascalName": "ToasterDurationExample"
  },
  "ToasterExpandExample": {
    "code": "<script setup lang=\"ts\">\r\nconst appConfig = useAppConfig()\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <UFormField\r\n      label=\"toaster.expand\"\r\n      size=\"sm\"\r\n      :ui=\"{\r\n        wrapper: 'bg-elevated/50 rounded-l-sm flex border-r border-accented',\r\n        label: 'text-muted px-2 py-1.5',\r\n        container: 'mt-0'\r\n      }\"\r\n      class=\"inline-flex ring ring-accented rounded-sm\"\r\n    >\r\n      <USelectMenu\r\n        v-model=\"appConfig.toaster.expand\"\r\n        :items=\"[true, false]\"\r\n        color=\"neutral\"\r\n        variant=\"soft\"\r\n        class=\"rounded-sm rounded-l-none min-w-12\"\r\n        :search-input=\"false\"\r\n      />\r\n    </UFormField>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toaster/ToasterExpandExample.vue",
    "pascalName": "ToasterExpandExample"
  },
  "ToasterPositionExample": {
    "code": "<script setup lang=\"ts\">\r\nimport theme from '#build/ui/toaster'\r\n\r\nconst positions = Object.keys(theme.variants.position)\r\nconst appConfig = useAppConfig()\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <UFormField\r\n      label=\"toaster.position\"\r\n      size=\"sm\"\r\n      :ui=\"{\r\n        wrapper: 'bg-elevated/50 rounded-l-sm flex border-r border-accented',\r\n        label: 'text-muted px-2 py-1.5',\r\n        container: 'mt-0'\r\n      }\"\r\n      class=\"inline-flex ring ring-accented rounded-sm\"\r\n    >\r\n      <USelectMenu\r\n        v-model=\"appConfig.toaster.position\"\r\n        :items=\"positions\"\r\n        color=\"neutral\"\r\n        variant=\"soft\"\r\n        class=\"rounded-sm rounded-l-none min-w-12\"\r\n        :search-input=\"false\"\r\n      />\r\n    </UFormField>\r\n  </div>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/toaster/ToasterPositionExample.vue",
    "pascalName": "ToasterPositionExample"
  },
  "TooltipCursorExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\nconst anchor = ref({ x: 0, y: 0 })\r\n\r\nconst reference = computed(() => ({\r\n  getBoundingClientRect: () =>\r\n    ({\r\n      width: 0,\r\n      height: 0,\r\n      left: anchor.value.x,\r\n      right: anchor.value.x,\r\n      top: anchor.value.y,\r\n      bottom: anchor.value.y,\r\n      ...anchor.value\r\n    } as DOMRect)\r\n}))\r\n</script>\r\n\r\n<template>\r\n  <UTooltip\r\n    :open=\"open\"\r\n    :reference=\"reference\"\r\n    :content=\"{ side: 'top', sideOffset: 16, updatePositionStrategy: 'always' }\"\r\n  >\r\n    <div\r\n      class=\"flex items-center justify-center rounded-md border border-dashed border-accented text-sm aspect-video w-72\"\r\n      @pointerenter=\"open = true\"\r\n      @pointerleave=\"open = false\"\r\n      @pointermove=\"(ev) => {\r\n        anchor.x = ev.clientX\r\n        anchor.y = ev.clientY\r\n      }\"\r\n    >\r\n      Hover me\r\n    </div>\r\n\r\n    <template #content>\r\n      {{ anchor.x.toFixed(0) }} - {{ anchor.y.toFixed(0) }}\r\n    </template>\r\n  </UTooltip>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tooltip/TooltipCursorExample.vue",
    "pascalName": "TooltipCursorExample"
  },
  "TooltipOpenExample": {
    "code": "<script setup lang=\"ts\">\r\nconst open = ref(false)\r\n\r\ndefineShortcuts({\r\n  o: () => open.value = !open.value\r\n})\r\n</script>\r\n\r\n<template>\r\n  <UTooltip v-model:open=\"open\" text=\"Open on GitHub\">\r\n    <UButton label=\"Open\" color=\"neutral\" variant=\"subtle\" />\r\n  </UTooltip>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tooltip/TooltipOpenExample.vue",
    "pascalName": "TooltipOpenExample"
  },
  "TreeCustomSlotExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TreeItem } from '@nuxt/ui'\r\n\r\nconst items = [\r\n  {\r\n    label: 'app/',\r\n    slot: 'app' as const,\r\n    defaultExpanded: true,\r\n    children: [\r\n      {\r\n        label: 'composables/',\r\n        children: [\r\n          { label: 'useAuth.ts', icon: 'i-vscode-icons-file-type-typescript' },\r\n          { label: 'useUser.ts', icon: 'i-vscode-icons-file-type-typescript' }\r\n        ]\r\n      },\r\n      {\r\n        label: 'components/',\r\n        defaultExpanded: true,\r\n        children: [\r\n          { label: 'Card.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n          { label: 'Button.vue', icon: 'i-vscode-icons-file-type-vue' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { label: 'app.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n  { label: 'nuxt.config.ts', icon: 'i-vscode-icons-file-type-nuxt' }\r\n] satisfies TreeItem[]\r\n</script>\r\n\r\n<template>\r\n  <UTree :items=\"items\">\r\n    <template #app=\"{ item }\">\r\n      <p class=\"italic font-bold\">\r\n        {{ item.label }}\r\n      </p>\r\n    </template>\r\n  </UTree>\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tree/TreeCustomSlotExample.vue",
    "pascalName": "TreeCustomSlotExample"
  },
  "TreeExpandedExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TreeItem } from '@nuxt/ui'\r\n\r\nconst items: TreeItem[] = [\r\n  {\r\n    label: 'app/',\r\n    value: 'app',\r\n    children: [\r\n      {\r\n        label: 'composables/',\r\n        value: 'composables',\r\n        children: [\r\n          { label: 'useAuth.ts', icon: 'i-vscode-icons-file-type-typescript' },\r\n          { label: 'useUser.ts', icon: 'i-vscode-icons-file-type-typescript' }\r\n        ]\r\n      },\r\n      {\r\n        label: 'components/',\r\n        value: 'components',\r\n        children: [\r\n          { label: 'Card.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n          { label: 'Button.vue', icon: 'i-vscode-icons-file-type-vue' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { label: 'app.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n  { label: 'nuxt.config.ts', icon: 'i-vscode-icons-file-type-nuxt' }\r\n]\r\n\r\nconst expanded = ref(['app', 'composables'])\r\n</script>\r\n\r\n<template>\r\n  <UTree v-model:expanded=\"expanded\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tree/TreeExpandedExample.vue",
    "pascalName": "TreeExpandedExample"
  },
  "TreeModelValueExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TreeItem } from '@nuxt/ui'\r\n\r\nconst items: TreeItem[] = [\r\n  {\r\n    label: 'app/',\r\n    defaultExpanded: true,\r\n    children: [\r\n      {\r\n        label: 'composables/',\r\n        children: [\r\n          { label: 'useAuth.ts', icon: 'i-vscode-icons-file-type-typescript' },\r\n          { label: 'useUser.ts', icon: 'i-vscode-icons-file-type-typescript' }\r\n        ]\r\n      },\r\n      {\r\n        label: 'components/',\r\n        defaultExpanded: true,\r\n        children: [\r\n          { label: 'Card.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n          { label: 'Button.vue', icon: 'i-vscode-icons-file-type-vue' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { label: 'app.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n  { label: 'nuxt.config.ts', icon: 'i-vscode-icons-file-type-nuxt' }\r\n]\r\n\r\nconst value = ref()\r\n</script>\r\n\r\n<template>\r\n  <UTree v-model=\"value\" :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tree/TreeModelValueExample.vue",
    "pascalName": "TreeModelValueExample"
  },
  "TreeOnSelectExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TreeItem } from '@nuxt/ui'\r\n\r\nconst items: TreeItem[] = [\r\n  {\r\n    label: 'app/',\r\n    defaultExpanded: true,\r\n    onSelect: (e: Event) => {\r\n      e.preventDefault()\r\n    },\r\n    children: [\r\n      {\r\n        label: 'composables/',\r\n        children: [\r\n          { label: 'useAuth.ts', icon: 'i-vscode-icons-file-type-typescript' },\r\n          { label: 'useUser.ts', icon: 'i-vscode-icons-file-type-typescript' }\r\n        ]\r\n      },\r\n      {\r\n        label: 'components/',\r\n        defaultExpanded: true,\r\n        children: [\r\n          { label: 'Card.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n          { label: 'Button.vue', icon: 'i-vscode-icons-file-type-vue' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { label: 'app.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n  { label: 'nuxt.config.ts', icon: 'i-vscode-icons-file-type-nuxt' }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UTree :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tree/TreeOnSelectExample.vue",
    "pascalName": "TreeOnSelectExample"
  },
  "TreeOnToggleExample": {
    "code": "<script setup lang=\"ts\">\r\nimport type { TreeItem } from '@nuxt/ui'\r\n\r\nconst items: TreeItem[] = [\r\n  {\r\n    label: 'app/',\r\n    defaultExpanded: true,\r\n    onToggle: (e: Event) => {\r\n      e.preventDefault()\r\n    },\r\n    children: [\r\n      {\r\n        label: 'composables/',\r\n        children: [\r\n          { label: 'useAuth.ts', icon: 'i-vscode-icons-file-type-typescript' },\r\n          { label: 'useUser.ts', icon: 'i-vscode-icons-file-type-typescript' }\r\n        ]\r\n      },\r\n      {\r\n        label: 'components/',\r\n        defaultExpanded: true,\r\n        children: [\r\n          { label: 'Card.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n          { label: 'Button.vue', icon: 'i-vscode-icons-file-type-vue' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  { label: 'app.vue', icon: 'i-vscode-icons-file-type-vue' },\r\n  { label: 'nuxt.config.ts', icon: 'i-vscode-icons-file-type-nuxt' }\r\n]\r\n</script>\r\n\r\n<template>\r\n  <UTree :items=\"items\" />\r\n</template>\r\n",
    "filePath": "E:/PROJECT/mydocsui/app/components/content/examples/tree/TreeOnToggleExample.vue",
    "pascalName": "TreeOnToggleExample"
  }
}