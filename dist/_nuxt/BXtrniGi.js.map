{"version":3,"file":"BXtrniGi.js","names":["cell","column","orderColumns","h","min","max","sum","count","header","e","row","options","columnDefs","rowsToFilter"],"sources":["../../node_modules/.cache/.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/index.mjs","../../node_modules/.cache/.pnpm/@tanstack+vue-table@8.21.3_vue@3.5.21_typescript@5.9.2_/node_modules/@tanstack/vue-table/build/lib/index.mjs","../../node_modules/.cache/.pnpm/@nuxt+ui@3.3.4_@babel+parse_c3d95c3d0565f332bf4c2ec172da2bba/node_modules/@nuxt/ui/dist/runtime/components/Table.vue"],"sourcesContent":["/**\n   * table-core\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return depArgs => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps(depArgs);\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null || opts.onChange == null || opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction getMemoOptions(tableOptions, debugLevel, key, onChange) {\n  return {\n    debug: () => {\n      var _tableOptions$debugAl;\n      return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];\n    },\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange\n  };\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), getMemoOptions(table.options, 'debugCells', 'cell.getContext'))\n  };\n  table._features.forEach(feature => {\n    feature.createCell == null || feature.createCell(cell, column, row, table);\n  }, {});\n  return cell;\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? typeof String.prototype.replaceAll === 'function' ? accessorKey.replaceAll('.', '_') : accessorKey.replace(/\\./g, '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns'))\n  };\n  for (const feature of table._features) {\n    feature.createColumn == null || feature.createColumn(column, table);\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column;\n}\n\nconst debug = 'debugHeaders';\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createHeader == null || feature.createHeader(header, table);\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      var _left$map$filter, _right$map$filter;\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n      return headerGroups;\n    }, getMemoOptions(table.options, debug, 'getHeaderGroups'));\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n    }, getMemoOptions(table.options, debug, 'getCenterHeaderGroups'));\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n      var _left$map$filter2;\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n    }, getMemoOptions(table.options, debug, 'getLeftHeaderGroups'));\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n      var _right$map$filter2;\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n    }, getMemoOptions(table.options, debug, 'getRightHeaderGroups'));\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getFooterGroups'));\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getLeftFooterGroups'));\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getCenterFooterGroups'));\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getRightFooterGroups'));\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return headerGroups.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getFlatHeaders'));\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeftFlatHeaders'));\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getCenterFlatHeaders'));\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getRightFlatHeaders'));\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders;\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getCenterLeafHeaders'));\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders2;\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getLeftLeafHeaders'));\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders3;\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getRightLeafHeaders'));\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n        return header.getLeafHeaders();\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeafHeaders'));\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCells')),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId'))\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    feature == null || feature.createRow == null || feature.createRow(row, table);\n  }\n  return row;\n};\n\n//\n\nconst ColumnFaceting = {\n  createColumn: (column, table) => {\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return column._getFacetedRowModel();\n    };\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map();\n      }\n      return column._getFacetedUniqueValues();\n    };\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined;\n      }\n      return column._getFacetedMinMaxValues();\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _filterValue$toString, _row$getValue;\n  const search = filterValue == null || (_filterValue$toString = filterValue.toString()) == null ? void 0 : _filterValue$toString.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst ColumnFiltering = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return filterFns.includesString;\n      }\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange;\n      }\n      if (typeof value === 'boolean') {\n        return filterFns.equals;\n      }\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals;\n      }\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes;\n      }\n      return filterFns.weakEquals;\n    };\n    column.getFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n    };\n    column.getCanFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n    };\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\n    column.getFilterValue = () => {\n      var _table$getState$colum;\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\n    };\n    column.getFilterIndex = () => {\n      var _table$getState$colum2, _table$getState$colum3;\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\n    };\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn();\n        const previousFilter = old == null ? void 0 : old.find(d => d.id === column.id);\n        const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : undefined);\n\n        //\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n          var _old$filter;\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n        }\n        const newFilterObj = {\n          id: column.id,\n          value: newFilter\n        };\n        if (previousFilter) {\n          var _old$map;\n          return (_old$map = old == null ? void 0 : old.map(d => {\n            if (d.id === column.id) {\n              return newFilterObj;\n            }\n            return d;\n          })) != null ? _old$map : [];\n        }\n        if (old != null && old.length) {\n          return [...old, newFilterObj];\n        }\n        return [newFilterObj];\n      });\n    };\n  },\n  createRow: (row, _table) => {\n    row.columnFilters = {};\n    row.columnFiltersMeta = {};\n  },\n  createTable: table => {\n    table.setColumnFilters = updater => {\n      const leafColumns = table.getAllLeafColumns();\n      const updateFn = old => {\n        var _functionalUpdate;\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id);\n          if (column) {\n            const filterFn = column.getFilterFn();\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      };\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\n    };\n    table.resetColumnFilters = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n    };\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n      }\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getFilteredRowModel();\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst ColumnGrouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old != null && old.includes(column.id)) {\n          return old.filter(d => d !== column.id);\n        }\n        return [...(old != null ? old : []), column.id];\n      });\n    };\n    column.getCanGroup = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGrouping) != null ? _table$options$enable : true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);\n    };\n    column.getIsGrouped = () => {\n      var _table$getState$group;\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n    };\n    column.getGroupedIndex = () => {\n      var _table$getState$group2;\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n    };\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup();\n      return () => {\n        if (!canGroup) return;\n        column.toggleGrouping();\n      };\n    };\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'number') {\n        return aggregationFns.sum;\n      }\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent;\n      }\n    };\n    column.getAggregationFn = () => {\n      var _table$options$aggreg, _table$options$aggreg2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n    };\n  },\n  createTable: table => {\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n    table.resetGrouping = defaultState => {\n      var _table$initialState$g, _table$initialState;\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n    };\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n      }\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel();\n      }\n      return table._getGroupedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.getIsGrouped = () => !!row.groupingColumnId;\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.columnDef.getGroupingValue)) {\n        return row.getValue(columnId);\n      }\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n      return row._groupingValuesCache[columnId];\n    };\n    row._groupingValuesCache = {};\n  },\n  createCell: (cell, column, row, table) => {\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\n    cell.getIsAggregated = () => {\n      var _row$subRows;\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst ColumnOrdering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getIndex = memo(position => [_getVisibleLeafColumns(table, position)], columns => columns.findIndex(d => d.id === column.id), getMemoOptions(table.options, 'debugColumns', 'getIndex'));\n    column.getIsFirstColumn = position => {\n      var _columns$;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;\n    };\n    column.getIsLastColumn = position => {\n      var _columns;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;\n    };\n  },\n  createTable: table => {\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n    table.resetColumnOrder = defaultState => {\n      var _table$initialState$c;\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n    };\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n      // Sort grouped columns to the start of the column list\n      // before the headers are built\n      let orderedColumns = [];\n\n      // If there is no order, return the normal columns\n      if (!(columnOrder != null && columnOrder.length)) {\n        orderedColumns = columns;\n      } else {\n        const columnOrderCopy = [...columnOrder];\n\n        // If there is an order, make a copy of the columns\n        const columnsCopy = [...columns];\n\n        // And make a new ordered array of the columns\n\n        // Loop over the columns and place them in order into the new array\n        while (columnsCopy.length && columnOrderCopy.length) {\n          const targetColumnId = columnOrderCopy.shift();\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n          if (foundIndex > -1) {\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n          }\n        }\n\n        // If there are any columns left, add them to the end\n        orderedColumns = [...orderedColumns, ...columnsCopy];\n      }\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\n    }, getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn'));\n  }\n};\n\n//\n\nconst getDefaultColumnPinningState = () => ({\n  left: [],\n  right: []\n});\nconst ColumnPinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.pin = position => {\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n      table.setColumnPinning(old => {\n        var _old$left3, _old$right3;\n        if (position === 'right') {\n          var _old$left, _old$right;\n          return {\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n          };\n        }\n        if (position === 'left') {\n          var _old$left2, _old$right2;\n          return {\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        }\n        return {\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n        };\n      });\n    };\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns();\n      return leafColumns.some(d => {\n        var _d$columnDef$enablePi, _ref, _table$options$enable;\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);\n      });\n    };\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\n      const {\n        left,\n        right\n      } = table.getState().columnPinning;\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n      return isLeft ? 'left' : isRight ? 'right' : false;\n    };\n    column.getPinnedIndex = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      const position = column.getIsPinned();\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n    };\n  },\n  createRow: (row, table) => {\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells'));\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'left'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells'));\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'right'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells'));\n  },\n  createTable: table => {\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n    table.resetColumnPinning = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());\n    };\n    table.getIsSomeColumnsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().columnPinning;\n      if (!position) {\n        var _pinningState$left, _pinningState$right;\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns'));\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns'));\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\n    }, getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns'));\n  }\n};\n\nfunction safelyAccessDocument(_document) {\n  return _document || (typeof document !== 'undefined' ? document : null);\n}\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getSize = () => {\n      var _column$columnDef$min, _ref, _column$columnDef$max;\n      const columnSize = table.getState().columnSizing[column.id];\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n    };\n    column.getStart = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getStart'));\n    column.getAfter = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getAfter'));\n    column.resetSize = () => {\n      table.setColumnSizing(_ref2 => {\n        let {\n          [column.id]: _,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    };\n    column.getCanResize = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n    };\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\n    };\n  },\n  createHeader: (header, table) => {\n    header.getSize = () => {\n      let sum = 0;\n      const recurse = header => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse);\n        } else {\n          var _header$column$getSiz;\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n        }\n      };\n      recurse(header);\n      return sum;\n    };\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n      }\n      return 0;\n    };\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id);\n      const canResize = column == null ? void 0 : column.getCanResize();\n      return e => {\n        if (!column || !canResize) {\n          return;\n        }\n        e.persist == null || e.persist();\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return;\n          }\n        }\n        const startSize = header.getSize();\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n        const newColumnSizing = {};\n        const updateOffset = (eventType, clientXPos) => {\n          if (typeof clientXPos !== 'number') {\n            return;\n          }\n          table.setColumnSizingInfo(old => {\n            var _old$startOffset, _old$startSize;\n            const deltaDirection = table.options.columnResizeDirection === 'rtl' ? -1 : 1;\n            const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n            old.columnSizingStart.forEach(_ref3 => {\n              let [columnId, headerSize] = _ref3;\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n            });\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage\n            };\n          });\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing\n            }));\n          }\n        };\n        const onMove = clientXPos => updateOffset('move', clientXPos);\n        const onEnd = clientXPos => {\n          updateOffset('end', clientXPos);\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: []\n          }));\n        };\n        const contextDocument = safelyAccessDocument(_contextDocument);\n        const mouseEvents = {\n          moveHandler: e => onMove(e.clientX),\n          upHandler: e => {\n            contextDocument == null || contextDocument.removeEventListener('mousemove', mouseEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('mouseup', mouseEvents.upHandler);\n            onEnd(e.clientX);\n          }\n        };\n        const touchEvents = {\n          moveHandler: e => {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onMove(e.touches[0].clientX);\n            return false;\n          },\n          upHandler: e => {\n            var _e$touches$;\n            contextDocument == null || contextDocument.removeEventListener('touchmove', touchEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('touchend', touchEvents.upHandler);\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n          }\n        };\n        const passiveIfSupported = passiveEventSupported() ? {\n          passive: false\n        } : false;\n        if (isTouchStartEvent(e)) {\n          contextDocument == null || contextDocument.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n        } else {\n          contextDocument == null || contextDocument.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n        }\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id\n        }));\n      };\n    };\n  },\n  createTable: table => {\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n    table.resetColumnSizing = defaultState => {\n      var _table$initialState$c;\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n    };\n    table.resetHeaderSizeInfo = defaultState => {\n      var _table$initialState$c2;\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n    };\n    table.getTotalSize = () => {\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getHeaderGroup : 0;\n    };\n    table.getLeftTotalSize = () => {\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\n    };\n    table.getCenterTotalSize = () => {\n      var _table$getCenterHeade, _table$getCenterHeade2;\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getCenterHeade : 0;\n    };\n    table.getRightTotalSize = () => {\n      var _table$getRightHeader, _table$getRightHeader2;\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getRightHeader : 0;\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst ColumnVisibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value != null ? value : !column.getIsVisible()\n        }));\n      }\n    };\n    column.getIsVisible = () => {\n      var _ref, _table$getState$colum;\n      const childColumns = column.columns;\n      return (_ref = childColumns.length ? childColumns.some(c => c.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;\n    };\n    column.getCanHide = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n    };\n    column.getToggleVisibilityHandler = () => {\n      return e => {\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n      return cells.filter(cell => cell.column.getIsVisible());\n    }, getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells'));\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, 'debugRows', 'getVisibleCells'));\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, getMemoOptions(table.options, 'debugColumns', key));\n    };\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n    table.resetColumnVisibility = defaultState => {\n      var _table$initialState$c;\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n    };\n    table.toggleAllColumnsVisible = value => {\n      var _value;\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n        ...obj,\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n      }), {}));\n    };\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return e => {\n        var _target;\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nfunction _getVisibleLeafColumns(table, position) {\n  return !position ? table.getVisibleLeafColumns() : position === 'center' ? table.getCenterVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n}\n\n//\n\nconst GlobalFaceting = {\n  createTable: table => {\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getGlobalFacetedRowModel();\n    };\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map();\n      }\n      return table._getGlobalFacetedUniqueValues();\n    };\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return;\n      }\n      return table._getGlobalFacetedMinMaxValues();\n    };\n  }\n};\n\n//\n\nconst GlobalFiltering = {\n  getInitialState: state => {\n    return {\n      globalFilter: undefined,\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getCanGlobalFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;\n      return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n    };\n  },\n  createTable: table => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString;\n    };\n    table.getGlobalFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      const {\n        globalFilterFn: globalFilterFn\n      } = table.options;\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];\n    };\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\n    };\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n    };\n  }\n};\n\n//\n\nconst RowExpanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetExpanded = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetExpanded();\n          queued = false;\n        });\n      }\n    };\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true);\n      } else {\n        table.setExpanded({});\n      }\n    };\n    table.resetExpanded = defaultState => {\n      var _table$initialState$e, _table$initialState;\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n    };\n    table.getCanSomeRowsExpand = () => {\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n    };\n    table.getToggleAllRowsExpandedHandler = () => {\n      return e => {\n        e.persist == null || e.persist();\n        table.toggleAllRowsExpanded();\n      };\n    };\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n      return expanded === true || Object.values(expanded).some(Boolean);\n    };\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true;\n      }\n      if (!Object.keys(expanded).length) {\n        return false;\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false;\n      }\n\n      // They must all be expanded :shrug:\n      return true;\n    };\n    table.getExpandedDepth = () => {\n      let maxDepth = 0;\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n      rowIds.forEach(id => {\n        const splitId = id.split('.');\n        maxDepth = Math.max(maxDepth, splitId.length);\n      });\n      return maxDepth;\n    };\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n      }\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel();\n      }\n      return table._getExpandedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        var _expanded;\n        const exists = old === true ? true : !!(old != null && old[row.id]);\n        let oldExpanded = {};\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true;\n          });\n        } else {\n          oldExpanded = old;\n        }\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true\n          };\n        }\n        if (exists && !expanded) {\n          const {\n            [row.id]: _,\n            ...rest\n          } = oldExpanded;\n          return rest;\n        }\n        return old;\n      });\n    };\n    row.getIsExpanded = () => {\n      var _table$options$getIsR;\n      const expanded = table.getState().expanded;\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n    };\n    row.getCanExpand = () => {\n      var _table$options$getRow, _table$options$enable, _row$subRows;\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true;\n      let currentRow = row;\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true);\n        isFullyExpanded = currentRow.getIsExpanded();\n      }\n      return isFullyExpanded;\n    };\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand();\n      return () => {\n        if (!canExpand) return;\n        row.toggleExpanded();\n      };\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst RowPagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetPageIndex = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetPageIndex();\n          queued = false;\n        });\n      }\n    };\n    table.setPagination = updater => {\n      const safeUpdater = old => {\n        let newState = functionalUpdate(updater, old);\n        return newState;\n      };\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n    };\n    table.resetPagination = defaultState => {\n      var _table$initialState$p;\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n    };\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n        return {\n          ...old,\n          pageIndex\n        };\n      });\n    };\n    table.resetPageIndex = defaultState => {\n      var _table$initialState$p2, _table$initialState;\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n    };\n    table.resetPageSize = defaultState => {\n      var _table$initialState$p3, _table$initialState2;\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n    };\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n        const topRowIndex = old.pageSize * old.pageIndex;\n        const pageIndex = Math.floor(topRowIndex / pageSize);\n        return {\n          ...old,\n          pageIndex,\n          pageSize\n        };\n      });\n    };\n    //deprecated\n    table.setPageCount = updater => table.setPagination(old => {\n      var _table$options$pageCo;\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n      if (typeof newPageCount === 'number') {\n        newPageCount = Math.max(-1, newPageCount);\n      }\n      return {\n        ...old,\n        pageCount: newPageCount\n      };\n    });\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\n      let pageOptions = [];\n      if (pageCount && pageCount > 0) {\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n      }\n      return pageOptions;\n    }, getMemoOptions(table.options, 'debugTable', 'getPageOptions'));\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\n    table.getCanNextPage = () => {\n      const {\n        pageIndex\n      } = table.getState().pagination;\n      const pageCount = table.getPageCount();\n      if (pageCount === -1) {\n        return true;\n      }\n      if (pageCount === 0) {\n        return false;\n      }\n      return pageIndex < pageCount - 1;\n    };\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1);\n    };\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1;\n      });\n    };\n    table.firstPage = () => {\n      return table.setPageIndex(0);\n    };\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1);\n    };\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\n    table.getPaginationRowModel = () => {\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n      }\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel();\n      }\n      return table._getPaginationRowModel();\n    };\n    table.getPageCount = () => {\n      var _table$options$pageCo2;\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);\n    };\n    table.getRowCount = () => {\n      var _table$options$rowCou;\n      return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;\n    };\n  }\n};\n\n//\n\nconst getDefaultRowPinningState = () => ({\n  top: [],\n  bottom: []\n});\nconst RowPinning = {\n  getInitialState: state => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table)\n    };\n  },\n  createRow: (row, table) => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows ? row.getLeafRows().map(_ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }) : [];\n      const parentRowIds = includeParentRows ? row.getParentRows().map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return id;\n      }) : [];\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds]);\n      table.setRowPinning(old => {\n        var _old$top3, _old$bottom3;\n        if (position === 'bottom') {\n          var _old$top, _old$bottom;\n          return {\n            top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter(d => !(rowIds != null && rowIds.has(d))),\n            bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]\n          };\n        }\n        if (position === 'top') {\n          var _old$top2, _old$bottom2;\n          return {\n            top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],\n            bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n          };\n        }\n        return {\n          top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter(d => !(rowIds != null && rowIds.has(d))),\n          bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n        };\n      });\n    };\n    row.getCanPin = () => {\n      var _ref3;\n      const {\n        enableRowPinning,\n        enablePinning\n      } = table.options;\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row);\n      }\n      return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;\n    };\n    row.getIsPinned = () => {\n      const rowIds = [row.id];\n      const {\n        top,\n        bottom\n      } = table.getState().rowPinning;\n      const isTop = rowIds.some(d => top == null ? void 0 : top.includes(d));\n      const isBottom = rowIds.some(d => bottom == null ? void 0 : bottom.includes(d));\n      return isTop ? 'top' : isBottom ? 'bottom' : false;\n    };\n    row.getPinnedIndex = () => {\n      var _ref4, _visiblePinnedRowIds$;\n      const position = row.getIsPinned();\n      if (!position) return -1;\n      const visiblePinnedRowIds = (_ref4 = position === 'top' ? table.getTopRows() : table.getBottomRows()) == null ? void 0 : _ref4.map(_ref5 => {\n        let {\n          id\n        } = _ref5;\n        return id;\n      });\n      return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;\n    };\n  },\n  createTable: table => {\n    table.setRowPinning = updater => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);\n    table.resetRowPinning = defaultState => {\n      var _table$initialState$r, _table$initialState;\n      return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());\n    };\n    table.getIsSomeRowsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().rowPinning;\n      if (!position) {\n        var _pinningState$top, _pinningState$bottom;\n        return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table._getPinnedRows = (visibleRows, pinnedRowIds, position) => {\n      var _table$options$keepPi;\n      const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ?\n      //get all rows that are pinned even if they would not be otherwise visible\n      //account for expanded parent rows, but not pagination or filtering\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => {\n        const row = table.getRow(rowId, true);\n        return row.getIsAllParentsExpanded() ? row : null;\n      }) :\n      //else get only visible rows that are pinned\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => visibleRows.find(row => row.id === rowId));\n      return rows.filter(Boolean).map(d => ({\n        ...d,\n        position\n      }));\n    };\n    table.getTopRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top], (allRows, topPinnedRowIds) => table._getPinnedRows(allRows, topPinnedRowIds, 'top'), getMemoOptions(table.options, 'debugRows', 'getTopRows'));\n    table.getBottomRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.bottom], (allRows, bottomPinnedRowIds) => table._getPinnedRows(allRows, bottomPinnedRowIds, 'bottom'), getMemoOptions(table.options, 'debugRows', 'getBottomRows'));\n    table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {\n      const topAndBottom = new Set([...(top != null ? top : []), ...(bottom != null ? bottom : [])]);\n      return allRows.filter(d => !topAndBottom.has(d.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterRows'));\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n  createTable: table => {\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n    table.resetRowSelection = defaultState => {\n      var _table$initialState$r;\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n    };\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return;\n            }\n            rowSelection[row.id] = true;\n          });\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id];\n          });\n        }\n        return rowSelection;\n      });\n    };\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n      const rowSelection = {\n        ...old\n      };\n      table.getRowModel().rows.forEach(row => {\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);\n      });\n      return rowSelection;\n    });\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel'));\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel'));\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel'));\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n      if (isAllRowsSelected) {\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n          isAllRowsSelected = false;\n        }\n      }\n      return isAllRowsSelected;\n    };\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n        isAllPageRowsSelected = false;\n      }\n      return isAllPageRowsSelected;\n    };\n    table.getIsSomeRowsSelected = () => {\n      var _table$getState$rowSe;\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n    };\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n    };\n    table.getToggleAllRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllRowsSelected(e.target.checked);\n      };\n    };\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllPageRowsSelected(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected();\n      table.setRowSelection(old => {\n        var _opts$selectChildren;\n        value = typeof value !== 'undefined' ? value : !isSelected;\n        if (row.getCanSelect() && isSelected === value) {\n          return old;\n        }\n        const selectedRowIds = {\n          ...old\n        };\n        mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);\n        return selectedRowIds;\n      });\n    };\n    row.getIsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isRowSelected(row, rowSelection);\n    };\n    row.getIsSomeSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'some';\n    };\n    row.getIsAllSubRowsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'all';\n    };\n    row.getCanSelect = () => {\n      var _table$options$enable;\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row);\n      }\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n    };\n    row.getCanSelectSubRows = () => {\n      var _table$options$enable2;\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row);\n      }\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n    };\n    row.getCanMultiSelect = () => {\n      var _table$options$enable3;\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row);\n      }\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n    };\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect();\n      return e => {\n        var _target;\n        if (!canSelect) return;\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {\n  var _row$subRows;\n  const row = table.getRow(id, true);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  var _row$subRows3;\n  if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;\n  let allChildrenSelected = true;\n  let someSelected = false;\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return;\n    }\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection);\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true;\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true;\n        allChildrenSelected = false;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n  });\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst RowSorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n      let isString = false;\n      for (const row of firstRows) {\n        const value = row == null ? void 0 : row.getValue(column.id);\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime;\n        }\n        if (typeof value === 'string') {\n          isString = true;\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric;\n          }\n        }\n      }\n      if (isString) {\n        return sortingFns.text;\n      }\n      return sortingFns.basic;\n    };\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return 'asc';\n      }\n      return 'desc';\n    };\n    column.getSortingFn = () => {\n      var _table$options$sortin, _table$options$sortin2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n    };\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder();\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n        let newSorting = [];\n\n        // What should we do with this sort action?\n        let sortAction;\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n        // Multi-mode\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'add';\n          }\n        } else {\n          // Normal mode\n          if (old != null && old.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace';\n          } else if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'replace';\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove';\n            }\n          }\n        }\n        if (sortAction === 'add') {\n          var _table$options$maxMul;\n          newSorting = [...old, {\n            id: column.id,\n            desc: nextDesc\n          }];\n          // Take latest n columns\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc\n              };\n            }\n            return d;\n          });\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id);\n        } else {\n          newSorting = [{\n            id: column.id,\n            desc: nextDesc\n          }];\n        }\n        return newSorting;\n      });\n    };\n    column.getFirstSortDir = () => {\n      var _ref, _column$columnDef$sor;\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n      return sortDescFirst ? 'desc' : 'asc';\n    };\n    column.getNextSortingOrder = multi => {\n      var _table$options$enable, _table$options$enable2;\n      const firstSortDirection = column.getFirstSortDir();\n      const isSorted = column.getIsSorted();\n      if (!isSorted) {\n        return firstSortDirection;\n      }\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n      // If enableSortRemove, enable in general\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false;\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc';\n    };\n    column.getCanSort = () => {\n      var _column$columnDef$ena, _table$options$enable3;\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n    };\n    column.getCanMultiSort = () => {\n      var _ref2, _column$columnDef$ena2;\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n    };\n    column.getIsSorted = () => {\n      var _table$getState$sorti;\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n    };\n    column.getSortIndex = () => {\n      var _table$getState$sorti2, _table$getState$sorti3;\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n    };\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n    };\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort();\n      return e => {\n        if (!canSort) return;\n        e.persist == null || e.persist();\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n      };\n    };\n  },\n  createTable: table => {\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n    table.resetSorting = defaultState => {\n      var _table$initialState$s, _table$initialState;\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n    };\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\n      }\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel();\n      }\n      return table._getSortedRowModel();\n    };\n  }\n};\n\nconst builtInFeatures = [Headers, ColumnVisibility, ColumnOrdering, ColumnPinning, ColumnFaceting, ColumnFiltering, GlobalFaceting,\n//depends on ColumnFaceting\nGlobalFiltering,\n//depends on ColumnFiltering\nRowSorting, ColumnGrouping,\n//depends on RowSorting\nRowExpanding, RowPagination, RowPinning, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$_features, _options$initialState;\n  if (process.env.NODE_ENV !== 'production' && (options.debugAll || options.debugTable)) {\n    console.info('Creating Table Instance...');\n  }\n  const _features = [...builtInFeatures, ...((_options$_features = options._features) != null ? _options$_features : [])];\n  let table = {\n    _features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null || table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id, searchAll) => {\n      let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id];\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`);\n          }\n          throw new Error();\n        }\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, getMemoOptions(options, 'debugColumns', 'getAllColumns')),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index];\n    feature == null || feature.createTable == null || feature.createTable(table);\n  }\n  return table;\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel'));\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return undefined;\n    const uniqueValues = facetedRowModel.flatRows.flatMap(flatRow => {\n      var _flatRow$getUniqueVal;\n      return (_flatRow$getUniqueVal = flatRow.getUniqueValues(columnId)) != null ? _flatRow$getUniqueVal : [];\n    }).map(Number).filter(value => !Number.isNaN(value));\n    if (!uniqueValues.length) return;\n    let facetedMinValue = uniqueValues[0];\n    let facetedMaxValue = uniqueValues[uniqueValues.length - 1];\n    for (const value of uniqueValues) {\n      if (value < facetedMinValue) facetedMinValue = value;else if (value > facetedMaxValue) facetedMaxValue = value;\n    }\n    return [facetedMinValue, facetedMaxValue];\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues'));\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel'));\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, getMemoOptions(table.options, 'debugTable', `getFacetedUniqueValues_${columnId}`));\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = (columnFilters != null ? columnFilters : []).map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      rowModel.rows.forEach(row => {\n        row.depth = 0;\n        row.parentId = undefined;\n      });\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Perform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n        subRows.forEach(subRow => {\n          subRow.parentId = id;\n        });\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n    table._queue(() => {\n      table._autoResetExpanded();\n      table._autoResetPageIndex();\n    });\n  }));\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel'));\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.map(row => ({\n        ...row\n      }));\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const sortUndefined = columnInfo.sortUndefined;\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          let sortInt = 0;\n\n          // All sorting ints should always return in ascending order\n          if (sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = aValue === undefined;\n            const bUndefined = bValue === undefined;\n            if (aUndefined || bUndefined) {\n              if (sortUndefined === 'first') return aUndefined ? -1 : 1;\n              if (sortUndefined === 'last') return aUndefined ? 1 : -1;\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? sortUndefined : -sortUndefined;\n            }\n          }\n          if (sortInt === 0) {\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          }\n\n          // If sorting is non-zero, take care of desc and inversion\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () => table._autoResetPageIndex()));\n}\n\nexport { ColumnFaceting, ColumnFiltering, ColumnGrouping, ColumnOrdering, ColumnPinning, ColumnSizing, ColumnVisibility, GlobalFaceting, GlobalFiltering, Headers, RowExpanding, RowPagination, RowPinning, RowSelection, RowSorting, _getVisibleLeafColumns, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getMemoOptions, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","/**\n   * vue-table\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\nimport { defineComponent, h, isRef, shallowRef, watch, ref, watchEffect, unref } from 'vue';\n\nfunction trueFn() {\n  return true;\n}\nconst $PROXY = Symbol('merge-proxy');\n\n// https://github.com/solidjs/solid/blob/c20ca4fd8c36bc0522fedb2c7f38a110b7ee2663/packages/solid/src/render/component.ts#L51-L118\nconst propTraps = {\n  get(_, property, receiver) {\n    if (property === $PROXY) return receiver;\n    return _.get(property);\n  },\n  has(_, property) {\n    return _.has(property);\n  },\n  set: trueFn,\n  deleteProperty: trueFn,\n  getOwnPropertyDescriptor(_, property) {\n    return {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return _.get(property);\n      },\n      set: trueFn,\n      deleteProperty: trueFn\n    };\n  },\n  ownKeys(_) {\n    return _.keys();\n  }\n};\nfunction resolveSource(s) {\n  return 'value' in s ? s.value : s;\n}\nfunction mergeProxy() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  return new Proxy({\n    get(property) {\n      for (let i = sources.length - 1; i >= 0; i--) {\n        const v = resolveSource(sources[i])[property];\n        if (v !== undefined) return v;\n      }\n    },\n    has(property) {\n      for (let i = sources.length - 1; i >= 0; i--) {\n        if (property in resolveSource(sources[i])) return true;\n      }\n      return false;\n    },\n    keys() {\n      const keys = [];\n      for (let i = 0; i < sources.length; i++) keys.push(...Object.keys(resolveSource(sources[i])));\n      return [...Array.from(new Set(keys))];\n    }\n  }, propTraps);\n}\n\nconst FlexRender = defineComponent({\n  props: ['render', 'props'],\n  setup: props => {\n    return () => {\n      if (typeof props.render === 'function' || typeof props.render === 'object') {\n        return h(props.render, props.props);\n      }\n      return props.render;\n    };\n  }\n});\nfunction getOptionsWithReactiveData(options) {\n  return mergeProxy(options, {\n    data: unref(options.data)\n  });\n}\nfunction useVueTable(initialOptions) {\n  const IS_REACTIVE = isRef(initialOptions.data);\n  const resolvedOptions = mergeProxy({\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    mergeOptions(defaultOptions, options) {\n      return IS_REACTIVE ? {\n        ...defaultOptions,\n        ...options\n      } : mergeProxy(defaultOptions, options);\n    }\n  }, IS_REACTIVE ? getOptionsWithReactiveData(initialOptions) : initialOptions);\n  const table = createTable(resolvedOptions);\n\n  // Add reactivity support\n  if (IS_REACTIVE) {\n    const dataRef = shallowRef(initialOptions.data);\n    watch(dataRef, () => {\n      table.setState(prev => ({\n        ...prev,\n        data: dataRef.value\n      }));\n    }, {\n      immediate: true\n    });\n  }\n\n  // can't use `reactive` because update needs to be immutable\n  const state = ref(table.initialState);\n  watchEffect(() => {\n    table.setOptions(prev => {\n      var _initialOptions$state;\n      const stateProxy = new Proxy({}, {\n        get: (_, prop) => state.value[prop]\n      });\n      return mergeProxy(prev, IS_REACTIVE ? getOptionsWithReactiveData(initialOptions) : initialOptions, {\n        // merge the initialState and `options.state`\n        // create a new proxy on each `setOptions` call\n        // and get the value from state on each property access\n        state: mergeProxy(stateProxy, (_initialOptions$state = initialOptions.state) != null ? _initialOptions$state : {}),\n        // Similarly, we'll maintain both our internal state and any user-provided\n        // state.\n        onStateChange: updater => {\n          if (updater instanceof Function) {\n            state.value = updater(state.value);\n          } else {\n            state.value = updater;\n          }\n          initialOptions.onStateChange == null || initialOptions.onStateChange(updater);\n        }\n      });\n    });\n  });\n  return table;\n}\n\nexport { FlexRender, useVueTable };\n//# sourceMappingURL=index.mjs.map\n","<script>\nimport theme from \"#build/ui/table\";\n</script>\n\n<script setup>\nimport { computed, ref, watch } from \"vue\";\nimport { Primitive } from \"reka-ui\";\nimport { upperFirst } from \"scule\";\nimport { FlexRender, getCoreRowModel, getFilteredRowModel, getSortedRowModel, getExpandedRowModel, useVueTable } from \"@tanstack/vue-table\";\nimport { reactiveOmit } from \"@vueuse/core\";\nimport { useAppConfig } from \"#imports\";\nimport { useLocale } from \"../composables/useLocale\";\nimport { tv } from \"../utils/tv\";\nconst props = defineProps({\n  as: { type: null, required: false },\n  data: { type: Array, required: false },\n  columns: { type: Array, required: false },\n  caption: { type: String, required: false },\n  meta: { type: Object, required: false },\n  empty: { type: String, required: false },\n  sticky: { type: [Boolean, String], required: false },\n  loading: { type: Boolean, required: false },\n  loadingColor: { type: null, required: false },\n  loadingAnimation: { type: null, required: false },\n  watchOptions: { type: Object, required: false, default: () => ({\n    deep: true\n  }) },\n  globalFilterOptions: { type: Object, required: false },\n  columnFiltersOptions: { type: Object, required: false },\n  columnPinningOptions: { type: Object, required: false },\n  columnSizingOptions: { type: Object, required: false },\n  visibilityOptions: { type: Object, required: false },\n  sortingOptions: { type: Object, required: false },\n  groupingOptions: { type: Object, required: false },\n  expandedOptions: { type: Object, required: false },\n  rowSelectionOptions: { type: Object, required: false },\n  rowPinningOptions: { type: Object, required: false },\n  paginationOptions: { type: Object, required: false },\n  facetedOptions: { type: Object, required: false },\n  onSelect: { type: Function, required: false },\n  onHover: { type: Function, required: false },\n  onContextmenu: { type: [Function, Array], required: false },\n  class: { type: null, required: false },\n  ui: { type: null, required: false },\n  state: { type: Object, required: false },\n  onStateChange: { type: Function, required: false },\n  renderFallbackValue: { type: null, required: false },\n  _features: { type: Array, required: false },\n  autoResetAll: { type: Boolean, required: false },\n  debugAll: { type: Boolean, required: false },\n  debugCells: { type: Boolean, required: false },\n  debugColumns: { type: Boolean, required: false },\n  debugHeaders: { type: Boolean, required: false },\n  debugRows: { type: Boolean, required: false },\n  debugTable: { type: Boolean, required: false },\n  defaultColumn: { type: Object, required: false },\n  getRowId: { type: Function, required: false },\n  getSubRows: { type: Function, required: false },\n  initialState: { type: Object, required: false },\n  mergeOptions: { type: Function, required: false }\n});\nconst slots = defineSlots();\nconst { t } = useLocale();\nconst appConfig = useAppConfig();\nconst data = ref(props.data ?? []);\nconst columns = computed(() => props.columns ?? Object.keys(data.value[0] ?? {}).map((accessorKey) => ({ accessorKey, header: upperFirst(accessorKey) })));\nconst meta = computed(() => props.meta ?? {});\nconst ui = computed(() => tv({ extend: tv(theme), ...appConfig.ui?.table || {} })({\n  sticky: props.sticky,\n  loading: props.loading,\n  loadingColor: props.loadingColor,\n  loadingAnimation: props.loadingAnimation\n}));\nconst hasFooter = computed(() => {\n  function hasFooterRecursive(columns2) {\n    for (const column of columns2) {\n      if (\"footer\" in column) {\n        return true;\n      }\n      if (\"columns\" in column && hasFooterRecursive(column.columns)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return hasFooterRecursive(columns.value);\n});\nconst globalFilterState = defineModel(\"globalFilter\", { type: String, ...{ default: void 0 } });\nconst columnFiltersState = defineModel(\"columnFilters\", { type: Array, ...{ default: [] } });\nconst columnOrderState = defineModel(\"columnOrder\", { type: Array, ...{ default: [] } });\nconst columnVisibilityState = defineModel(\"columnVisibility\", { type: Object, ...{ default: {} } });\nconst columnPinningState = defineModel(\"columnPinning\", { type: Object, ...{ default: {} } });\nconst columnSizingState = defineModel(\"columnSizing\", { type: Object, ...{ default: {} } });\nconst columnSizingInfoState = defineModel(\"columnSizingInfo\", { type: Object, ...{ default: {} } });\nconst rowSelectionState = defineModel(\"rowSelection\", { type: Object, ...{ default: {} } });\nconst rowPinningState = defineModel(\"rowPinning\", { type: Object, ...{ default: {} } });\nconst sortingState = defineModel(\"sorting\", { type: Array, ...{ default: [] } });\nconst groupingState = defineModel(\"grouping\", { type: Array, ...{ default: [] } });\nconst expandedState = defineModel(\"expanded\", { type: [Boolean, Object], ...{ default: {} } });\nconst paginationState = defineModel(\"pagination\", { type: Object, ...{ default: {} } });\nconst tableRef = ref(null);\nconst tableApi = useVueTable({\n  ...reactiveOmit(props, \"as\", \"data\", \"columns\", \"caption\", \"sticky\", \"loading\", \"loadingColor\", \"loadingAnimation\", \"class\", \"ui\"),\n  data,\n  get columns() {\n    return columns.value;\n  },\n  meta: meta.value,\n  getCoreRowModel: getCoreRowModel(),\n  ...props.globalFilterOptions || {},\n  onGlobalFilterChange: (updaterOrValue) => valueUpdater(updaterOrValue, globalFilterState),\n  ...props.columnFiltersOptions || {},\n  getFilteredRowModel: getFilteredRowModel(),\n  onColumnFiltersChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnFiltersState),\n  onColumnOrderChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnOrderState),\n  ...props.visibilityOptions || {},\n  onColumnVisibilityChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnVisibilityState),\n  ...props.columnPinningOptions || {},\n  onColumnPinningChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnPinningState),\n  ...props.columnSizingOptions || {},\n  onColumnSizingChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnSizingState),\n  onColumnSizingInfoChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnSizingInfoState),\n  ...props.rowSelectionOptions || {},\n  onRowSelectionChange: (updaterOrValue) => valueUpdater(updaterOrValue, rowSelectionState),\n  ...props.rowPinningOptions || {},\n  onRowPinningChange: (updaterOrValue) => valueUpdater(updaterOrValue, rowPinningState),\n  ...props.sortingOptions || {},\n  getSortedRowModel: getSortedRowModel(),\n  onSortingChange: (updaterOrValue) => valueUpdater(updaterOrValue, sortingState),\n  ...props.groupingOptions || {},\n  onGroupingChange: (updaterOrValue) => valueUpdater(updaterOrValue, groupingState),\n  ...props.expandedOptions || {},\n  getExpandedRowModel: getExpandedRowModel(),\n  onExpandedChange: (updaterOrValue) => valueUpdater(updaterOrValue, expandedState),\n  ...props.paginationOptions || {},\n  onPaginationChange: (updaterOrValue) => valueUpdater(updaterOrValue, paginationState),\n  ...props.facetedOptions || {},\n  state: {\n    get globalFilter() {\n      return globalFilterState.value;\n    },\n    get columnFilters() {\n      return columnFiltersState.value;\n    },\n    get columnOrder() {\n      return columnOrderState.value;\n    },\n    get columnVisibility() {\n      return columnVisibilityState.value;\n    },\n    get columnPinning() {\n      return columnPinningState.value;\n    },\n    get expanded() {\n      return expandedState.value;\n    },\n    get rowSelection() {\n      return rowSelectionState.value;\n    },\n    get sorting() {\n      return sortingState.value;\n    },\n    get grouping() {\n      return groupingState.value;\n    },\n    get rowPinning() {\n      return rowPinningState.value;\n    },\n    get columnSizing() {\n      return columnSizingState.value;\n    },\n    get columnSizingInfo() {\n      return columnSizingInfoState.value;\n    },\n    get pagination() {\n      return paginationState.value;\n    }\n  }\n});\nfunction valueUpdater(updaterOrValue, ref2) {\n  ref2.value = typeof updaterOrValue === \"function\" ? updaterOrValue(ref2.value) : updaterOrValue;\n}\nfunction onRowSelect(e, row) {\n  if (!props.onSelect) {\n    return;\n  }\n  const target = e.target;\n  const isInteractive = target.closest(\"button\") || target.closest(\"a\");\n  if (isInteractive) {\n    return;\n  }\n  e.preventDefault();\n  e.stopPropagation();\n  props.onSelect(row, e);\n}\nfunction onRowHover(e, row) {\n  if (!props.onHover) {\n    return;\n  }\n  props.onHover(e, row);\n}\nfunction onRowContextmenu(e, row) {\n  if (!props.onContextmenu) {\n    return;\n  }\n  if (Array.isArray(props.onContextmenu)) {\n    props.onContextmenu.forEach((fn) => fn(e, row));\n  } else {\n    props.onContextmenu(e, row);\n  }\n}\nfunction resolveValue(prop, arg) {\n  if (typeof prop === \"function\") {\n    return prop(arg);\n  }\n  return prop;\n}\nwatch(\n  () => props.data,\n  () => {\n    data.value = props.data ? [...props.data] : [];\n  },\n  props.watchOptions\n);\ndefineExpose({\n  tableRef,\n  tableApi\n});\n</script>\n\n<template>\n  <Primitive :as=\"as\" :class=\"ui.root({ class: [props.ui?.root, props.class] })\">\n    <table ref=\"tableRef\" :class=\"ui.base({ class: [props.ui?.base] })\">\n      <caption v-if=\"caption || !!slots.caption\" :class=\"ui.caption({ class: [props.ui?.caption] })\">\n        <slot name=\"caption\">\n          {{ caption }}\n        </slot>\n      </caption>\n\n      <thead :class=\"ui.thead({ class: [props.ui?.thead] })\">\n        <tr v-for=\"headerGroup in tableApi.getHeaderGroups()\" :key=\"headerGroup.id\" :class=\"ui.tr({ class: [props.ui?.tr] })\">\n          <th\n            v-for=\"header in headerGroup.headers\"\n            :key=\"header.id\"\n            :data-pinned=\"header.column.getIsPinned()\"\n            :scope=\"header.colSpan > 1 ? 'colgroup' : 'col'\"\n            :colspan=\"header.colSpan > 1 ? header.colSpan : void 0\"\n            :rowspan=\"header.rowSpan > 1 ? header.rowSpan : void 0\"\n            :class=\"ui.th({\n  class: [\n    props.ui?.th,\n    resolveValue(header.column.columnDef.meta?.class?.th, header)\n  ],\n  pinned: !!header.column.getIsPinned()\n})\"\n          >\n            <slot :name=\"`${header.id}-header`\" v-bind=\"header.getContext()\">\n              <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\" :props=\"header.getContext()\" />\n            </slot>\n          </th>\n        </tr>\n\n        <tr :class=\"ui.separator({ class: [props.ui?.separator] })\" />\n      </thead>\n\n      <tbody :class=\"ui.tbody({ class: [props.ui?.tbody] })\">\n        <slot name=\"body-top\" />\n\n        <template v-if=\"tableApi.getRowModel().rows?.length\">\n          <template v-for=\"row in tableApi.getRowModel().rows\" :key=\"row.id\">\n            <tr\n              :data-selected=\"row.getIsSelected()\"\n              :data-selectable=\"!!props.onSelect || !!props.onHover || !!props.onContextmenu\"\n              :data-expanded=\"row.getIsExpanded()\"\n              :role=\"props.onSelect ? 'button' : void 0\"\n              :tabindex=\"props.onSelect ? 0 : void 0\"\n              :class=\"ui.tr({\n  class: [\n    props.ui?.tr,\n    resolveValue(tableApi.options.meta?.class?.tr, row)\n  ]\n})\"\n              :style=\"resolveValue(tableApi.options.meta?.style?.tr, row)\"\n              @click=\"onRowSelect($event, row)\"\n              @pointerenter=\"onRowHover($event, row)\"\n              @pointerleave=\"onRowHover($event, null)\"\n              @contextmenu=\"onRowContextmenu($event, row)\"\n            >\n              <td\n                v-for=\"cell in row.getVisibleCells()\"\n                :key=\"cell.id\"\n                :data-pinned=\"cell.column.getIsPinned()\"\n                :colspan=\"resolveValue(cell.column.columnDef.meta?.colspan?.td, cell)\"\n                :rowspan=\"resolveValue(cell.column.columnDef.meta?.rowspan?.td, cell)\"\n                :class=\"ui.td({\n  class: [\n    props.ui?.td,\n    resolveValue(cell.column.columnDef.meta?.class?.td, cell)\n  ],\n  pinned: !!cell.column.getIsPinned()\n})\"\n                :style=\"resolveValue(cell.column.columnDef.meta?.style?.td, cell)\"\n              >\n                <slot :name=\"`${cell.column.id}-cell`\" v-bind=\"cell.getContext()\">\n                  <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                </slot>\n              </td>\n            </tr>\n            <tr v-if=\"row.getIsExpanded()\" :class=\"ui.tr({ class: [props.ui?.tr] })\">\n              <td :colspan=\"row.getAllCells().length\" :class=\"ui.td({ class: [props.ui?.td] })\">\n                <slot name=\"expanded\" :row=\"row\" />\n              </td>\n            </tr>\n          </template>\n        </template>\n\n        <tr v-else-if=\"loading && !!slots['loading']\">\n          <td :colspan=\"tableApi.getAllLeafColumns().length\" :class=\"ui.loading({ class: props.ui?.loading })\">\n            <slot name=\"loading\" />\n          </td>\n        </tr>\n\n        <tr v-else>\n          <td :colspan=\"tableApi.getAllLeafColumns().length\" :class=\"ui.empty({ class: props.ui?.empty })\">\n            <slot name=\"empty\">\n              {{ empty || t(\"table.noData\") }}\n            </slot>\n          </td>\n        </tr>\n\n        <slot name=\"body-bottom\" />\n      </tbody>\n\n      <tfoot v-if=\"hasFooter\" :class=\"ui.tfoot({ class: [props.ui?.tfoot] })\">\n        <tr :class=\"ui.separator({ class: [props.ui?.separator] })\" />\n\n        <tr v-for=\"footerGroup in tableApi.getFooterGroups()\" :key=\"footerGroup.id\" :class=\"ui.tr({ class: [props.ui?.tr] })\">\n          <th\n            v-for=\"header in footerGroup.headers\"\n            :key=\"header.id\"\n            :data-pinned=\"header.column.getIsPinned()\"\n            :colspan=\"header.colSpan > 1 ? header.colSpan : void 0\"\n            :rowspan=\"header.rowSpan > 1 ? header.rowSpan : void 0\"\n            :class=\"ui.th({\n  class: [\n    props.ui?.th,\n    resolveValue(header.column.columnDef.meta?.class?.th, header)\n  ],\n  pinned: !!header.column.getIsPinned()\n})\"\n            :style=\"resolveValue(header.column.columnDef.meta?.style?.th, header)\"\n          >\n            <slot :name=\"`${header.id}-footer`\" v-bind=\"header.getContext()\">\n              <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.footer\" :props=\"header.getContext()\" />\n            </slot>\n          </th>\n        </tr>\n      </tfoot>\n    </table>\n  </Primitive>\n</template>\n"],"x_google_ignoreList":[0,1,2],"mappings":"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"}