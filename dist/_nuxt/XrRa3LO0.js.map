{"version":3,"file":"XrRa3LO0.js","names":[],"sources":["../../node_modules/.cache/.pnpm/reka-ui@2.5.0_typescript@5.9.2_vue@3.5.21_typescript@5.9.2_/node_modules/reka-ui/dist/shared/arrays.js"],"sourcesContent":["import { isEqual } from \"ohash\";\n\n//#region src/shared/arrays.ts\n/**\n* The function `areEqual` compares two arrays and returns true if they are equal in length and have\n* the same elements at corresponding indexes.\n* @param {any[]} arrayA - An array of any type of elements.\n* @param {any[]} arrayB - It looks like you haven't provided the value for `arrayB`. Could you please\n* provide the arrayB value so that I can assist you further?\n* @returns The function `areEqual` is returning a boolean value, either `true` if the two input arrays\n* `arrayA` and `arrayB` are equal, or `false` if they are not equal.\n*/\nfunction areEqual(arrayA, arrayB) {\n\tif (arrayA.length !== arrayB.length) return false;\n\tfor (let index = 0; index < arrayA.length; index++) if (arrayA[index] !== arrayB[index]) return false;\n\treturn true;\n}\n/**\n* The function `findValuesBetween` takes an array and two values, then returns a subarray containing\n* elements between the first occurrence of the start value and the first occurrence of the end value\n* in the array.\n* @param {T[]} array - The `array` parameter is an array of values of type `T`.\n* @param {T} start - The `start` parameter is the value that marks the beginning of the range you want\n* to find in the array.\n* @param {T} end - The `end` parameter in the `findValuesBetween` function represents the end value\n* that you want to find in the array. This function will return a subarray of values that are between\n* the `start` and `end` values in the original array.\n* @returns The `findValuesBetween` function returns an array of values from the input array that are\n* between the `start` and `end` values (inclusive). If either the `start` or `end` values are not\n* found in the input array, an empty array is returned.\n*/\nfunction findValuesBetween(array, start, end) {\n\tconst startIndex = array.findIndex((i) => isEqual(i, start));\n\tconst endIndex = array.findIndex((i) => isEqual(i, end));\n\tif (startIndex === -1 || endIndex === -1) return [];\n\tconst [minIndex, maxIndex] = [startIndex, endIndex].sort((a, b) => a - b);\n\treturn array.slice(minIndex, maxIndex + 1);\n}\n\n//#endregion\nexport { areEqual, findValuesBetween };\n//# sourceMappingURL=arrays.js.map"],"x_google_ignoreList":[0],"mappings":"4BA+BA,SAAS,EAAkB,EAAO,EAAO,EAAK,CAC7C,IAAM,EAAa,EAAM,UAAW,GAAM,EAAQ,EAAG,EAAM,CAAC,CACtD,EAAW,EAAM,UAAW,GAAM,EAAQ,EAAG,EAAI,CAAC,CACxD,GAAI,IAAe,IAAM,IAAa,GAAI,MAAO,EAAE,CACnD,GAAM,CAAC,EAAU,GAAY,CAAC,EAAY,EAAS,CAAC,MAAM,EAAG,IAAM,EAAI,EAAE,CACzE,OAAO,EAAM,MAAM,EAAU,EAAW,EAAE"}