{"version":3,"file":"Bv2qATNJ.js","names":[],"sources":["../../node_modules/.cache/.pnpm/reka-ui@2.5.0_typescript@5.9.2_vue@3.5.21_typescript@5.9.2_/node_modules/reka-ui/dist/shared/clamp.js"],"sourcesContent":["//#region src/shared/clamp.ts\n/**\n* The `clamp` function restricts a number within a specified range by returning the value itself if it\n* falls within the range, or the closest boundary value if it exceeds the range.\n* @param {number} value - The `value` parameter represents the number that you want to clamp within\n* the specified range defined by `min` and `max` values.\n* @param {number} min - If the `value` parameter is less than the `min` value, the\n* function will return the `min` value.\n* @param {number} max - If the `value` parameter is greater than the `max` value,\n* the function will return `max`.\n* @returns The `clamp` function returns the value of `value` constrained within the range defined by\n* `min` and `max`.\n*/\nfunction clamp(value, min = Number.NEGATIVE_INFINITY, max = Number.POSITIVE_INFINITY) {\n\treturn Math.min(max, Math.max(min, value));\n}\n/**\n* The function `roundToStepPrecision` rounds a number to a specified precision step.\n* @param {number} value - The `value` parameter is the number that you want to round to a specific\n* precision based on the `step` parameter.\n* @param {number} step - The `step` parameter in the `roundToStepPrecision` function represents the\n* interval at which you want to round the `value`. For example, if `step` is 0.5, the `value` will be\n* rounded to the nearest half.\n* @returns the `roundedValue` after rounding it to the precision specified by the `step`.\n*/\nfunction roundToStepPrecision(value, step) {\n\tlet roundedValue = value;\n\tconst stepString = step.toString();\n\tconst pointIndex = stepString.indexOf(\".\");\n\tconst precision = pointIndex >= 0 ? stepString.length - pointIndex : 0;\n\tif (precision > 0) {\n\t\tconst pow = 10 ** precision;\n\t\troundedValue = Math.round(roundedValue * pow) / pow;\n\t}\n\treturn roundedValue;\n}\n/**\n* The function `snapValueToStep` snaps a given value to the nearest step within a specified range.\n* @param {number} value - The `value` parameter represents the number that you want to snap to the\n* nearest step value.\n* @param {number | undefined} min - The `min` parameter represents the minimum value that the `value`\n* should be snapped to. If `value` is less than `min`, it will be snapped to `min`. If `min` is not\n* provided (undefined), then the snapping will not consider a minimum value.\n* @param {number | undefined} max - The `max` parameter represents the maximum value that the `value`\n* should be snapped to. It ensures that the snapped value does not exceed this maximum value.\n* @param {number} step - The `step` parameter in the `snapValueToStep` function represents the\n* interval at which the `value` should be snapped to. It determines the granularity of the snapping\n* operation. For example, if `step` is 5, the `value` will be snapped to the nearest multiple of\n* @returns a number that has been snapped to the nearest step value within the specified range of minimum and maximum values.\n*/\nfunction snapValueToStep(value, min, max, step) {\n\tmin = Number(min);\n\tmax = Number(max);\n\tconst remainder = (value - (Number.isNaN(min) ? 0 : min)) % step;\n\tlet snappedValue = roundToStepPrecision(Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder, step);\n\tif (!Number.isNaN(min)) {\n\t\tif (snappedValue < min) snappedValue = min;\n\t\telse if (!Number.isNaN(max) && snappedValue > max) snappedValue = min + Math.floor(roundToStepPrecision((max - min) / step, step)) * step;\n\t} else if (!Number.isNaN(max) && snappedValue > max) snappedValue = Math.floor(roundToStepPrecision(max / step, step)) * step;\n\tsnappedValue = roundToStepPrecision(snappedValue, step);\n\treturn snappedValue;\n}\n\n//#endregion\nexport { clamp, snapValueToStep };\n//# sourceMappingURL=clamp.js.map"],"x_google_ignoreList":[0],"mappings":"AAaA,SAAS,EAAM,EAAO,EAAM,KAA0B,EAAM,IAA0B,CACrF,OAAO,KAAK,IAAI,EAAK,KAAK,IAAI,EAAK,EAAM,CAAC,CAW3C,SAAS,EAAqB,EAAO,EAAM,CAC1C,IAAI,EAAe,EACb,EAAa,EAAK,UAAU,CAC5B,EAAa,EAAW,QAAQ,IAAI,CACpC,EAAY,GAAc,EAAI,EAAW,OAAS,EAAa,EACrE,GAAI,EAAY,EAAG,CAClB,IAAM,EAAM,IAAM,EAClB,EAAe,KAAK,MAAM,EAAe,EAAI,CAAG,EAEjD,OAAO,EAgBR,SAAS,EAAgB,EAAO,EAAK,EAAK,EAAM,CAC/C,EAAM,OAAO,EAAI,CACjB,EAAM,OAAO,EAAI,CACjB,IAAM,GAAa,GAAS,OAAO,MAAM,EAAI,CAAG,EAAI,IAAQ,EACxD,EAAe,EAAqB,KAAK,IAAI,EAAU,CAAG,GAAK,EAAO,EAAQ,KAAK,KAAK,EAAU,EAAI,EAAO,KAAK,IAAI,EAAU,EAAI,EAAQ,EAAW,EAAK,CAMhK,OALK,OAAO,MAAM,EAAI,CAGX,CAAC,OAAO,MAAM,EAAI,EAAI,EAAe,IAAK,EAAe,KAAK,MAAM,EAAqB,EAAM,EAAM,EAAK,CAAC,CAAG,GAFpH,EAAe,EAAK,EAAe,EAC9B,CAAC,OAAO,MAAM,EAAI,EAAI,EAAe,IAAK,EAAe,EAAM,KAAK,MAAM,GAAsB,EAAM,GAAO,EAAM,EAAK,CAAC,CAAG,GAEtI,EAAe,EAAqB,EAAc,EAAK,CAChD"}