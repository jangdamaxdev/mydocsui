{"version":3,"file":"BKCXwsN-.js","names":[],"sources":["../../node_modules/app/composables/fetchComponentMeta.ts"],"sourcesContent":["import type { ComponentMeta } from 'vue-component-meta'\r\n\r\nconst useComponentsMetaState = () => useState<Record<string, any>>('component-meta-state', () => ({}))\r\n\r\nexport async function fetchComponentMeta(name: string): Promise<{ meta: ComponentMeta }> {\r\n  const state = useComponentsMetaState()\r\n\r\n  if (state.value[name]?.then) {\r\n    await state.value[name]\r\n    return state.value[name]\r\n  }\r\n  if (state.value[name]) {\r\n    return state.value[name]\r\n  }\r\n\r\n  // Add to nitro prerender\r\n  if (import.meta.server) {\r\n    const event = useRequestEvent()\r\n    event?.node.res.setHeader(\r\n      'x-nitro-prerender',\r\n      [event?.node.res.getHeader('x-nitro-prerender'), `/api/component-meta/${name}.json`].filter(Boolean).join(',')\r\n    )\r\n  }\r\n\r\n  // Store promise to avoid multiple calls\r\n  state.value[name] = $fetch(`/api/component-meta/${name}.json`).then((meta) => {\r\n    state.value[name] = meta\r\n  }).catch(() => {\r\n    state.value[name] = {}\r\n  })\r\n\r\n  await state.value[name]\r\n  return state.value[name]\r\n}"],"mappings":"4BAEA,IAAM,MAA+B,EAA8B,4BAA+B,EAAE,EAAE,CAEtG,eAAsB,EAAmB,EAAgD,CACvF,IAAM,EAAQ,GAAwB,CA2BtC,OAzBI,EAAM,MAAM,IAAO,MACrB,MAAM,EAAM,MAAM,GACX,EAAM,MAAM,IAEjB,EAAM,MAAM,GACP,EAAM,MAAM,IAarB,EAAM,MAAM,GAAQ,OAAO,uBAAuB,EAAK,OAAO,CAAC,KAAM,GAAS,CAC5E,EAAM,MAAM,GAAQ,GACpB,CAAC,UAAY,CACb,EAAM,MAAM,GAAQ,EAAE,EACtB,CAEF,MAAM,EAAM,MAAM,GACX,EAAM,MAAM"}