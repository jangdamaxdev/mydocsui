{"version":3,"mappings":"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","names":["contentManifest"],"ignoreList":[0,1,2],"sources":["../../node_modules/.cache/.pnpm/@nuxt+content@3.7.1_better-_0ff76a6cd2e4d8fb154d877e89c58bf9/node_modules/@nuxt/content/dist/runtime/internal/dump.js","../../node_modules/.cache/.pnpm/@nuxt+content@3.7.1_better-_0ff76a6cd2e4d8fb154d877e89c58bf9/node_modules/@nuxt/content/dist/runtime/internal/collection.js","../../node_modules/.cache/.pnpm/@nuxt+content@3.7.1_better-_0ff76a6cd2e4d8fb154d877e89c58bf9/node_modules/@nuxt/content/dist/runtime/internal/database.client.js"],"sourcesContent":["export async function decompressSQLDump(base64Str, compressionType = \"gzip\") {\n  const binaryData = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n  const response = new Response(new Blob([binaryData]));\n  const decompressedStream = response.body?.pipeThrough(new DecompressionStream(compressionType));\n  const text = await new Response(decompressedStream).text();\n  return JSON.parse(text);\n}\n","import contentManifest from \"#content/manifest\";\nexport function refineContentFields(sql, doc) {\n  const fields = findCollectionFields(sql);\n  const item = { ...doc };\n  for (const key in item) {\n    if (fields[key] === \"json\" && item[key] && item[key] !== \"undefined\") {\n      item[key] = JSON.parse(item[key]);\n    }\n    if (fields[key] === \"boolean\" && item[key] !== \"undefined\") {\n      item[key] = Boolean(item[key]);\n    }\n  }\n  for (const key in item) {\n    if (item[key] === \"NULL\") {\n      item[key] = void 0;\n    }\n  }\n  return item;\n}\nfunction findCollectionFields(sql) {\n  const table = sql.match(/FROM\\s+(\\w+)/);\n  if (!table) {\n    return {};\n  }\n  const info = contentManifest[getCollectionName(table[1])];\n  return info?.fields || {};\n}\nfunction getCollectionName(table) {\n  return table.replace(/^_content_/, \"\");\n}\n","import { decompressSQLDump } from \"./dump.js\";\nimport { refineContentFields } from \"./collection.js\";\nimport { fetchDatabase } from \"./api.js\";\nimport { checksums, tables } from \"#content/manifest\";\nlet db;\nconst loadedCollections = {};\nconst dbPromises = {};\nexport function loadDatabaseAdapter(collection) {\n  async function loadAdapter(collection2) {\n    if (!db) {\n      dbPromises._ = dbPromises._ || initializeDatabase();\n      db = await dbPromises._;\n      Reflect.deleteProperty(dbPromises, \"_\");\n    }\n    if (!loadedCollections[String(collection2)]) {\n      dbPromises[String(collection2)] = dbPromises[String(collection2)] || loadCollectionDatabase(collection2);\n      await dbPromises[String(collection2)];\n      loadedCollections[String(collection2)] = \"loaded\";\n      Reflect.deleteProperty(dbPromises, String(collection2));\n    }\n    return db;\n  }\n  return {\n    all: async (sql, params) => {\n      await loadAdapter(collection);\n      return db.exec({ sql, bind: params, rowMode: \"object\", returnValue: \"resultRows\" }).map((row) => refineContentFields(sql, row));\n    },\n    first: async (sql, params) => {\n      await loadAdapter(collection);\n      return refineContentFields(\n        sql,\n        db.exec({ sql, bind: params, rowMode: \"object\", returnValue: \"resultRows\" }).shift()\n      );\n    },\n    exec: async (sql, params) => {\n      await loadAdapter(collection);\n      await db.exec({ sql, bind: params });\n    }\n  };\n}\nasync function initializeDatabase() {\n  if (!db) {\n    const sqlite3InitModule = await import(\"@sqlite.org/sqlite-wasm\").then((m) => m.default);\n    globalThis.sqlite3ApiConfig = {\n      // overriding default log function allows to avoid error when logger are dropped in build.\n      // For example `nuxt-security` module drops logger in production build by default.\n      silent: true,\n      debug: (...args) => console.debug(...args),\n      warn: (...args) => {\n        if (String(args[0]).includes(\"OPFS sqlite3_vfs\")) {\n          return;\n        }\n        console.warn(...args);\n      },\n      error: (...args) => console.error(...args),\n      log: (...args) => console.log(...args)\n    };\n    const sqlite3 = await sqlite3InitModule();\n    db = new sqlite3.oo1.DB();\n  }\n  return db;\n}\nasync function loadCollectionDatabase(collection) {\n  if (window.sessionStorage.getItem(\"previewToken\")) {\n    return db;\n  }\n  let compressedDump = null;\n  const checksumId = `checksum_${collection}`;\n  const dumpId = `collection_${collection}`;\n  let checksumState = \"matched\";\n  try {\n    const dbChecksum = db.exec({ sql: `SELECT * FROM ${tables.info} where id = '${checksumId}'`, rowMode: \"object\", returnValue: \"resultRows\" }).shift();\n    if (dbChecksum?.version !== checksums[String(collection)]) {\n      checksumState = \"mismatch\";\n    }\n  } catch {\n    checksumState = \"missing\";\n  }\n  if (checksumState !== \"matched\") {\n    if (!import.meta.dev) {\n      const localCacheVersion = window.localStorage.getItem(`content_${checksumId}`);\n      if (localCacheVersion === checksums[String(collection)]) {\n        compressedDump = window.localStorage.getItem(`content_${dumpId}`);\n      }\n    }\n    if (!compressedDump) {\n      compressedDump = await fetchDatabase(void 0, String(collection));\n      if (!import.meta.dev) {\n        try {\n          window.localStorage.setItem(`content_${checksumId}`, checksums[String(collection)]);\n          window.localStorage.setItem(`content_${dumpId}`, compressedDump);\n        } catch (error) {\n          console.error(\"Database integrity check failed, rebuilding database\", error);\n        }\n      }\n    }\n    const dump = await decompressSQLDump(compressedDump);\n    await db.exec({ sql: `DROP TABLE IF EXISTS ${tables[String(collection)]}` });\n    if (checksumState === \"mismatch\") {\n      await db.exec({ sql: `DELETE FROM ${tables.info} WHERE id = '${checksumId}'` });\n    }\n    for (const command of dump) {\n      try {\n        await db.exec(command);\n      } catch (error) {\n        console.error(\"Error executing command\", error);\n      }\n    }\n  }\n  return db;\n}\n"],"file":"_nuxt/CfjhHW4G.js"}