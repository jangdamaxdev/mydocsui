{"version":3,"file":"DChwkS1X.js","names":[],"sources":["../../node_modules/.cache/.pnpm/@shikijs+transformers@3.12.2/node_modules/@shikijs/transformers/dist/index.mjs"],"sourcesContent":["const matchers = [\n  [/^(<!--)(.+)(-->)$/, false],\n  [/^(\\/\\*)(.+)(\\*\\/)$/, false],\n  [/^(\\/\\/|[\"'#]|;{1,2}|%{1,2}|--)(.*)$/, true],\n  /**\n   * for multi-line comments like this\n   */\n  [/^(\\*)(.+)$/, true]\n];\nfunction parseComments(lines, jsx, matchAlgorithm) {\n  const out = [];\n  for (const line of lines) {\n    if (matchAlgorithm === \"v3\") {\n      const splittedElements = line.children.flatMap((element, idx) => {\n        if (element.type !== \"element\")\n          return element;\n        const token = element.children[0];\n        if (token.type !== \"text\")\n          return element;\n        const isLast = idx === line.children.length - 1;\n        const isComment = matchToken(token.value, isLast);\n        if (!isComment)\n          return element;\n        const rawSplits = token.value.split(/(\\s+\\/\\/)/);\n        if (rawSplits.length <= 1)\n          return element;\n        let splits = [rawSplits[0]];\n        for (let i = 1; i < rawSplits.length; i += 2) {\n          splits.push(rawSplits[i] + (rawSplits[i + 1] || \"\"));\n        }\n        splits = splits.filter(Boolean);\n        if (splits.length <= 1)\n          return element;\n        return splits.map((split) => {\n          return {\n            ...element,\n            children: [\n              {\n                type: \"text\",\n                value: split\n              }\n            ]\n          };\n        });\n      });\n      if (splittedElements.length !== line.children.length)\n        line.children = splittedElements;\n    }\n    const elements = line.children;\n    let start = elements.length - 1;\n    if (matchAlgorithm === \"v1\")\n      start = 0;\n    else if (jsx)\n      start = elements.length - 2;\n    for (let i = Math.max(start, 0); i < elements.length; i++) {\n      const token = elements[i];\n      if (token.type !== \"element\")\n        continue;\n      const head = token.children.at(0);\n      if (head?.type !== \"text\")\n        continue;\n      const isLast = i === elements.length - 1;\n      const match = matchToken(head.value, isLast);\n      if (!match)\n        continue;\n      if (jsx && !isLast && i !== 0) {\n        const isJsxStyle = isValue(elements[i - 1], \"{\") && isValue(elements[i + 1], \"}\");\n        out.push({\n          info: match,\n          line,\n          token,\n          isLineCommentOnly: elements.length === 3 && token.children.length === 1,\n          isJsxStyle\n        });\n      } else {\n        out.push({\n          info: match,\n          line,\n          token,\n          isLineCommentOnly: elements.length === 1 && token.children.length === 1,\n          isJsxStyle: false\n        });\n      }\n    }\n  }\n  return out;\n}\nfunction isValue(element, value) {\n  if (element.type !== \"element\")\n    return false;\n  const text = element.children[0];\n  if (text.type !== \"text\")\n    return false;\n  return text.value.trim() === value;\n}\nfunction matchToken(text, isLast) {\n  let trimmed = text.trimStart();\n  const spaceFront = text.length - trimmed.length;\n  trimmed = trimmed.trimEnd();\n  const spaceEnd = text.length - trimmed.length - spaceFront;\n  for (const [matcher, endOfLine] of matchers) {\n    if (endOfLine && !isLast)\n      continue;\n    const result = matcher.exec(trimmed);\n    if (!result)\n      continue;\n    return [\n      \" \".repeat(spaceFront) + result[1],\n      result[2],\n      result[3] ? result[3] + \" \".repeat(spaceEnd) : void 0\n    ];\n  }\n}\nfunction v1ClearEndCommentPrefix(text) {\n  const match = text.match(/(?:\\/\\/|[\"'#]|;{1,2}|%{1,2}|--)(\\s*)$/);\n  if (match && match[1].trim().length === 0) {\n    return text.slice(0, match.index);\n  }\n  return text;\n}\n\nfunction createCommentNotationTransformer(name, regex, onMatch, matchAlgorithm) {\n  if (matchAlgorithm == null) {\n    matchAlgorithm = \"v3\";\n  }\n  return {\n    name,\n    code(code) {\n      const lines = code.children.filter((i) => i.type === \"element\");\n      const linesToRemove = [];\n      code.data ??= {};\n      const data = code.data;\n      data._shiki_notation ??= parseComments(lines, [\"jsx\", \"tsx\"].includes(this.options.lang), matchAlgorithm);\n      const parsed = data._shiki_notation;\n      for (const comment of parsed) {\n        if (comment.info[1].length === 0)\n          continue;\n        let lineIdx = lines.indexOf(comment.line);\n        if (comment.isLineCommentOnly && matchAlgorithm !== \"v1\")\n          lineIdx++;\n        let replaced = false;\n        comment.info[1] = comment.info[1].replace(regex, (...match) => {\n          if (onMatch.call(this, match, comment.line, comment.token, lines, lineIdx)) {\n            replaced = true;\n            return \"\";\n          }\n          return match[0];\n        });\n        if (!replaced)\n          continue;\n        if (matchAlgorithm === \"v1\")\n          comment.info[1] = v1ClearEndCommentPrefix(comment.info[1]);\n        const isEmpty = comment.info[1].trim().length === 0;\n        if (isEmpty)\n          comment.info[1] = \"\";\n        if (isEmpty && comment.isLineCommentOnly) {\n          linesToRemove.push(comment.line);\n        } else if (isEmpty && comment.isJsxStyle) {\n          comment.line.children.splice(comment.line.children.indexOf(comment.token) - 1, 3);\n        } else if (isEmpty) {\n          comment.line.children.splice(comment.line.children.indexOf(comment.token), 1);\n        } else {\n          const head = comment.token.children[0];\n          if (head.type === \"text\") {\n            head.value = comment.info.join(\"\");\n          }\n        }\n      }\n      for (const line of linesToRemove) {\n        const index = code.children.indexOf(line);\n        const nextLine = code.children[index + 1];\n        let removeLength = 1;\n        if (nextLine?.type === \"text\" && nextLine?.value === \"\\n\")\n          removeLength = 2;\n        code.children.splice(index, removeLength);\n      }\n    }\n  };\n}\n\nfunction transformerCompactLineOptions(lineOptions = []) {\n  return {\n    name: \"@shikijs/transformers:compact-line-options\",\n    line(node, line) {\n      const lineOption = lineOptions.find((o) => o.line === line);\n      if (lineOption?.classes)\n        this.addClassToHast(node, lineOption.classes);\n      return node;\n    }\n  };\n}\n\nfunction parseMetaHighlightString(meta) {\n  if (!meta)\n    return null;\n  const match = meta.match(/\\{([\\d,-]+)\\}/);\n  if (!match)\n    return null;\n  const lines = match[1].split(\",\").flatMap((v) => {\n    const num = v.split(\"-\").map((v2) => Number.parseInt(v2, 10));\n    if (num.length === 1)\n      return [num[0]];\n    return Array.from({ length: num[1] - num[0] + 1 }, (_, i) => i + num[0]);\n  });\n  return lines;\n}\nconst symbol = Symbol(\"highlighted-lines\");\nfunction transformerMetaHighlight(options = {}) {\n  const {\n    className = \"highlighted\"\n  } = options;\n  return {\n    name: \"@shikijs/transformers:meta-highlight\",\n    line(node, line) {\n      if (!this.options.meta?.__raw) {\n        return;\n      }\n      const meta = this.meta;\n      meta[symbol] ??= parseMetaHighlightString(this.options.meta.__raw);\n      const lines = meta[symbol] ?? [];\n      if (lines.includes(line))\n        this.addClassToHast(node, className);\n      return node;\n    }\n  };\n}\n\nfunction parseMetaHighlightWords(meta) {\n  if (!meta)\n    return [];\n  const match = Array.from(meta.matchAll(/\\/((?:\\\\.|[^/])+)\\//g));\n  return match.map((v) => v[1].replace(/\\\\(.)/g, \"$1\"));\n}\nfunction transformerMetaWordHighlight(options = {}) {\n  const {\n    className = \"highlighted-word\"\n  } = options;\n  return {\n    name: \"@shikijs/transformers:meta-word-highlight\",\n    preprocess(code, options2) {\n      if (!this.options.meta?.__raw)\n        return;\n      const words = parseMetaHighlightWords(this.options.meta.__raw);\n      options2.decorations ||= [];\n      for (const word of words) {\n        const indexes = findAllSubstringIndexes(code, word);\n        for (const index of indexes) {\n          options2.decorations.push({\n            start: index,\n            end: index + word.length,\n            properties: {\n              class: className\n            }\n          });\n        }\n      }\n    }\n  };\n}\nfunction findAllSubstringIndexes(str, substr) {\n  const indexes = [];\n  let cursor = 0;\n  while (true) {\n    const index = str.indexOf(substr, cursor);\n    if (index === -1 || index >= str.length)\n      break;\n    if (index < cursor)\n      break;\n    indexes.push(index);\n    cursor = index + substr.length;\n  }\n  return indexes;\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction transformerNotationMap(options = {}, name = \"@shikijs/transformers:notation-map\") {\n  const {\n    classMap = {},\n    classActivePre = void 0\n  } = options;\n  return createCommentNotationTransformer(\n    name,\n    new RegExp(`\\\\s*\\\\[!code (${Object.keys(classMap).map(escapeRegExp).join(\"|\")})(:\\\\d+)?\\\\]`),\n    function([_, match, range = \":1\"], _line, _comment, lines, index) {\n      const lineNum = Number.parseInt(range.slice(1), 10);\n      for (let i = index; i < Math.min(index + lineNum, lines.length); i++) {\n        this.addClassToHast(lines[i], classMap[match]);\n      }\n      if (classActivePre)\n        this.addClassToHast(this.pre, classActivePre);\n      return true;\n    },\n    options.matchAlgorithm\n  );\n}\n\nfunction transformerNotationDiff(options = {}) {\n  const {\n    classLineAdd = \"diff add\",\n    classLineRemove = \"diff remove\",\n    classActivePre = \"has-diff\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        \"++\": classLineAdd,\n        \"--\": classLineRemove\n      },\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-diff\"\n  );\n}\n\nfunction transformerNotationErrorLevel(options = {}) {\n  const {\n    classMap = {\n      error: [\"highlighted\", \"error\"],\n      warning: [\"highlighted\", \"warning\"]\n    },\n    classActivePre = \"has-highlighted\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap,\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-error-level\"\n  );\n}\n\nfunction transformerNotationFocus(options = {}) {\n  const {\n    classActiveLine = \"focused\",\n    classActivePre = \"has-focused\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        focus: classActiveLine\n      },\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-focus\"\n  );\n}\n\nfunction transformerNotationHighlight(options = {}) {\n  const {\n    classActiveLine = \"highlighted\",\n    classActivePre = \"has-highlighted\"\n  } = options;\n  return transformerNotationMap(\n    {\n      classMap: {\n        highlight: classActiveLine,\n        hl: classActiveLine\n      },\n      classActivePre,\n      matchAlgorithm: options.matchAlgorithm\n    },\n    \"@shikijs/transformers:notation-highlight\"\n  );\n}\n\nfunction highlightWordInLine(line, ignoredElement, word, className) {\n  const content = getTextContent(line);\n  let index = content.indexOf(word);\n  while (index !== -1) {\n    highlightRange.call(this, line.children, ignoredElement, index, word.length, className);\n    index = content.indexOf(word, index + 1);\n  }\n}\nfunction getTextContent(element) {\n  if (element.type === \"text\")\n    return element.value;\n  if (element.type === \"element\" && element.tagName === \"span\")\n    return element.children.map(getTextContent).join(\"\");\n  return \"\";\n}\nfunction highlightRange(elements, ignoredElement, index, len, className) {\n  let currentIdx = 0;\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    if (element.type !== \"element\" || element.tagName !== \"span\" || element === ignoredElement)\n      continue;\n    const textNode = element.children[0];\n    if (textNode.type !== \"text\")\n      continue;\n    if (hasOverlap([currentIdx, currentIdx + textNode.value.length - 1], [index, index + len])) {\n      const start = Math.max(0, index - currentIdx);\n      const length = len - Math.max(0, currentIdx - index);\n      if (length === 0)\n        continue;\n      const separated = separateToken(element, textNode, start, length);\n      this.addClassToHast(separated[1], className);\n      const output = separated.filter(Boolean);\n      elements.splice(i, 1, ...output);\n      i += output.length - 1;\n    }\n    currentIdx += textNode.value.length;\n  }\n}\nfunction hasOverlap(range1, range2) {\n  return range1[0] <= range2[1] && range1[1] >= range2[0];\n}\nfunction separateToken(span, textNode, index, len) {\n  const text = textNode.value;\n  const createNode = (value) => inheritElement(span, {\n    children: [\n      {\n        type: \"text\",\n        value\n      }\n    ]\n  });\n  return [\n    index > 0 ? createNode(text.slice(0, index)) : void 0,\n    createNode(text.slice(index, index + len)),\n    index + len < text.length ? createNode(text.slice(index + len)) : void 0\n  ];\n}\nfunction inheritElement(original, overrides) {\n  return {\n    ...original,\n    properties: {\n      ...original.properties\n    },\n    ...overrides\n  };\n}\n\nfunction transformerNotationWordHighlight(options = {}) {\n  const {\n    classActiveWord = \"highlighted-word\",\n    classActivePre = void 0\n  } = options;\n  return createCommentNotationTransformer(\n    \"@shikijs/transformers:notation-highlight-word\",\n    /\\s*\\[!code word:((?:\\\\.|[^:\\]])+)(:\\d+)?\\]/,\n    function([_, word, range], _line, comment, lines, index) {\n      const lineNum = range ? Number.parseInt(range.slice(1), 10) : lines.length;\n      word = word.replace(/\\\\(.)/g, \"$1\");\n      for (let i = index; i < Math.min(index + lineNum, lines.length); i++) {\n        highlightWordInLine.call(this, lines[i], comment, word, classActiveWord);\n      }\n      if (classActivePre)\n        this.addClassToHast(this.pre, classActivePre);\n      return true;\n    },\n    options.matchAlgorithm\n  );\n}\n\nfunction transformerRemoveLineBreak() {\n  return {\n    name: \"@shikijs/transformers:remove-line-break\",\n    code(code) {\n      code.children = code.children.filter((line) => !(line.type === \"text\" && line.value === \"\\n\"));\n    }\n  };\n}\n\nfunction transformerRemoveNotationEscape() {\n  return {\n    name: \"@shikijs/transformers:remove-notation-escape\",\n    code(hast) {\n      function replace(node) {\n        if (node.type === \"text\") {\n          node.value = node.value.replace(\"[\\\\!code\", \"[!code\");\n        } else if (\"children\" in node) {\n          for (const child of node.children) {\n            replace(child);\n          }\n        }\n      }\n      replace(hast);\n      return hast;\n    }\n  };\n}\n\nfunction isTab(part) {\n  return part === \"\t\";\n}\nfunction isSpace(part) {\n  return part === \" \" || part === \"\t\";\n}\nfunction separateContinuousSpaces(inputs) {\n  const result = [];\n  let current = \"\";\n  function bump() {\n    if (current.length)\n      result.push(current);\n    current = \"\";\n  }\n  inputs.forEach((part, idx) => {\n    if (isTab(part)) {\n      bump();\n      result.push(part);\n    } else if (isSpace(part) && (isSpace(inputs[idx - 1]) || isSpace(inputs[idx + 1]))) {\n      bump();\n      result.push(part);\n    } else {\n      current += part;\n    }\n  });\n  bump();\n  return result;\n}\nfunction splitSpaces(parts, type, renderContinuousSpaces = true) {\n  if (type === \"all\")\n    return parts;\n  let leftCount = 0;\n  let rightCount = 0;\n  if (type === \"boundary\") {\n    for (let i = 0; i < parts.length; i++) {\n      if (isSpace(parts[i]))\n        leftCount++;\n      else\n        break;\n    }\n  }\n  if (type === \"boundary\" || type === \"trailing\") {\n    for (let i = parts.length - 1; i >= 0; i--) {\n      if (isSpace(parts[i]))\n        rightCount++;\n      else\n        break;\n    }\n  }\n  const middle = parts.slice(leftCount, parts.length - rightCount);\n  return [\n    ...parts.slice(0, leftCount),\n    ...renderContinuousSpaces ? separateContinuousSpaces(middle) : [middle.join(\"\")],\n    ...parts.slice(parts.length - rightCount)\n  ];\n}\n\nfunction transformerRenderWhitespace(options = {}) {\n  const classMap = {\n    \" \": options.classSpace ?? \"space\",\n    \"\t\": options.classTab ?? \"tab\"\n  };\n  const position = options.position ?? \"all\";\n  const keys = Object.keys(classMap);\n  return {\n    name: \"@shikijs/transformers:render-whitespace\",\n    // We use `root` hook here to ensure it runs after all other transformers\n    root(root) {\n      const pre = root.children[0];\n      const code = pre.tagName === \"pre\" ? pre.children[0] : { children: [root] };\n      code.children.forEach(\n        (line) => {\n          if (line.type !== \"element\" && line.type !== \"root\")\n            return;\n          const elements = line.children.filter((token) => token.type === \"element\");\n          const last = elements.length - 1;\n          line.children = line.children.flatMap((token) => {\n            if (token.type !== \"element\")\n              return token;\n            const index = elements.indexOf(token);\n            if (position === \"boundary\" && index !== 0 && index !== last)\n              return token;\n            if (position === \"trailing\" && index !== last)\n              return token;\n            const node = token.children[0];\n            if (node.type !== \"text\" || !node.value)\n              return token;\n            const parts = splitSpaces(\n              node.value.split(/([ \\t])/).filter((i) => i.length),\n              position === \"boundary\" && index === last && last !== 0 ? \"trailing\" : position,\n              position !== \"trailing\"\n            );\n            if (parts.length <= 1)\n              return token;\n            return parts.map((part) => {\n              const clone = {\n                ...token,\n                properties: { ...token.properties }\n              };\n              clone.children = [{ type: \"text\", value: part }];\n              if (keys.includes(part)) {\n                this.addClassToHast(clone, classMap[part]);\n                delete clone.properties.style;\n              }\n              return clone;\n            });\n          });\n        }\n      );\n    }\n  };\n}\n\nfunction transformerStyleToClass(options = {}) {\n  const {\n    classPrefix = \"__shiki_\",\n    classSuffix = \"\",\n    classReplacer = (className) => className\n  } = options;\n  const classToStyle = /* @__PURE__ */ new Map();\n  function stringifyStyle(style) {\n    return Object.entries(style).map(([key, value]) => `${key}:${value}`).join(\";\");\n  }\n  function registerStyle(style) {\n    const str = typeof style === \"string\" ? style : stringifyStyle(style);\n    let className = classPrefix + cyrb53(str) + classSuffix;\n    className = classReplacer(className);\n    if (!classToStyle.has(className)) {\n      classToStyle.set(\n        className,\n        typeof style === \"string\" ? style : { ...style }\n      );\n    }\n    return className;\n  }\n  return {\n    name: \"@shikijs/transformers:style-to-class\",\n    pre(t) {\n      if (!t.properties.style)\n        return;\n      const className = registerStyle(t.properties.style);\n      delete t.properties.style;\n      this.addClassToHast(t, className);\n    },\n    tokens(lines) {\n      for (const line of lines) {\n        for (const token of line) {\n          if (!token.htmlStyle)\n            continue;\n          const className = registerStyle(token.htmlStyle);\n          token.htmlStyle = {};\n          token.htmlAttrs ||= {};\n          if (!token.htmlAttrs.class)\n            token.htmlAttrs.class = className;\n          else\n            token.htmlAttrs.class += ` ${className}`;\n        }\n      }\n    },\n    getClassRegistry() {\n      return classToStyle;\n    },\n    getCSS() {\n      let css = \"\";\n      for (const [className, style] of classToStyle.entries()) {\n        css += `.${className}{${typeof style === \"string\" ? style : stringifyStyle(style)}}`;\n      }\n      return css;\n    },\n    clearRegistry() {\n      classToStyle.clear();\n    }\n  };\n}\nfunction cyrb53(str, seed = 0) {\n  let h1 = 3735928559 ^ seed;\n  let h2 = 1103547991 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507);\n  h1 ^= Math.imul(h2 ^ h2 >>> 13, 3266489909);\n  h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507);\n  h2 ^= Math.imul(h1 ^ h1 >>> 13, 3266489909);\n  return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(36).slice(0, 6);\n}\n\nexport { createCommentNotationTransformer, findAllSubstringIndexes, parseMetaHighlightString, parseMetaHighlightWords, transformerCompactLineOptions, transformerMetaHighlight, transformerMetaWordHighlight, transformerNotationDiff, transformerNotationErrorLevel, transformerNotationFocus, transformerNotationHighlight, transformerNotationMap, transformerNotationWordHighlight, transformerRemoveLineBreak, transformerRemoveNotationEscape, transformerRenderWhitespace, transformerStyleToClass };\n"],"x_google_ignoreList":[0],"mappings":"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"}