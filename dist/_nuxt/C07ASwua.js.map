{"version":3,"file":"C07ASwua.js","names":["prop","prop","ignore"],"sources":["../../node_modules/app/components/content/ComponentPropsLinks.vue","../../node_modules/app/components/content/ComponentPropsLinks.vue","../../node_modules/app/components/content/ComponentPropsSchema.vue","../../node_modules/app/components/content/ComponentPropsSchema.vue","../../node_modules/app/components/content/ComponentProps.vue","../../node_modules/app/components/content/ComponentProps.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { kebabCase } from 'scule'\r\nimport type { PropertyMeta } from 'vue-component-meta'\r\n\r\nconst props = defineProps<{\r\n  prop: PropertyMeta\r\n}>()\r\n\r\nconst route = useRoute()\r\n\r\nconst links = computed(() => props.prop.tags?.filter((tag: any) => tag.name === 'link'))\r\n</script>\r\n\r\n<template>\r\n  <ProseUl v-if=\"links?.length\">\r\n    <ProseLi v-for=\"(link, index) in links\" :key=\"index\">\r\n      <MDC :value=\"link.text ?? ''\" class=\"my-1\" :cache-key=\"`${kebabCase(route.path)}-${prop.name}-link-${index}`\" />\r\n    </ProseLi>\r\n  </ProseUl>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { kebabCase } from 'scule'\r\nimport type { PropertyMeta } from 'vue-component-meta'\r\n\r\nconst props = defineProps<{\r\n  prop: PropertyMeta\r\n}>()\r\n\r\nconst route = useRoute()\r\n\r\nconst links = computed(() => props.prop.tags?.filter((tag: any) => tag.name === 'link'))\r\n</script>\r\n\r\n<template>\r\n  <ProseUl v-if=\"links?.length\">\r\n    <ProseLi v-for=\"(link, index) in links\" :key=\"index\">\r\n      <MDC :value=\"link.text ?? ''\" class=\"my-1\" :cache-key=\"`${kebabCase(route.path)}-${prop.name}-link-${index}`\" />\r\n    </ProseLi>\r\n  </ProseUl>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { kebabCase } from 'scule'\r\nimport type { PropertyMeta } from 'vue-component-meta'\r\n\r\nconst props = defineProps<{\r\n  prop: PropertyMeta\r\n  ignore?: string[]\r\n}>()\r\n\r\nconst route = useRoute()\r\n\r\nfunction getSchemaProps(schema: PropertyMeta['schema']): any {\r\n  if (!schema || typeof schema === 'string' || !schema.schema) {\r\n    return []\r\n  }\r\n\r\n  if (schema.kind === 'object') {\r\n    return Object.values(schema.schema).filter(prop => !props.ignore?.includes(prop.name))\r\n  }\r\n\r\n  return (Array.isArray(schema.schema) ? schema.schema : Object.values(schema.schema)).flatMap(getSchemaProps as any)\r\n}\r\n\r\nconst schemaProps = computed(() => {\r\n  return getSchemaProps(props.prop.schema).map((prop: any) => {\r\n    const defaultValue = prop.default ?? prop.tags?.find((tag: any) => tag.name === 'defaultValue')?.text\r\n    let description = prop.description\r\n    if (defaultValue) {\r\n      description = description ? `${description} Defaults to \\`${defaultValue}\\`{lang=\"ts-type\"}.` : `Defaults to \\`${defaultValue}\\`{lang=\"ts-type\"}.`\r\n    }\r\n\r\n    return {\r\n      ...prop,\r\n      description\r\n    }\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ProseCollapsible v-if=\"schemaProps?.length\" class=\"mt-1 mb-0\">\r\n    <ProseUl>\r\n      <ProseLi v-for=\"schemaProp in schemaProps\" :key=\"schemaProp.name\">\r\n        <HighlightInlineType :type=\"`${schemaProp.name}${schemaProp.required === false ? '?' : ''}: ${schemaProp.type}`\" />\r\n\r\n        <MDC v-if=\"schemaProp.description\" :value=\"schemaProp.description\" class=\"text-muted my-1\" :cache-key=\"`${kebabCase(route.path)}-${prop.name}-${schemaProp.name}-description`\" />\r\n      </ProseLi>\r\n    </ProseUl>\r\n  </ProseCollapsible>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { kebabCase } from 'scule'\r\nimport type { PropertyMeta } from 'vue-component-meta'\r\n\r\nconst props = defineProps<{\r\n  prop: PropertyMeta\r\n  ignore?: string[]\r\n}>()\r\n\r\nconst route = useRoute()\r\n\r\nfunction getSchemaProps(schema: PropertyMeta['schema']): any {\r\n  if (!schema || typeof schema === 'string' || !schema.schema) {\r\n    return []\r\n  }\r\n\r\n  if (schema.kind === 'object') {\r\n    return Object.values(schema.schema).filter(prop => !props.ignore?.includes(prop.name))\r\n  }\r\n\r\n  return (Array.isArray(schema.schema) ? schema.schema : Object.values(schema.schema)).flatMap(getSchemaProps as any)\r\n}\r\n\r\nconst schemaProps = computed(() => {\r\n  return getSchemaProps(props.prop.schema).map((prop: any) => {\r\n    const defaultValue = prop.default ?? prop.tags?.find((tag: any) => tag.name === 'defaultValue')?.text\r\n    let description = prop.description\r\n    if (defaultValue) {\r\n      description = description ? `${description} Defaults to \\`${defaultValue}\\`{lang=\"ts-type\"}.` : `Defaults to \\`${defaultValue}\\`{lang=\"ts-type\"}.`\r\n    }\r\n\r\n    return {\r\n      ...prop,\r\n      description\r\n    }\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ProseCollapsible v-if=\"schemaProps?.length\" class=\"mt-1 mb-0\">\r\n    <ProseUl>\r\n      <ProseLi v-for=\"schemaProp in schemaProps\" :key=\"schemaProp.name\">\r\n        <HighlightInlineType :type=\"`${schemaProp.name}${schemaProp.required === false ? '?' : ''}: ${schemaProp.type}`\" />\r\n\r\n        <MDC v-if=\"schemaProp.description\" :value=\"schemaProp.description\" class=\"text-muted my-1\" :cache-key=\"`${kebabCase(route.path)}-${prop.name}-${schemaProp.name}-description`\" />\r\n      </ProseLi>\r\n    </ProseUl>\r\n  </ProseCollapsible>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { upperFirst, camelCase, kebabCase } from 'scule'\r\nimport type { ComponentMeta } from 'vue-component-meta'\r\nimport * as theme from '#build/ui'\r\nimport * as themePro from '#build/ui-pro'\r\n\r\nconst props = withDefaults(defineProps<{\r\n  name?: string\r\n  ignore?: string[]\r\n  pro?: boolean\r\n  prose?: boolean\r\n}>(), {\r\n  ignore: () => [\r\n    'activeClass',\r\n    'inactiveClass',\r\n    'exactActiveClass',\r\n    'ariaCurrentValue',\r\n    'href',\r\n    'rel',\r\n    'noRel',\r\n    'prefetch',\r\n    'prefetchOn',\r\n    'noPrefetch',\r\n    'prefetchedClass',\r\n    'replace',\r\n    'exact',\r\n    'exactQuery',\r\n    'exactHash',\r\n    'external',\r\n    'onClick',\r\n    'viewTransition'\r\n  ]\r\n})\r\n\r\nconst route = useRoute()\r\n\r\nconst camelName = camelCase(props.name ?? route.path.split('/').pop() ?? '')\r\nconst componentName = props.prose ? `Prose${upperFirst(camelName)}` : `U${upperFirst(camelName)}`\r\n\r\nconst componentTheme = ((props.pro ? props.prose ? themePro.prose : themePro : theme) as any)[camelName]\r\nconst meta = await fetchComponentMeta(componentName as any)\r\n\r\nconst metaProps: ComputedRef<ComponentMeta['props']> = computed(() => {\r\n  if (!meta?.meta?.props?.length) {\r\n    return []\r\n  }\r\n\r\n  return meta.meta.props.filter((prop) => {\r\n    return !props.ignore?.includes(prop.name)\r\n  }).map((prop) => {\r\n    if (prop.default) {\r\n      prop.default = prop.default.replace(' as never', '').replace(/^\"(.*)\"$/, '\\'$1\\'')\r\n    } else {\r\n      const tag = prop.tags?.find(tag => tag.name === 'defaultValue')?.text\r\n      if (tag) {\r\n        prop.default = tag\r\n      } else if (componentTheme?.defaultVariants?.[prop.name]) {\r\n        prop.default = typeof componentTheme?.defaultVariants?.[prop.name] === 'string' ? `'${componentTheme?.defaultVariants?.[prop.name]}'` : componentTheme?.defaultVariants?.[prop.name]\r\n      }\r\n    }\r\n\r\n    // @ts-expect-error - Type is not correct\r\n    prop.type = !prop.type.startsWith('boolean') && prop.schema?.kind === 'enum' && Object.keys(prop.schema.schema)?.length ? Object.values(prop.schema.schema).map(schema => schema?.type ? schema.type : schema).join(' | ') : prop.type\r\n    return prop\r\n  }).sort((a, b) => {\r\n    if (a.name === 'as') {\r\n      return -1\r\n    }\r\n\r\n    if (b.name === 'as') {\r\n      return 1\r\n    }\r\n\r\n    if (a.name === 'ui') {\r\n      return 1\r\n    }\r\n\r\n    if (b.name === 'ui') {\r\n      return -1\r\n    }\r\n\r\n    return 0\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ProseTable>\r\n    <ProseThead>\r\n      <ProseTr>\r\n        <ProseTh>\r\n          Prop\r\n        </ProseTh>\r\n        <ProseTh>\r\n          Default\r\n        </ProseTh>\r\n        <ProseTh>\r\n          Type\r\n        </ProseTh>\r\n      </ProseTr>\r\n    </ProseThead>\r\n    <ProseTbody>\r\n      <ProseTr v-for=\"prop in metaProps\" :key=\"prop.name\">\r\n        <ProseTd>\r\n          <ProseCode>\r\n            {{ prop.name }}\r\n          </ProseCode>\r\n        </ProseTd>\r\n        <ProseTd>\r\n          <HighlightInlineType v-if=\"prop.default\" :type=\"prop.default\" />\r\n        </ProseTd>\r\n        <ProseTd>\r\n          <HighlightInlineType v-if=\"prop.type\" :type=\"prop.type\" />\r\n\r\n          <MDC v-if=\"prop.description\" :value=\"prop.description\" class=\"text-toned mt-1\" :cache-key=\"`${kebabCase(route.path)}-${prop.name}-description`\" />\r\n\r\n          <ComponentPropsLinks v-if=\"prop.tags?.length\" :prop=\"prop\" />\r\n          <ComponentPropsSchema v-if=\"prop.schema\" :prop=\"prop\" :ignore=\"ignore\" />\r\n        </ProseTd>\r\n      </ProseTr>\r\n    </ProseTbody>\r\n  </ProseTable>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { upperFirst, camelCase, kebabCase } from 'scule'\r\nimport type { ComponentMeta } from 'vue-component-meta'\r\nimport * as theme from '#build/ui'\r\nimport * as themePro from '#build/ui-pro'\r\n\r\nconst props = withDefaults(defineProps<{\r\n  name?: string\r\n  ignore?: string[]\r\n  pro?: boolean\r\n  prose?: boolean\r\n}>(), {\r\n  ignore: () => [\r\n    'activeClass',\r\n    'inactiveClass',\r\n    'exactActiveClass',\r\n    'ariaCurrentValue',\r\n    'href',\r\n    'rel',\r\n    'noRel',\r\n    'prefetch',\r\n    'prefetchOn',\r\n    'noPrefetch',\r\n    'prefetchedClass',\r\n    'replace',\r\n    'exact',\r\n    'exactQuery',\r\n    'exactHash',\r\n    'external',\r\n    'onClick',\r\n    'viewTransition'\r\n  ]\r\n})\r\n\r\nconst route = useRoute()\r\n\r\nconst camelName = camelCase(props.name ?? route.path.split('/').pop() ?? '')\r\nconst componentName = props.prose ? `Prose${upperFirst(camelName)}` : `U${upperFirst(camelName)}`\r\n\r\nconst componentTheme = ((props.pro ? props.prose ? themePro.prose : themePro : theme) as any)[camelName]\r\nconst meta = await fetchComponentMeta(componentName as any)\r\n\r\nconst metaProps: ComputedRef<ComponentMeta['props']> = computed(() => {\r\n  if (!meta?.meta?.props?.length) {\r\n    return []\r\n  }\r\n\r\n  return meta.meta.props.filter((prop) => {\r\n    return !props.ignore?.includes(prop.name)\r\n  }).map((prop) => {\r\n    if (prop.default) {\r\n      prop.default = prop.default.replace(' as never', '').replace(/^\"(.*)\"$/, '\\'$1\\'')\r\n    } else {\r\n      const tag = prop.tags?.find(tag => tag.name === 'defaultValue')?.text\r\n      if (tag) {\r\n        prop.default = tag\r\n      } else if (componentTheme?.defaultVariants?.[prop.name]) {\r\n        prop.default = typeof componentTheme?.defaultVariants?.[prop.name] === 'string' ? `'${componentTheme?.defaultVariants?.[prop.name]}'` : componentTheme?.defaultVariants?.[prop.name]\r\n      }\r\n    }\r\n\r\n    // @ts-expect-error - Type is not correct\r\n    prop.type = !prop.type.startsWith('boolean') && prop.schema?.kind === 'enum' && Object.keys(prop.schema.schema)?.length ? Object.values(prop.schema.schema).map(schema => schema?.type ? schema.type : schema).join(' | ') : prop.type\r\n    return prop\r\n  }).sort((a, b) => {\r\n    if (a.name === 'as') {\r\n      return -1\r\n    }\r\n\r\n    if (b.name === 'as') {\r\n      return 1\r\n    }\r\n\r\n    if (a.name === 'ui') {\r\n      return 1\r\n    }\r\n\r\n    if (b.name === 'ui') {\r\n      return -1\r\n    }\r\n\r\n    return 0\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ProseTable>\r\n    <ProseThead>\r\n      <ProseTr>\r\n        <ProseTh>\r\n          Prop\r\n        </ProseTh>\r\n        <ProseTh>\r\n          Default\r\n        </ProseTh>\r\n        <ProseTh>\r\n          Type\r\n        </ProseTh>\r\n      </ProseTr>\r\n    </ProseThead>\r\n    <ProseTbody>\r\n      <ProseTr v-for=\"prop in metaProps\" :key=\"prop.name\">\r\n        <ProseTd>\r\n          <ProseCode>\r\n            {{ prop.name }}\r\n          </ProseCode>\r\n        </ProseTd>\r\n        <ProseTd>\r\n          <HighlightInlineType v-if=\"prop.default\" :type=\"prop.default\" />\r\n        </ProseTd>\r\n        <ProseTd>\r\n          <HighlightInlineType v-if=\"prop.type\" :type=\"prop.type\" />\r\n\r\n          <MDC v-if=\"prop.description\" :value=\"prop.description\" class=\"text-toned mt-1\" :cache-key=\"`${kebabCase(route.path)}-${prop.name}-description`\" />\r\n\r\n          <ComponentPropsLinks v-if=\"prop.tags?.length\" :prop=\"prop\" />\r\n          <ComponentPropsSchema v-if=\"prop.schema\" :prop=\"prop\" :ignore=\"ignore\" />\r\n        </ProseTd>\r\n      </ProseTr>\r\n    </ProseTbody>\r\n  </ProseTable>\r\n</template>\r\n"],"mappings":"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"}