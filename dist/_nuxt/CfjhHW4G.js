import{Gi as e,_t as t,bt as n,xt as r,yt as i}from"#entry";async function a(e,t=`gzip`){let n=Uint8Array.from(atob(e),e=>e.charCodeAt(0)),r=new Response(new Blob([n])).body?.pipeThrough(new DecompressionStream(t)),i=await new Response(r).text();return JSON.parse(i)}function o(e,t){let n=s(e),r={...t};for(let e in r)n[e]===`json`&&r[e]&&r[e]!==`undefined`&&(r[e]=JSON.parse(r[e])),n[e]===`boolean`&&r[e]!==`undefined`&&(r[e]=!!r[e]);for(let e in r)r[e]===`NULL`&&(r[e]=void 0);return r}function s(e){let t=e.match(/FROM\s+(\w+)/);return t&&r[c(t[1])]?.fields||{}}function c(e){return e.replace(/^_content_/,``)}var l,u={},d={};function f(e){async function t(e){return l||(d._=d._||p(),l=await d._,Reflect.deleteProperty(d,`_`)),u[String(e)]||(d[String(e)]=d[String(e)]||m(e),await d[String(e)],u[String(e)]=`loaded`,Reflect.deleteProperty(d,String(e))),l}return{all:async(n,r)=>(await t(e),l.exec({sql:n,bind:r,rowMode:`object`,returnValue:`resultRows`}).map(e=>o(n,e))),first:async(n,r)=>(await t(e),o(n,l.exec({sql:n,bind:r,rowMode:`object`,returnValue:`resultRows`}).shift())),exec:async(n,r)=>{await t(e),await l.exec({sql:n,bind:r})}}}async function p(){if(!l){let t=await e(()=>import(`./nWnrTqzG.js`),[],import.meta.url).then(e=>e.default);globalThis.sqlite3ApiConfig={silent:!0,debug:(...e)=>console.debug(...e),warn:(...e)=>{String(e[0]).includes(`OPFS sqlite3_vfs`)||console.warn(...e)},error:(...e)=>console.error(...e),log:(...e)=>console.log(...e)},l=new(await(t())).oo1.DB}return l}async function m(e){if(window.sessionStorage.getItem(`previewToken`))return l;let r=null,o=`checksum_${e}`,s=`collection_${e}`,c=`matched`;try{l.exec({sql:`SELECT * FROM ${n.info} where id = '${o}'`,rowMode:`object`,returnValue:`resultRows`}).shift()?.version!==i[String(e)]&&(c=`mismatch`)}catch{c=`missing`}if(c!==`matched`){if(window.localStorage.getItem(`content_${o}`)===i[String(e)]&&(r=window.localStorage.getItem(`content_${s}`)),!r){r=await t(void 0,String(e));try{window.localStorage.setItem(`content_${o}`,i[String(e)]),window.localStorage.setItem(`content_${s}`,r)}catch(e){console.error(`Database integrity check failed, rebuilding database`,e)}}let u=await a(r);await l.exec({sql:`DROP TABLE IF EXISTS ${n[String(e)]}`}),c===`mismatch`&&await l.exec({sql:`DELETE FROM ${n.info} WHERE id = '${o}'`});for(let e of u)try{await l.exec(e)}catch(e){console.error(`Error executing command`,e)}}return l}export{f as t};
//# sourceMappingURL=CfjhHW4G.js.map