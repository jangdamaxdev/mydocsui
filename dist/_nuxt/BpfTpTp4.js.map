{"version":3,"file":"BpfTpTp4.js","names":[],"sources":["../../node_modules/.cache/.pnpm/@nuxtjs+mdc@0.17.4_magicast@0.3.5/node_modules/@nuxtjs/mdc/dist/runtime/highlighter/rehype.js"],"sourcesContent":["import { visit } from \"unist-util-visit\";\nimport { toString } from \"hast-util-to-string\";\nexport default rehypeHighlight;\nexport function rehypeHighlight(opts) {\n  const options = opts;\n  return async (tree) => {\n    const tasks = [];\n    const styles = [];\n    visit(\n      tree,\n      (_node) => {\n        const node = _node;\n        if (![\"pre\", \"code\"].includes(node.tagName)) {\n          return false;\n        }\n        const hasHighlightableLanguage = node.properties?.language !== void 0 && node.properties?.language !== \"text\";\n        const hasHighlightableLines = Boolean(node.properties?.highlights);\n        return hasHighlightableLanguage || hasHighlightableLines;\n      },\n      (node) => {\n        const _node = node;\n        const highlights = typeof _node.properties.highlights === \"string\" ? _node.properties.highlights.split(/[,\\s]+/).map(Number) : Array.isArray(_node.properties.highlights) ? _node.properties.highlights.map(Number) : [];\n        const task = options.highlighter(\n          toString(node),\n          _node.properties.language,\n          options.theme,\n          {\n            highlights: highlights.filter(Boolean),\n            meta: _node.properties.meta\n          }\n        ).then(({ tree: tree2, className, style, inlineStyle }) => {\n          _node.properties.className = ((_node.properties.className || \"\") + \" \" + className).trim();\n          _node.properties.style = ((_node.properties.style || \"\") + \" \" + inlineStyle).trim();\n          if (_node.children[0]?.tagName === \"code\") {\n            _node.children[0].children = tree2;\n          } else {\n            _node.children = tree2[0].children || tree2;\n          }\n          if (style)\n            styles.push(style);\n        });\n        tasks.push(task);\n      }\n    );\n    if (tasks.length) {\n      await Promise.all(tasks);\n      tree.children.push({\n        type: \"element\",\n        tagName: \"style\",\n        children: [{ type: \"text\", value: cleanCSS(styles.join(\"\")) }],\n        properties: {}\n      });\n    }\n  };\n}\nconst cleanCSS = (css) => {\n  const styles = css.split(\"}\").filter((s) => Boolean(s.trim())).map((s) => s.trim() + \"}\");\n  return Array.from(new Set(styles)).join(\"\");\n};\n"],"x_google_ignoreList":[0],"mappings":"oCAGA,SAAgB,EAAgB,EAAM,CACpC,IAAM,EAAU,EAChB,OAAO,KAAO,IAAS,CACrB,IAAM,EAAQ,EAAE,CACV,EAAS,EAAE,CACjB,EACE,EACC,GAAU,CACT,IAAM,EAAO,EACb,GAAI,CAAC,CAAC,MAAO,OAAO,CAAC,SAAS,EAAK,QAAQ,CACzC,MAAO,GAET,IAAM,EAA2B,EAAK,YAAY,WAAa,IAAK,IAAK,EAAK,YAAY,WAAa,OACjG,EAAwB,EAAQ,EAAK,YAAY,WACvD,OAAO,GAA4B,GAEpC,GAAS,CACR,IAAM,EAAQ,EACR,EAAa,OAAO,EAAM,WAAW,YAAe,SAAW,EAAM,WAAW,WAAW,MAAM,SAAS,CAAC,IAAI,OAAO,CAAG,MAAM,QAAQ,EAAM,WAAW,WAAW,CAAG,EAAM,WAAW,WAAW,IAAI,OAAO,CAAG,EAAE,CAClN,EAAO,EAAQ,YACnB,EAAS,EAAK,CACd,EAAM,WAAW,SACjB,EAAQ,MACR,CACE,WAAY,EAAW,OAAO,QAAQ,CACtC,KAAM,EAAM,WAAW,KACxB,CACF,CAAC,MAAM,CAAE,KAAM,EAAO,YAAW,QAAO,iBAAkB,CACzD,EAAM,WAAW,YAAc,EAAM,WAAW,WAAa,IAAM,IAAM,GAAW,MAAM,CAC1F,EAAM,WAAW,QAAU,EAAM,WAAW,OAAS,IAAM,IAAM,GAAa,MAAM,CAChF,EAAM,SAAS,IAAI,UAAY,OACjC,EAAM,SAAS,GAAG,SAAW,EAE7B,EAAM,SAAW,EAAM,GAAG,UAAY,EAEpC,GACF,EAAO,KAAK,EAAM,EACpB,CACF,EAAM,KAAK,EAAK,EAEnB,CACG,EAAM,SACR,MAAM,QAAQ,IAAI,EAAM,CACxB,EAAK,SAAS,KAAK,CACjB,KAAM,UACN,QAAS,QACT,SAAU,CAAC,CAAE,KAAM,OAAQ,MAAO,EAAS,EAAO,KAAK,GAAG,CAAC,CAAE,CAAC,CAC9D,WAAY,EAAE,CACf,CAAC,GAIR,IAAM,EAAY,GAAQ,CACxB,IAAM,EAAS,EAAI,MAAM,IAAI,CAAC,OAAQ,GAAM,EAAQ,EAAE,MAAM,CAAE,CAAC,IAAK,GAAM,EAAE,MAAM,CAAG,IAAI,CACzF,OAAO,MAAM,KAAK,IAAI,IAAI,EAAO,CAAC,CAAC,KAAK,GAAG"}