{"version":3,"file":"CpMzqlrw.js","names":["pointerDown","emblaApi"],"sources":["../../node_modules/.cache/.pnpm/embla-carousel-fade@8.6.0_embla-carousel@8.6.0/node_modules/embla-carousel-fade/esm/embla-carousel-fade.esm.js"],"sourcesContent":["function clampNumber(number, min, max) {\n  return Math.min(Math.max(number, min), max);\n}\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nfunction Fade(userOptions = {}) {\n  const fullOpacity = 1;\n  const noOpacity = 0;\n  const fadeFriction = 0.68;\n  let emblaApi;\n  let opacities = [];\n  let fadeToNextDistance;\n  let distanceFromPointerDown = 0;\n  let fadeVelocity = 0;\n  let progress = 0;\n  let shouldFadePair = false;\n  let defaultSettledBehaviour;\n  let defaultProgressBehaviour;\n  function init(emblaApiInstance) {\n    emblaApi = emblaApiInstance;\n    const selectedSnap = emblaApi.selectedScrollSnap();\n    const {\n      scrollBody,\n      containerRect,\n      axis\n    } = emblaApi.internalEngine();\n    const containerSize = axis.measureSize(containerRect);\n    fadeToNextDistance = clampNumber(containerSize * 0.75, 200, 500);\n    shouldFadePair = false;\n    opacities = emblaApi.scrollSnapList().map((_, index) => index === selectedSnap ? fullOpacity : noOpacity);\n    defaultSettledBehaviour = scrollBody.settled;\n    defaultProgressBehaviour = emblaApi.scrollProgress;\n    scrollBody.settled = settled;\n    emblaApi.scrollProgress = scrollProgress;\n    emblaApi.on('select', select).on('slideFocus', fadeToSelectedSnapInstantly).on('pointerDown', pointerDown).on('pointerUp', pointerUp);\n    disableScroll();\n    fadeToSelectedSnapInstantly();\n  }\n  function destroy() {\n    const {\n      scrollBody\n    } = emblaApi.internalEngine();\n    scrollBody.settled = defaultSettledBehaviour;\n    emblaApi.scrollProgress = defaultProgressBehaviour;\n    emblaApi.off('select', select).off('slideFocus', fadeToSelectedSnapInstantly).off('pointerDown', pointerDown).off('pointerUp', pointerUp);\n    emblaApi.slideNodes().forEach(slideNode => {\n      const slideStyle = slideNode.style;\n      slideStyle.opacity = '';\n      slideStyle.transform = '';\n      slideStyle.pointerEvents = '';\n      if (!slideNode.getAttribute('style')) slideNode.removeAttribute('style');\n    });\n  }\n  function fadeToSelectedSnapInstantly() {\n    const selectedSnap = emblaApi.selectedScrollSnap();\n    setOpacities(selectedSnap, fullOpacity);\n  }\n  function pointerUp() {\n    shouldFadePair = false;\n  }\n  function pointerDown() {\n    shouldFadePair = false;\n    distanceFromPointerDown = 0;\n    fadeVelocity = 0;\n  }\n  function select() {\n    const duration = emblaApi.internalEngine().scrollBody.duration();\n    fadeVelocity = duration ? 0 : fullOpacity;\n    shouldFadePair = true;\n    if (!duration) fadeToSelectedSnapInstantly();\n  }\n  function getSlideTransform(position) {\n    const {\n      axis\n    } = emblaApi.internalEngine();\n    const translateAxis = axis.scroll.toUpperCase();\n    return `translate${translateAxis}(${axis.direction(position)}px)`;\n  }\n  function disableScroll() {\n    const {\n      translate,\n      slideLooper\n    } = emblaApi.internalEngine();\n    translate.clear();\n    translate.toggleActive(false);\n    slideLooper.loopPoints.forEach(({\n      translate\n    }) => {\n      translate.clear();\n      translate.toggleActive(false);\n    });\n  }\n  function lockExcessiveScroll(fadeIndex) {\n    const {\n      scrollSnaps,\n      location,\n      target\n    } = emblaApi.internalEngine();\n    if (!isNumber(fadeIndex) || opacities[fadeIndex] < 0.5) return;\n    location.set(scrollSnaps[fadeIndex]);\n    target.set(location);\n  }\n  function setOpacities(fadeIndex, velocity) {\n    const scrollSnaps = emblaApi.scrollSnapList();\n    scrollSnaps.forEach((_, indexA) => {\n      const absVelocity = Math.abs(velocity);\n      const currentOpacity = opacities[indexA];\n      const isFadeIndex = indexA === fadeIndex;\n      const nextOpacity = isFadeIndex ? currentOpacity + absVelocity : currentOpacity - absVelocity;\n      const clampedOpacity = clampNumber(nextOpacity, noOpacity, fullOpacity);\n      opacities[indexA] = clampedOpacity;\n      const fadePair = isFadeIndex && shouldFadePair;\n      const indexB = emblaApi.previousScrollSnap();\n      if (fadePair) opacities[indexB] = 1 - clampedOpacity;\n      if (isFadeIndex) setProgress(fadeIndex, clampedOpacity);\n      setOpacity(indexA);\n    });\n  }\n  function setOpacity(index) {\n    const slidesInSnap = emblaApi.internalEngine().slideRegistry[index];\n    const {\n      scrollSnaps,\n      containerRect\n    } = emblaApi.internalEngine();\n    const opacity = opacities[index];\n    slidesInSnap.forEach(slideIndex => {\n      const slideStyle = emblaApi.slideNodes()[slideIndex].style;\n      const roundedOpacity = parseFloat(opacity.toFixed(2));\n      const hasOpacity = roundedOpacity > noOpacity;\n      const position = hasOpacity ? scrollSnaps[index] : containerRect.width + 2;\n      const transform = getSlideTransform(position);\n      if (hasOpacity) slideStyle.transform = transform;\n      slideStyle.opacity = roundedOpacity.toString();\n      slideStyle.pointerEvents = opacity > 0.5 ? 'auto' : 'none';\n      if (!hasOpacity) slideStyle.transform = transform;\n    });\n  }\n  function setProgress(fadeIndex, opacity) {\n    const {\n      index,\n      dragHandler,\n      scrollSnaps\n    } = emblaApi.internalEngine();\n    const pointerDown = dragHandler.pointerDown();\n    const snapFraction = 1 / (scrollSnaps.length - 1);\n    let indexA = fadeIndex;\n    let indexB = pointerDown ? emblaApi.selectedScrollSnap() : emblaApi.previousScrollSnap();\n    if (pointerDown && indexA === indexB) {\n      const reverseSign = Math.sign(distanceFromPointerDown) * -1;\n      indexA = indexB;\n      indexB = index.clone().set(indexB).add(reverseSign).get();\n    }\n    const currentPosition = indexB * snapFraction;\n    const diffPosition = (indexA - indexB) * snapFraction;\n    progress = currentPosition + diffPosition * opacity;\n  }\n  function getFadeIndex() {\n    const {\n      dragHandler,\n      index,\n      scrollBody\n    } = emblaApi.internalEngine();\n    const selectedSnap = emblaApi.selectedScrollSnap();\n    if (!dragHandler.pointerDown()) return selectedSnap;\n    const directionSign = Math.sign(scrollBody.velocity());\n    const distanceSign = Math.sign(distanceFromPointerDown);\n    const nextSnap = index.clone().set(selectedSnap).add(directionSign * -1).get();\n    if (!directionSign || !distanceSign) return null;\n    return distanceSign === directionSign ? nextSnap : selectedSnap;\n  }\n  function fade(emblaApi) {\n    const {\n      dragHandler,\n      scrollBody\n    } = emblaApi.internalEngine();\n    const pointerDown = dragHandler.pointerDown();\n    const velocity = scrollBody.velocity();\n    const duration = scrollBody.duration();\n    const fadeIndex = getFadeIndex();\n    const noFadeIndex = !isNumber(fadeIndex);\n    if (pointerDown) {\n      if (!velocity) return;\n      distanceFromPointerDown += velocity;\n      fadeVelocity = Math.abs(velocity / fadeToNextDistance);\n      lockExcessiveScroll(fadeIndex);\n    }\n    if (!pointerDown) {\n      if (!duration || noFadeIndex) return;\n      fadeVelocity += (fullOpacity - opacities[fadeIndex]) / duration;\n      fadeVelocity *= fadeFriction;\n    }\n    if (noFadeIndex) return;\n    setOpacities(fadeIndex, fadeVelocity);\n  }\n  function settled() {\n    const {\n      target,\n      location\n    } = emblaApi.internalEngine();\n    const diffToTarget = target.get() - location.get();\n    const notReachedTarget = Math.abs(diffToTarget) >= 1;\n    const fadeIndex = getFadeIndex();\n    const noFadeIndex = !isNumber(fadeIndex);\n    fade(emblaApi);\n    if (noFadeIndex || notReachedTarget) return false;\n    return opacities[fadeIndex] > 0.999;\n  }\n  function scrollProgress() {\n    return progress;\n  }\n  const self = {\n    name: 'fade',\n    options: userOptions,\n    init,\n    destroy\n  };\n  return self;\n}\nFade.globalOptions = undefined;\n\nexport { Fade as default };\n//# sourceMappingURL=embla-carousel-fade.esm.js.map\n"],"x_google_ignoreList":[0],"mappings":"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"}