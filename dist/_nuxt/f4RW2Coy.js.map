{"version":3,"file":"f4RW2Coy.js","names":["emptyChildren","siblings","html","body","tbody","html","head","child","commas","spaces"],"sources":["../../node_modules/.cache/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/comment.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/doctype.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/opening.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/element.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/raw.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/root.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/index.js","../../node_modules/.cache/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Comment, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>']\nconst commentEntitySubset = ['<', '>']\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n","/**\n * @import {Doctype, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @import {Parents, RootContent} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = []\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren\n    let offset = (index || 0) + increment\n    let next = siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter, siblingBefore} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  /** @type {Set<string>} */\n  const seen = new Set()\n\n  // Whether `srcdoc` or not,\n  // make sure the content model at least doesn’t have too many `base`s/`title`s.\n  for (const child of node.children) {\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'base' || child.tagName === 'title')\n    ) {\n      if (seen.has(child.tagName)) return false\n      seen.add(child.tagName)\n    }\n  }\n\n  // “May be omitted if the element is empty,\n  // or if the first thing inside the head element is an element.”\n  const child = node.children[0]\n  return !child || child.type === 'element'\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n","/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {find, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {closing} from '../omission/closing.js'\nimport {opening} from '../omission/opening.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attributes = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    (info.boolean || info.overloadedBoolean) &&\n    (typeof value !== 'string' || value === info.attribute || value === '')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @import {Parents, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&']\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n","/**\n * @import {Parents} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @import {Parents, Root} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_)\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @import {Nodes, Parents, RootContent} from 'hast'\n * @import {Schema} from 'property-information'\n * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'\n */\n\n/**\n * @typedef {Omit<StringifyEntitiesOptions, 'attribute' | 'escapeOnly' | 'subset'>} CharacterReferences\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [allowDangerousCharacters=false]\n *   Do not encode some characters which cause XSS vulnerabilities in older\n *   browsers (default: `false`).\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Allow `raw` nodes and insert them as raw HTML (default: `false`).\n *\n *   When `false`, `Raw` nodes are encoded.\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowParseErrors=false]\n *   Do not encode characters which cause parse errors (even though they work),\n *   to save bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [bogusComments=false]\n *   Use “bogus comments” instead of comments to save byes: `<?charlie>`\n *   instead of `<!--charlie-->` (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {CharacterReferences | null | undefined} [characterReferences]\n *   Configure how to serialize character references (optional).\n * @property {boolean | null | undefined} [closeEmptyElements=false]\n *   Close SVG elements without any content with slash (`/`) on the opening tag\n *   instead of an end tag: `<circle />` instead of `<circle></circle>`\n *   (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the HTML space.\n * @property {boolean | null | undefined} [closeSelfClosing=false]\n *   Close self-closing nodes with an extra slash (`/`): `<img />` instead of\n *   `<img>` (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [collapseEmptyAttributes=false]\n *   Collapse empty attributes: get `class` instead of `class=\"\"` (default:\n *   `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: boolean attributes (such as `hidden`) are always collapsed.\n * @property {boolean | null | undefined} [omitOptionalTags=false]\n *   Omit optional opening and closing tags (default: `false`).\n *\n *   For example, in `<ol><li>one</li><li>two</li></ol>`, both `</li>` closing\n *   tags can be omitted.\n *   The first because it’s followed by another `li`, the last because it’s\n *   followed by nothing.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [preferUnquoted=false]\n *   Leave attributes unquoted if that results in less bytes (default: `false`).\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {Quote | null | undefined} [quote='\"']\n *   Preferred quote to use (default: `'\"'`).\n * @property {Space | null | undefined} [space='html']\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it (default: `'html'`).\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use [`xast`][xast] if you need to support SVG as XML.\n * @property {boolean | null | undefined} [tightAttributes=false]\n *   Join attributes together, without whitespace, if possible: get\n *   `class=\"a b\"title=\"c d\"` instead of `class=\"a b\" title=\"c d\"` to save\n *   bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightCommaSeparatedLists=false]\n *   Join known comma-separated attribute values with just a comma (`,`),\n *   instead of padding them on the right as well (`,␠`, where `␠` represents a\n *   space) (default: `false`).\n * @property {boolean | null | undefined} [tightDoctype=false]\n *   Drop unneeded spaces in doctypes: `<!doctypehtml>` instead of\n *   `<!doctype html>` to save bytes (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n *\n *   > 👉 **Note**: only used if `closeSelfClosing: true` or\n *   > `closeEmptyElements: true`.\n * @property {boolean | null | undefined} [upperDoctype=false]\n *   Use a `<!DOCTYPE…` instead of `<!doctype…` (default: `false`).\n *\n *   Useless except for XHTML.\n * @property {ReadonlyArray<string> | null | undefined} [voids]\n *   Tag names of elements to serialize without closing tag (default: `html-void-elements`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: It’s highly unlikely that you want to pass this, because\n *   > hast is not for XML, and HTML will not add more void elements.\n *\n * @typedef {'\"' | \"'\"} Quote\n *   HTML quotes for attribute values.\n *\n * @typedef {Omit<Required<{[key in keyof Options]: Exclude<Options[key], null | undefined>}>, 'space' | 'quote'>} Settings\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Parents | undefined) => string} all\n *   Serialize the children of a parent node.\n * @property {Quote} alternative\n *   Alternative quote.\n * @property {(node: Nodes, index: number | undefined, parent: Parents | undefined) => string} one\n *   Serialize one node.\n * @property {Quote} quote\n *   Preferred quote.\n * @property {Schema} schema\n *   Current schema.\n * @property {Settings} settings\n *   User configuration.\n */\n\nimport {htmlVoidElements} from 'html-void-elements'\nimport {html, svg} from 'property-information'\nimport {handle} from './handle/index.js'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {}\n\n/** @type {Array<never>} */\nconst emptyChildren = []\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nexport function toHtml(tree, options) {\n  const options_ = options || emptyOptions\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || emptyChildren\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12],"mappings":"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"}